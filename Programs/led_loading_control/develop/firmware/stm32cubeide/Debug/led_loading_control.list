
led_loading_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000167c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001824  08001824  00011824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001834  08001834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800183c  0800183c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800183c  0800183c  0001183c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd82  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca4  00000000  00000000  0002bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000089f1  00000000  00000000  0002da62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000990  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000009c8  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000204f2  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ec71  00000000  00000000  00057ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4f0e  00000000  00000000  00066913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0012b821  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000187c  00000000  00000000  0012b874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800180c 	.word	0x0800180c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	0800180c 	.word	0x0800180c

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Initialize_Button>:
};

static struct user_button user_button;

void Initialize_Button(void)
{
 80004ec:	b510      	push	{r4, lr}
 80004ee:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	2400      	movs	r4, #0
 80004f2:	9403      	str	r4, [sp, #12]
 80004f4:	9404      	str	r4, [sp, #16]
 80004f6:	9405      	str	r4, [sp, #20]
 80004f8:	9406      	str	r4, [sp, #24]
 80004fa:	9407      	str	r4, [sp, #28]

   __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fc:	9401      	str	r4, [sp, #4]
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <Initialize_Button+0x64>)
 8000500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000506:	631a      	str	r2, [r3, #48]	; 0x30
 8000508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800050e:	9201      	str	r2, [sp, #4]
 8000510:	9a01      	ldr	r2, [sp, #4]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000512:	9402      	str	r4, [sp, #8]
 8000514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000516:	f042 0208 	orr.w	r2, r2, #8
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0308 	and.w	r3, r3, #8
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	9b02      	ldr	r3, [sp, #8]

   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000526:	4622      	mov	r2, r4
 8000528:	4621      	mov	r1, r4
 800052a:	2006      	movs	r0, #6
 800052c:	f000 fad8 	bl	8000ae0 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000530:	2006      	movs	r0, #6
 8000532:	f000 fb0b 	bl	8000b4c <HAL_NVIC_EnableIRQ>

   /*Configure GPIO pin : PtPin */
   GPIO_InitStruct.Pin = BUTTON_Pin;
 8000536:	2301      	movs	r3, #1
 8000538:	9303      	str	r3, [sp, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800053e:	9304      	str	r3, [sp, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	9405      	str	r4, [sp, #20]
   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000542:	a903      	add	r1, sp, #12
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <Initialize_Button+0x68>)
 8000546:	f000 fb23 	bl	8000b90 <HAL_GPIO_Init>
}
 800054a:	b008      	add	sp, #32
 800054c:	bd10      	pop	{r4, pc}
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	40020000 	.word	0x40020000

08000558 <EXTI0_IRQHandler>:

	return HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET;
}

void EXTI0_IRQHandler(void)
{
 8000558:	b508      	push	{r3, lr}
	HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fc24 	bl	8000da8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000560:	bd08      	pop	{r3, pc}
	...

08000564 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
	if (gpio_pin == BUTTON_Pin) {
 8000564:	2801      	cmp	r0, #1
 8000566:	d000      	beq.n	800056a <HAL_GPIO_EXTI_Callback+0x6>
 8000568:	4770      	bx	lr
{
 800056a:	b508      	push	{r3, lr}
		indication_led_button();
 800056c:	f000 f81a 	bl	80005a4 <indication_led_button>
		timeout_start(&user_button.debounce_timeout, BUTTON_DEBOUNCE_TIME_MS);
 8000570:	2132      	movs	r1, #50	; 0x32
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <HAL_GPIO_EXTI_Callback+0x18>)
 8000574:	f000 f931 	bl	80007da <timeout_start>
	}
}
 8000578:	bd08      	pop	{r3, pc}
 800057a:	bf00      	nop
 800057c:	20000028 	.word	0x20000028

08000580 <indication_led_loading>:

#include "led.h"
#include "indication.h"

void indication_led_loading(void)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8000582:	4d07      	ldr	r5, [pc, #28]	; (80005a0 <indication_led_loading+0x20>)
 8000584:	2400      	movs	r4, #0
		led_loading_setup(&led[led_index], led_index);
 8000586:	4621      	mov	r1, r4
 8000588:	4628      	mov	r0, r5
 800058a:	f000 f8d1 	bl	8000730 <led_loading_setup>
		led_function(&led[led_index]);
 800058e:	4628      	mov	r0, r5
 8000590:	f000 f89c 	bl	80006cc <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8000594:	3401      	adds	r4, #1
 8000596:	3520      	adds	r5, #32
 8000598:	2c04      	cmp	r4, #4
 800059a:	d1f4      	bne.n	8000586 <indication_led_loading+0x6>
	}
}
 800059c:	bd38      	pop	{r3, r4, r5, pc}
 800059e:	bf00      	nop
 80005a0:	20000034 	.word	0x20000034

080005a4 <indication_led_button>:

void indication_led_button(void)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80005a6:	4d07      	ldr	r5, [pc, #28]	; (80005c4 <indication_led_button+0x20>)
 80005a8:	2400      	movs	r4, #0
		led_button_setup(&led[led_index], led_index);
 80005aa:	4621      	mov	r1, r4
 80005ac:	4628      	mov	r0, r5
 80005ae:	f000 f8ee 	bl	800078e <led_button_setup>
		led_function(&led[led_index]);
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 f88a 	bl	80006cc <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80005b8:	3401      	adds	r4, #1
 80005ba:	3520      	adds	r5, #32
 80005bc:	2c04      	cmp	r4, #4
 80005be:	d1f4      	bne.n	80005aa <indication_led_button+0x6>
	}
}
 80005c0:	bd38      	pop	{r3, r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	20000034 	.word	0x20000034

080005c8 <led_update>:
	led_update(&led[LED_BOTTOM]);
	led_update(&led[LED_RIGHT]);
}

void led_update(struct led *led_ptr)
{
 80005c8:	b510      	push	{r4, lr}
 80005ca:	4604      	mov	r4, r0
	if (led_ptr->status.on_timeout) {
 80005cc:	8b03      	ldrh	r3, [r0, #24]
 80005ce:	b11b      	cbz	r3, 80005d8 <led_update+0x10>
		if (!--led_ptr->status.on_timeout) {
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	8303      	strh	r3, [r0, #24]
 80005d6:	b133      	cbz	r3, 80005e6 <led_update+0x1e>
				led_ptr->status.off_timeout = (led_ptr->config.off_ms + led_ptr->config.delay_ms);
			}
		}
	}

	if (led_ptr->status.off_timeout) {
 80005d8:	8b63      	ldrh	r3, [r4, #26]
 80005da:	b11b      	cbz	r3, 80005e4 <led_update+0x1c>
		if (!--led_ptr->status.off_timeout) {
 80005dc:	3b01      	subs	r3, #1
 80005de:	b29b      	uxth	r3, r3
 80005e0:	8363      	strh	r3, [r4, #26]
 80005e2:	b1b3      	cbz	r3, 8000612 <led_update+0x4a>
			led_ptr->status.on_timeout = (led_ptr->config.on_ms + led_ptr->config.delay_ms);
			HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_SET);
		}
	}
}
 80005e4:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	8981      	ldrh	r1, [r0, #12]
 80005ea:	6900      	ldr	r0, [r0, #16]
 80005ec:	f000 fbd6 	bl	8000d9c <HAL_GPIO_WritePin>
			if (led_ptr->config.iterations_num) {
 80005f0:	88e2      	ldrh	r2, [r4, #6]
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d0f0      	beq.n	80005d8 <led_update+0x10>
				led_ptr->status.iterations_counter++;
 80005f6:	8ba3      	ldrh	r3, [r4, #28]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	83a3      	strh	r3, [r4, #28]
				if (led_ptr->status.iterations_counter >= led_ptr->config.iterations_num) {
 80005fe:	429a      	cmp	r2, r3
 8000600:	d802      	bhi.n	8000608 <led_update+0x40>
					led_ptr->config.off_ms = ZERO_MS;
 8000602:	2300      	movs	r3, #0
 8000604:	8063      	strh	r3, [r4, #2]
					led_ptr->config.delay_ms = ZERO_MS;
 8000606:	80a3      	strh	r3, [r4, #4]
				led_ptr->status.off_timeout = (led_ptr->config.off_ms + led_ptr->config.delay_ms);
 8000608:	8863      	ldrh	r3, [r4, #2]
 800060a:	88a2      	ldrh	r2, [r4, #4]
 800060c:	4413      	add	r3, r2
 800060e:	8363      	strh	r3, [r4, #26]
 8000610:	e7e2      	b.n	80005d8 <led_update+0x10>
			led_ptr->status.on_timeout = (led_ptr->config.on_ms + led_ptr->config.delay_ms);
 8000612:	8823      	ldrh	r3, [r4, #0]
 8000614:	88a2      	ldrh	r2, [r4, #4]
 8000616:	4413      	add	r3, r2
 8000618:	8323      	strh	r3, [r4, #24]
			HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	89a1      	ldrh	r1, [r4, #12]
 800061e:	6920      	ldr	r0, [r4, #16]
 8000620:	f000 fbbc 	bl	8000d9c <HAL_GPIO_WritePin>
}
 8000624:	e7de      	b.n	80005e4 <led_update+0x1c>
	...

08000628 <Initialize_LED_indication>:
{
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	2400      	movs	r4, #0
 800062e:	9403      	str	r4, [sp, #12]
 8000630:	9404      	str	r4, [sp, #16]
 8000632:	9405      	str	r4, [sp, #20]
 8000634:	9406      	str	r4, [sp, #24]
 8000636:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	9400      	str	r4, [sp, #0]
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <Initialize_LED_indication+0x98>)
 800063c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063e:	f042 0208 	orr.w	r2, r2, #8
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
 8000644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000646:	f002 0208 	and.w	r2, r2, #8
 800064a:	9200      	str	r2, [sp, #0]
 800064c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	9401      	str	r4, [sp, #4]
 8000650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000656:	631a      	str	r2, [r3, #48]	; 0x30
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	9402      	str	r4, [sp, #8]
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	f042 0201 	orr.w	r2, r2, #1
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin, GPIO_PIN_RESET);
 8000676:	4d13      	ldr	r5, [pc, #76]	; (80006c4 <Initialize_LED_indication+0x9c>)
 8000678:	4622      	mov	r2, r4
 800067a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800067e:	4628      	mov	r0, r5
 8000680:	f000 fb8c 	bl	8000d9c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin;
 8000684:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000688:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000692:	a903      	add	r1, sp, #12
 8000694:	4628      	mov	r0, r5
 8000696:	f000 fa7b 	bl	8000b90 <HAL_GPIO_Init>
	led[LED_TOP].hardware.port = (uint32_t) LED_TOP_GPIO_Port;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <Initialize_LED_indication+0xa0>)
 800069c:	611d      	str	r5, [r3, #16]
	led[LED_TOP].hardware.pin = (uint32_t) LED_TOP_Pin;
 800069e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a2:	60da      	str	r2, [r3, #12]
	led[LED_LEFT].hardware.port = (uint32_t) LED_LEFT_GPIO_Port;
 80006a4:	631d      	str	r5, [r3, #48]	; 0x30
	led[LED_LEFT].hardware.pin = (uint32_t) LED_LEFT_Pin;
 80006a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
	led[LED_BOTTOM].hardware.port = (uint32_t) LED_BOTTOM_GPIO_Port;
 80006ac:	651d      	str	r5, [r3, #80]	; 0x50
	led[LED_BOTTOM].hardware.pin = (uint32_t) LED_BOTTOM_Pin;
 80006ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006b2:	64da      	str	r2, [r3, #76]	; 0x4c
	led[LED_RIGHT].hardware.port = (uint32_t) LED_RIGHT_GPIO_Port;
 80006b4:	671d      	str	r5, [r3, #112]	; 0x70
	led[LED_RIGHT].hardware.pin = (uint32_t) LED_RIGHT_Pin;
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	20000034 	.word	0x20000034

080006cc <led_function>:
{
 80006cc:	b510      	push	{r4, lr}
 80006ce:	4604      	mov	r4, r0
	if (led_ptr->hardware.mode == LED_OFF) {
 80006d0:	7d03      	ldrb	r3, [r0, #20]
 80006d2:	b133      	cbz	r3, 80006e2 <led_function+0x16>
	if (led_ptr->hardware.mode == LED_ON) {
 80006d4:	7d23      	ldrb	r3, [r4, #20]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d009      	beq.n	80006ee <led_function+0x22>
	if (led_ptr->hardware.mode == LED_LOADING) {
 80006da:	7d23      	ldrb	r3, [r4, #20]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d00c      	beq.n	80006fa <led_function+0x2e>
}
 80006e0:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	8981      	ldrh	r1, [r0, #12]
 80006e6:	6900      	ldr	r0, [r0, #16]
 80006e8:	f000 fb58 	bl	8000d9c <HAL_GPIO_WritePin>
 80006ec:	e7f2      	b.n	80006d4 <led_function+0x8>
		HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	89a1      	ldrh	r1, [r4, #12]
 80006f2:	6920      	ldr	r0, [r4, #16]
 80006f4:	f000 fb52 	bl	8000d9c <HAL_GPIO_WritePin>
 80006f8:	e7ef      	b.n	80006da <led_function+0xe>
		HAL_GPIO_WritePin((GPIO_TypeDef *) led_ptr->hardware.port, led_ptr->hardware.pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	89a1      	ldrh	r1, [r4, #12]
 80006fe:	6920      	ldr	r0, [r4, #16]
 8000700:	f000 fb4c 	bl	8000d9c <HAL_GPIO_WritePin>
}
 8000704:	e7ec      	b.n	80006e0 <led_function+0x14>
	...

08000708 <leds_update>:
{
 8000708:	b510      	push	{r4, lr}
	led_update(&led[LED_TOP]);
 800070a:	4c08      	ldr	r4, [pc, #32]	; (800072c <leds_update+0x24>)
 800070c:	4620      	mov	r0, r4
 800070e:	f7ff ff5b 	bl	80005c8 <led_update>
	led_update(&led[LED_LEFT]);
 8000712:	f104 0020 	add.w	r0, r4, #32
 8000716:	f7ff ff57 	bl	80005c8 <led_update>
	led_update(&led[LED_BOTTOM]);
 800071a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800071e:	f7ff ff53 	bl	80005c8 <led_update>
	led_update(&led[LED_RIGHT]);
 8000722:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8000726:	f7ff ff4f 	bl	80005c8 <led_update>
}
 800072a:	bd10      	pop	{r4, pc}
 800072c:	20000034 	.word	0x20000034

08000730 <led_loading_setup>:

void led_loading_setup(struct led *led_ptr, int led_index)
{
	led_ptr->hardware.mode = LED_LOADING;
 8000730:	2304      	movs	r3, #4
 8000732:	7503      	strb	r3, [r0, #20]
	led_ptr->config.iterations_num = LED_LOADING_NUM;
 8000734:	f242 7310 	movw	r3, #10000	; 0x2710
 8000738:	80c3      	strh	r3, [r0, #6]
	led_ptr->config.activate = true;
 800073a:	2301      	movs	r3, #1
 800073c:	7203      	strb	r3, [r0, #8]

	switch (led_index) {
 800073e:	2903      	cmp	r1, #3
 8000740:	d809      	bhi.n	8000756 <led_loading_setup+0x26>
 8000742:	e8df f001 	tbb	[pc, r1]
 8000746:	0f02      	.short	0x0f02
 8000748:	1d16      	.short	0x1d16
		case LED_TOP:
			led_ptr->config.on_ms = (LED_SPEED_VERY_FAST * LED_TOP_TIME_ON);
 800074a:	2332      	movs	r3, #50	; 0x32
 800074c:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = (LED_SPEED_VERY_FAST * LED_TOP_TIME_OFF);
 800074e:	2346      	movs	r3, #70	; 0x46
 8000750:	8043      	strh	r3, [r0, #2]
			led_ptr->config.delay_ms = (LED_SPEED_VERY_FAST * (LED_RIGHT_TIME_OFF - LED_TOP_TIME_ON));
 8000752:	2350      	movs	r3, #80	; 0x50
 8000754:	8083      	strh	r3, [r0, #4]
			break;
		default:
			break;
 	}

	led_ptr->status.iterations_counter = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	8383      	strh	r3, [r0, #28]
	led_ptr->status.on_timeout = led_ptr->config.on_ms;
 800075a:	8803      	ldrh	r3, [r0, #0]
 800075c:	8303      	strh	r3, [r0, #24]
	led_ptr->status.off_timeout = led_ptr->config.off_ms;
 800075e:	8843      	ldrh	r3, [r0, #2]
 8000760:	8343      	strh	r3, [r0, #26]
}
 8000762:	4770      	bx	lr
			led_ptr->config.on_ms = (LED_SPEED_VERY_FAST * LED_LEFT_TIME_ON);
 8000764:	2346      	movs	r3, #70	; 0x46
 8000766:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = (LED_SPEED_VERY_FAST * LED_LEFT_TIME_OFF);
 8000768:	235a      	movs	r3, #90	; 0x5a
 800076a:	8043      	strh	r3, [r0, #2]
			led_ptr->config.delay_ms = (LED_SPEED_VERY_FAST * (LED_RIGHT_TIME_OFF - LED_LEFT_TIME_ON));
 800076c:	233c      	movs	r3, #60	; 0x3c
 800076e:	8083      	strh	r3, [r0, #4]
			break;
 8000770:	e7f1      	b.n	8000756 <led_loading_setup+0x26>
			led_ptr->config.on_ms = (LED_SPEED_VERY_FAST * LED_BOTTOM_TIME_ON);
 8000772:	235a      	movs	r3, #90	; 0x5a
 8000774:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = (LED_SPEED_VERY_FAST * LED_BOTTOM_TIME_OFF);
 8000776:	236e      	movs	r3, #110	; 0x6e
 8000778:	8043      	strh	r3, [r0, #2]
			led_ptr->config.delay_ms = (LED_SPEED_VERY_FAST * (LED_RIGHT_TIME_OFF - LED_BOTTOM_TIME_ON));
 800077a:	2328      	movs	r3, #40	; 0x28
 800077c:	8083      	strh	r3, [r0, #4]
			break;
 800077e:	e7ea      	b.n	8000756 <led_loading_setup+0x26>
			led_ptr->config.on_ms = (LED_SPEED_VERY_FAST * LED_RIGHT_TIME_ON);
 8000780:	236e      	movs	r3, #110	; 0x6e
 8000782:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = (LED_SPEED_VERY_FAST * LED_RIGHT_TIME_OFF);
 8000784:	2382      	movs	r3, #130	; 0x82
 8000786:	8043      	strh	r3, [r0, #2]
			led_ptr->config.delay_ms = (LED_SPEED_VERY_FAST * (LED_RIGHT_TIME_OFF - LED_RIGHT_TIME_ON));
 8000788:	2314      	movs	r3, #20
 800078a:	8083      	strh	r3, [r0, #4]
			break;
 800078c:	e7e3      	b.n	8000756 <led_loading_setup+0x26>

0800078e <led_button_setup>:

void led_button_setup(struct led *led_ptr, int led_index)
{
	switch (led_index) {
 800078e:	2903      	cmp	r1, #3
 8000790:	d80d      	bhi.n	80007ae <led_button_setup+0x20>
 8000792:	e8df f001 	tbb	[pc, r1]
 8000796:	1302      	.short	0x1302
 8000798:	1d18      	.short	0x1d18
		case LED_TOP:
			led_ptr->hardware.mode = LED_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	7503      	strb	r3, [r0, #20]
			led_ptr->config.iterations_num = LED_BUTTON_NUM;
 800079e:	80c3      	strh	r3, [r0, #6]
			led_ptr->config.activate = true;
 80007a0:	7203      	strb	r3, [r0, #8]
			led_ptr->config.on_ms = (LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 80007a2:	2396      	movs	r3, #150	; 0x96
 80007a4:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = (LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 80007a6:	23d2      	movs	r3, #210	; 0xd2
 80007a8:	8043      	strh	r3, [r0, #2]
			led_ptr->config.delay_ms = ZERO_MS;
 80007aa:	2300      	movs	r3, #0
 80007ac:	8083      	strh	r3, [r0, #4]
			break;
		default:
			break;
 	}

	led_ptr->status.iterations_counter = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	8383      	strh	r3, [r0, #28]
	led_ptr->status.on_timeout = led_ptr->config.on_ms;
 80007b2:	8803      	ldrh	r3, [r0, #0]
 80007b4:	8303      	strh	r3, [r0, #24]
	led_ptr->status.off_timeout = led_ptr->config.off_ms;
 80007b6:	8843      	ldrh	r3, [r0, #2]
 80007b8:	8343      	strh	r3, [r0, #26]
}
 80007ba:	4770      	bx	lr
			led_ptr->hardware.mode = LED_OFF;
 80007bc:	2300      	movs	r3, #0
 80007be:	7503      	strb	r3, [r0, #20]
			led_ptr->config.on_ms = ZERO_MS;
 80007c0:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = ZERO_MS;
 80007c2:	8043      	strh	r3, [r0, #2]
			break;
 80007c4:	e7f3      	b.n	80007ae <led_button_setup+0x20>
			led_ptr->hardware.mode = LED_OFF;
 80007c6:	2300      	movs	r3, #0
 80007c8:	7503      	strb	r3, [r0, #20]
			led_ptr->config.on_ms = ZERO_MS;
 80007ca:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = ZERO_MS;
 80007cc:	8043      	strh	r3, [r0, #2]
			break;
 80007ce:	e7ee      	b.n	80007ae <led_button_setup+0x20>
			led_ptr->hardware.mode = LED_OFF;
 80007d0:	2300      	movs	r3, #0
 80007d2:	7503      	strb	r3, [r0, #20]
			led_ptr->config.on_ms = ZERO_MS;
 80007d4:	8003      	strh	r3, [r0, #0]
			led_ptr->config.off_ms = ZERO_MS;
 80007d6:	8043      	strh	r3, [r0, #2]
			break;
 80007d8:	e7e9      	b.n	80007ae <led_button_setup+0x20>

080007da <timeout_start>:
#include "led.h"

TIM_HandleTypeDef htim1;

void timeout_start(struct timeout *timeout, uint32_t timeout_ms)
{
 80007da:	b538      	push	{r3, r4, r5, lr}
 80007dc:	4604      	mov	r4, r0
 80007de:	460d      	mov	r5, r1
	timeout->timestamp_ms = HAL_GetTick();
 80007e0:	f000 f966 	bl	8000ab0 <HAL_GetTick>
 80007e4:	60a0      	str	r0, [r4, #8]
	timeout->timeout_ms = timeout_ms;
 80007e6:	6065      	str	r5, [r4, #4]
	timeout->start_flag = true;
 80007e8:	2301      	movs	r3, #1
 80007ea:	7023      	strb	r3, [r4, #0]
}
 80007ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080007f0 <MX_TIM1_Init>:

	return false;
}

void MX_TIM1_Init(void)
{
 80007f0:	b500      	push	{lr}
 80007f2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f4:	2300      	movs	r3, #0
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	9303      	str	r3, [sp, #12]
 80007fa:	9304      	str	r3, [sp, #16]
 80007fc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	9301      	str	r3, [sp, #4]

  htim1.Instance = TIM1;
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <MX_TIM1_Init+0x68>)
 8000804:	4a15      	ldr	r2, [pc, #84]	; (800085c <MX_TIM1_Init+0x6c>)
 8000806:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 32000;
 8000808:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800080c:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 50;
 8000810:	2232      	movs	r2, #50	; 0x32
 8000812:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000816:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800081a:	f000 fe6f 	bl	80014fc <HAL_TIM_Base_Init>
 800081e:	b990      	cbnz	r0, 8000846 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000826:	a902      	add	r1, sp, #8
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_TIM1_Init+0x68>)
 800082a:	f000 fea0 	bl	800156e <HAL_TIM_ConfigClockSource>
 800082e:	b968      	cbnz	r0, 800084c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	4669      	mov	r1, sp
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM1_Init+0x68>)
 800083a:	f000 ff4d 	bl	80016d8 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	b940      	cbnz	r0, 8000852 <MX_TIM1_Init+0x62>
  {
    Error_Handler();
  }
}
 8000840:	b007      	add	sp, #28
 8000842:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000846:	f000 f8ad 	bl	80009a4 <Error_Handler>
 800084a:	e7e9      	b.n	8000820 <MX_TIM1_Init+0x30>
    Error_Handler();
 800084c:	f000 f8aa 	bl	80009a4 <Error_Handler>
 8000850:	e7ee      	b.n	8000830 <MX_TIM1_Init+0x40>
    Error_Handler();
 8000852:	f000 f8a7 	bl	80009a4 <Error_Handler>
}
 8000856:	e7f3      	b.n	8000840 <MX_TIM1_Init+0x50>
 8000858:	200000b4 	.word	0x200000b4
 800085c:	40010000 	.word	0x40010000

08000860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
  if(tim_baseHandle->Instance==TIM1)
 8000860:	6802      	ldr	r2, [r0, #0]
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <HAL_TIM_Base_MspInit+0x6c>)
 8000864:	429a      	cmp	r2, r3
 8000866:	d000      	beq.n	800086a <HAL_TIM_Base_MspInit+0xa>
 8000868:	4770      	bx	lr
{
 800086a:	b510      	push	{r4, lr}
 800086c:	b082      	sub	sp, #8
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086e:	2400      	movs	r4, #0
 8000870:	9401      	str	r4, [sp, #4]
 8000872:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9b01      	ldr	r3, [sp, #4]

    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000888:	4622      	mov	r2, r4
 800088a:	4621      	mov	r1, r4
 800088c:	2018      	movs	r0, #24
 800088e:	f000 f927 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000892:	2018      	movs	r0, #24
 8000894:	f000 f95a 	bl	8000b4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000898:	4622      	mov	r2, r4
 800089a:	4621      	mov	r1, r4
 800089c:	2019      	movs	r0, #25
 800089e:	f000 f91f 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008a2:	2019      	movs	r0, #25
 80008a4:	f000 f952 	bl	8000b4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80008a8:	4622      	mov	r2, r4
 80008aa:	4621      	mov	r1, r4
 80008ac:	201a      	movs	r0, #26
 80008ae:	f000 f917 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80008b2:	201a      	movs	r0, #26
 80008b4:	f000 f94a 	bl	8000b4c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80008b8:	4622      	mov	r2, r4
 80008ba:	4621      	mov	r1, r4
 80008bc:	201b      	movs	r0, #27
 80008be:	f000 f90f 	bl	8000ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008c2:	201b      	movs	r0, #27
 80008c4:	f000 f942 	bl	8000b4c <HAL_NVIC_EnableIRQ>
  }
}
 80008c8:	b002      	add	sp, #8
 80008ca:	bd10      	pop	{r4, pc}
 80008cc:	40010000 	.word	0x40010000

080008d0 <SystemClock_Config>:
    SystemClock_Config();
    MX_TIM1_Init();
}

void SystemClock_Config(void)
{
 80008d0:	b500      	push	{lr}
 80008d2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d4:	2230      	movs	r2, #48	; 0x30
 80008d6:	2100      	movs	r1, #0
 80008d8:	a808      	add	r0, sp, #32
 80008da:	f000 ff8f 	bl	80017fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008de:	2300      	movs	r3, #0
 80008e0:	9303      	str	r3, [sp, #12]
 80008e2:	9304      	str	r3, [sp, #16]
 80008e4:	9305      	str	r3, [sp, #20]
 80008e6:	9306      	str	r3, [sp, #24]
 80008e8:	9307      	str	r3, [sp, #28]

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <SystemClock_Config+0xa8>)
 80008ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80008f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80008f4:	6411      	str	r1, [r2, #64]	; 0x40
 80008f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	9302      	str	r3, [sp, #8]
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <SystemClock_Config+0xac>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	9302      	str	r3, [sp, #8]
 8000914:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000916:	2301      	movs	r3, #1
 8000918:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000924:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000928:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800092a:	2219      	movs	r2, #25
 800092c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800092e:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000932:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000936:	2304      	movs	r3, #4
 8000938:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	a808      	add	r0, sp, #32
 800093c:	f000 fa42 	bl	8000dc4 <HAL_RCC_OscConfig>
 8000940:	b9a8      	cbnz	r0, 800096e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000952:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095a:	2105      	movs	r1, #5
 800095c:	a803      	add	r0, sp, #12
 800095e:	f000 fc85 	bl	800126c <HAL_RCC_ClockConfig>
 8000962:	b930      	cbnz	r0, 8000972 <SystemClock_Config+0xa2>
  {
    Error_Handler();
  }

  HAL_RCC_EnableCSS();
 8000964:	f000 fc2a 	bl	80011bc <HAL_RCC_EnableCSS>
}
 8000968:	b015      	add	sp, #84	; 0x54
 800096a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096e:	b672      	cpsid	i

void Error_Handler(void)
{
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <SystemClock_Config+0xa0>
 8000972:	b672      	cpsid	i
 8000974:	e7fe      	b.n	8000974 <SystemClock_Config+0xa4>
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <Initialize_MCU>:
{
 8000980:	b508      	push	{r3, lr}
	HAL_Init();
 8000982:	f000 f86f 	bl	8000a64 <HAL_Init>
    SystemClock_Config();
 8000986:	f7ff ffa3 	bl	80008d0 <SystemClock_Config>
    MX_TIM1_Init();
 800098a:	f7ff ff31 	bl	80007f0 <MX_TIM1_Init>
}
 800098e:	bd08      	pop	{r3, pc}

08000990 <main>:
{
 8000990:	b508      	push	{r3, lr}
	Initialize_MCU();
 8000992:	f7ff fff5 	bl	8000980 <Initialize_MCU>
	Initialize_LED_indication();
 8000996:	f7ff fe47 	bl	8000628 <Initialize_LED_indication>
	indication_led_loading();
 800099a:	f7ff fdf1 	bl	8000580 <indication_led_loading>
	Initialize_Button();
 800099e:	f7ff fda5 	bl	80004ec <Initialize_Button>
	for(;;) {
 80009a2:	e7fe      	b.n	80009a2 <main+0x12>

080009a4 <Error_Handler>:
 80009a4:	b672      	cpsid	i
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <Error_Handler+0x2>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2100      	movs	r1, #0
 80009ac:	9100      	str	r1, [sp, #0]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x34>)
 80009b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009b6:	645a      	str	r2, [r3, #68]	; 0x44
 80009b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009be:	9200      	str	r2, [sp, #0]
 80009c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	9101      	str	r1, [sp, #4]
 80009c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ca:	641a      	str	r2, [r3, #64]	; 0x40
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	b002      	add	sp, #8
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b508      	push	{r3, lr}
	HAL_RCC_NMI_IRQHandler();
 80009e2:	f000 fcf7 	bl	80013d4 <HAL_RCC_NMI_IRQHandler>

  while (1)
 80009e6:	e7fe      	b.n	80009e6 <NMI_Handler+0x6>

080009e8 <HardFault_Handler>:
  }
}

void HardFault_Handler(void)
{
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <HardFault_Handler>

080009ea <MemManage_Handler>:
  }
}

void MemManage_Handler(void)
{
  while (1)
 80009ea:	e7fe      	b.n	80009ea <MemManage_Handler>

080009ec <BusFault_Handler>:
  }
}

void BusFault_Handler(void)
{
  while (1)
 80009ec:	e7fe      	b.n	80009ec <BusFault_Handler>

080009ee <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void)
{
  while (1)
 80009ee:	e7fe      	b.n	80009ee <UsageFault_Handler>

080009f0 <SVC_Handler>:
  }
}

void SVC_Handler(void)
{
}
 80009f0:	4770      	bx	lr

080009f2 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
}
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

void PendSV_Handler(void)
{
}
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80009f6:	b508      	push	{r3, lr}
	HAL_IncTick();
 80009f8:	f000 f84e 	bl	8000a98 <HAL_IncTick>
	leds_update();
 80009fc:	f7ff fe84 	bl	8000708 <leds_update>
}
 8000a00:	bd08      	pop	{r3, pc}
	...

08000a04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <SystemInit+0x10>)
 8000a06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_InitTick+0x40>)
 8000a1e:	7818      	ldrb	r0, [r3, #0]
 8000a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a24:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <HAL_InitTick+0x44>)
 8000a2a:	6810      	ldr	r0, [r2, #0]
 8000a2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a30:	f000 f89a 	bl	8000b68 <HAL_SYSTICK_Config>
 8000a34:	b968      	cbnz	r0, 8000a52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	2c0f      	cmp	r4, #15
 8000a38:	d901      	bls.n	8000a3e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	e00a      	b.n	8000a54 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4621      	mov	r1, r4
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
 8000a46:	f000 f84b 	bl	8000ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_InitTick+0x48>)
 8000a4c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000a4e:	2000      	movs	r0, #0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
}
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	bf00      	nop
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_Init>:
{
 8000a64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_Init+0x30>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f81b 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ffc6 	bl	8000a18 <HAL_InitTick>
  HAL_MspInit();
 8000a8c:	f7ff ff8c 	bl	80009a8 <HAL_MspInit>
}
 8000a90:	2000      	movs	r0, #0
 8000a92:	bd08      	pop	{r3, pc}
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <HAL_IncTick+0x10>)
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_IncTick+0x14>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000fc 	.word	0x200000fc
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ab0:	4b01      	ldr	r3, [pc, #4]	; (8000ab8 <HAL_GetTick+0x8>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000fc 	.word	0x200000fc

08000abc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000abe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	0203      	lsls	r3, r0, #8
 8000ac2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000aca:	0412      	lsls	r2, r2, #16
 8000acc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ad8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_NVIC_SetPriority+0x64>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aea:	f1c3 0c07 	rsb	ip, r3, #7
 8000aee:	f1bc 0f04 	cmp.w	ip, #4
 8000af2:	bf28      	it	cs
 8000af4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af8:	f103 0e04 	add.w	lr, r3, #4
 8000afc:	f1be 0f06 	cmp.w	lr, #6
 8000b00:	bf8c      	ite	hi
 8000b02:	3b03      	subhi	r3, #3
 8000b04:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b06:	f04f 3eff 	mov.w	lr, #4294967295
 8000b0a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000b0e:	ea21 010c 	bic.w	r1, r1, ip
 8000b12:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	fa0e f303 	lsl.w	r3, lr, r3
 8000b18:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	db09      	blt.n	8000b36 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	0109      	lsls	r1, r1, #4
 8000b24:	b2c9      	uxtb	r1, r1
 8000b26:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b2a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b2e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b32:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	f000 000f 	and.w	r0, r0, #15
 8000b3a:	0109      	lsls	r1, r1, #4
 8000b3c:	b2c9      	uxtb	r1, r1
 8000b3e:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <HAL_NVIC_SetPriority+0x68>)
 8000b40:	5419      	strb	r1, [r3, r0]
 8000b42:	e7f6      	b.n	8000b32 <HAL_NVIC_SetPriority+0x52>
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	e000ed14 	.word	0xe000ed14

08000b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	db08      	blt.n	8000b62 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b50:	0942      	lsrs	r2, r0, #5
 8000b52:	f000 001f 	and.w	r0, r0, #31
 8000b56:	2301      	movs	r3, #1
 8000b58:	fa03 f000 	lsl.w	r0, r3, r0
 8000b5c:	4b01      	ldr	r3, [pc, #4]	; (8000b64 <HAL_NVIC_EnableIRQ+0x18>)
 8000b5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	3801      	subs	r0, #1
 8000b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6e:	d20b      	bcs.n	8000b88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000b74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <HAL_SYSTICK_Config+0x24>)
 8000b78:	21f0      	movs	r1, #240	; 0xf0
 8000b7a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b7e:	2000      	movs	r0, #0
 8000b80:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b82:	2207      	movs	r2, #7
 8000b84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b94:	b083      	sub	sp, #12
 8000b96:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b98:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4d7b      	ldr	r5, [pc, #492]	; (8000d88 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9c:	4c7b      	ldr	r4, [pc, #492]	; (8000d8c <HAL_GPIO_Init+0x1fc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8000d94 <HAL_GPIO_Init+0x204>
 8000ba2:	e04d      	b.n	8000c40 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ba4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba6:	f04f 0903 	mov.w	r9, #3
 8000baa:	fa09 f902 	lsl.w	r9, r9, r2
 8000bae:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb2:	68cf      	ldr	r7, [r1, #12]
 8000bb4:	4097      	lsls	r7, r2
 8000bb6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000bba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bbc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbe:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc2:	684f      	ldr	r7, [r1, #4]
 8000bc4:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8000bc8:	409f      	lsls	r7, r3
 8000bca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bce:	6047      	str	r7, [r0, #4]
 8000bd0:	e046      	b.n	8000c60 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd2:	f04f 0e00 	mov.w	lr, #0
 8000bd6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000bda:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bde:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8000be2:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000be4:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000be8:	684e      	ldr	r6, [r1, #4]
 8000bea:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bee:	bf0c      	ite	eq
 8000bf0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8000bf4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8000bf8:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8000bfa:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bfc:	684e      	ldr	r6, [r1, #4]
 8000bfe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000c02:	bf0c      	ite	eq
 8000c04:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8000c08:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8000c0c:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8000c0e:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c10:	684e      	ldr	r6, [r1, #4]
 8000c12:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c16:	bf0c      	ite	eq
 8000c18:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8000c1c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8000c20:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c22:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c24:	684e      	ldr	r6, [r1, #4]
 8000c26:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c2a:	bf0c      	ite	eq
 8000c2c:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8000c30:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8000c34:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c36:	3301      	adds	r3, #1
 8000c38:	3202      	adds	r2, #2
 8000c3a:	2b10      	cmp	r3, #16
 8000c3c:	f000 80a1 	beq.w	8000d82 <HAL_GPIO_Init+0x1f2>
    ioposition = 0x01U << position;
 8000c40:	f04f 0e01 	mov.w	lr, #1
 8000c44:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c48:	680f      	ldr	r7, [r1, #0]
 8000c4a:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8000c4e:	ea3e 0607 	bics.w	r6, lr, r7
 8000c52:	d1f0      	bne.n	8000c36 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c54:	684f      	ldr	r7, [r1, #4]
 8000c56:	f007 0703 	and.w	r7, r7, #3
 8000c5a:	3f01      	subs	r7, #1
 8000c5c:	2f01      	cmp	r7, #1
 8000c5e:	d9a1      	bls.n	8000ba4 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	684f      	ldr	r7, [r1, #4]
 8000c62:	f007 0703 	and.w	r7, r7, #3
 8000c66:	2f03      	cmp	r7, #3
 8000c68:	d027      	beq.n	8000cba <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8000c6a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6c:	f04f 0e03 	mov.w	lr, #3
 8000c70:	fa0e fe02 	lsl.w	lr, lr, r2
 8000c74:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	688f      	ldr	r7, [r1, #8]
 8000c7a:	4097      	lsls	r7, r2
 8000c7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000c80:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	684f      	ldr	r7, [r1, #4]
 8000c84:	f007 0703 	and.w	r7, r7, #3
 8000c88:	2f02      	cmp	r7, #2
 8000c8a:	d116      	bne.n	8000cba <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000c90:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000c94:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c98:	f003 0907 	and.w	r9, r3, #7
 8000c9c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000ca0:	f04f 0a0f 	mov.w	sl, #15
 8000ca4:	fa0a fa09 	lsl.w	sl, sl, r9
 8000ca8:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cac:	690f      	ldr	r7, [r1, #16]
 8000cae:	fa07 f709 	lsl.w	r7, r7, r9
 8000cb2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8000cb6:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8000cba:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cbc:	f04f 0e03 	mov.w	lr, #3
 8000cc0:	fa0e fe02 	lsl.w	lr, lr, r2
 8000cc4:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc8:	684f      	ldr	r7, [r1, #4]
 8000cca:	f007 0703 	and.w	r7, r7, #3
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8000cd4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd6:	684f      	ldr	r7, [r1, #4]
 8000cd8:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8000cdc:	d0ab      	beq.n	8000c36 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2700      	movs	r7, #0
 8000ce0:	9701      	str	r7, [sp, #4]
 8000ce2:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8000ce4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ce8:	646f      	str	r7, [r5, #68]	; 0x44
 8000cea:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8000cec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000cf0:	9701      	str	r7, [sp, #4]
 8000cf2:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf4:	f023 0703 	bic.w	r7, r3, #3
 8000cf8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cfc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000d00:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d04:	f003 0e03 	and.w	lr, r3, #3
 8000d08:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8000d0c:	f04f 0e0f 	mov.w	lr, #15
 8000d10:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d14:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d18:	4e1d      	ldr	r6, [pc, #116]	; (8000d90 <HAL_GPIO_Init+0x200>)
 8000d1a:	42b0      	cmp	r0, r6
 8000d1c:	f43f af59 	beq.w	8000bd2 <HAL_GPIO_Init+0x42>
 8000d20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d24:	42b0      	cmp	r0, r6
 8000d26:	d01a      	beq.n	8000d5e <HAL_GPIO_Init+0x1ce>
 8000d28:	4540      	cmp	r0, r8
 8000d2a:	d01b      	beq.n	8000d64 <HAL_GPIO_Init+0x1d4>
 8000d2c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000d30:	42b0      	cmp	r0, r6
 8000d32:	d01a      	beq.n	8000d6a <HAL_GPIO_Init+0x1da>
 8000d34:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d38:	42b0      	cmp	r0, r6
 8000d3a:	d019      	beq.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d40:	42b0      	cmp	r0, r6
 8000d42:	d018      	beq.n	8000d76 <HAL_GPIO_Init+0x1e6>
 8000d44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d48:	42b0      	cmp	r0, r6
 8000d4a:	d017      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d4c:	f8df e048 	ldr.w	lr, [pc, #72]	; 8000d98 <HAL_GPIO_Init+0x208>
 8000d50:	4570      	cmp	r0, lr
 8000d52:	bf0c      	ite	eq
 8000d54:	f04f 0e07 	moveq.w	lr, #7
 8000d58:	f04f 0e08 	movne.w	lr, #8
 8000d5c:	e73b      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d5e:	f04f 0e01 	mov.w	lr, #1
 8000d62:	e738      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d64:	f04f 0e02 	mov.w	lr, #2
 8000d68:	e735      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d6a:	f04f 0e03 	mov.w	lr, #3
 8000d6e:	e732      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d70:	f04f 0e04 	mov.w	lr, #4
 8000d74:	e72f      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d76:	f04f 0e05 	mov.w	lr, #5
 8000d7a:	e72c      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
 8000d7c:	f04f 0e06 	mov.w	lr, #6
 8000d80:	e729      	b.n	8000bd6 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8000d82:	b003      	add	sp, #12
 8000d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40013c00 	.word	0x40013c00
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40021c00 	.word	0x40021c00

08000d9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d9c:	b10a      	cbz	r2, 8000da2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9e:	6181      	str	r1, [r0, #24]
 8000da0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000da2:	0409      	lsls	r1, r1, #16
 8000da4:	6181      	str	r1, [r0, #24]
  }
}
 8000da6:	4770      	bx	lr

08000da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000da8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4203      	tst	r3, r0
 8000db0:	d100      	bne.n	8000db4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000db2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000db6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000db8:	f7ff fbd4 	bl	8000564 <HAL_GPIO_EXTI_Callback>
}
 8000dbc:	e7f9      	b.n	8000db2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000dbe:	bf00      	nop
 8000dc0:	40013c00 	.word	0x40013c00

08000dc4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	f000 81e1 	beq.w	800118c <HAL_RCC_OscConfig+0x3c8>
{
 8000dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	f013 0f01 	tst.w	r3, #1
 8000dd8:	d03b      	beq.n	8000e52 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dda:	4b9f      	ldr	r3, [pc, #636]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d02c      	beq.n	8000e40 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	4b9c      	ldr	r3, [pc, #624]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d021      	beq.n	8000e36 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	6863      	ldr	r3, [r4, #4]
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df8:	d04f      	beq.n	8000e9a <HAL_RCC_OscConfig+0xd6>
 8000dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfe:	d052      	beq.n	8000ea6 <HAL_RCC_OscConfig+0xe2>
 8000e00:	4b95      	ldr	r3, [pc, #596]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d050      	beq.n	8000eba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fe4a 	bl	8000ab0 <HAL_GetTick>
 8000e1c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	4e8e      	ldr	r6, [pc, #568]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e20:	6833      	ldr	r3, [r6, #0]
 8000e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e26:	d114      	bne.n	8000e52 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fe42 	bl	8000ab0 <HAL_GetTick>
 8000e2c:	1b40      	subs	r0, r0, r5
 8000e2e:	2864      	cmp	r0, #100	; 0x64
 8000e30:	d9f6      	bls.n	8000e20 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8000e32:	2003      	movs	r0, #3
 8000e34:	e1b1      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e36:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e3e:	d0d8      	beq.n	8000df2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	4b85      	ldr	r3, [pc, #532]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e48:	d003      	beq.n	8000e52 <HAL_RCC_OscConfig+0x8e>
 8000e4a:	6863      	ldr	r3, [r4, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 819f 	beq.w	8001190 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	f013 0f02 	tst.w	r3, #2
 8000e58:	d054      	beq.n	8000f04 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f013 0f0c 	tst.w	r3, #12
 8000e62:	d03e      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e64:	4b7c      	ldr	r3, [pc, #496]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e6c:	2b08      	cmp	r3, #8
 8000e6e:	d033      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e70:	68e3      	ldr	r3, [r4, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d068      	beq.n	8000f48 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e76:	4b79      	ldr	r3, [pc, #484]	; (800105c <HAL_RCC_OscConfig+0x298>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fe18 	bl	8000ab0 <HAL_GetTick>
 8000e80:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e82:	4e75      	ldr	r6, [pc, #468]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	f013 0f02 	tst.w	r3, #2
 8000e8a:	d154      	bne.n	8000f36 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fe10 	bl	8000ab0 <HAL_GetTick>
 8000e90:	1b40      	subs	r0, r0, r5
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9f6      	bls.n	8000e84 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e17f      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	4a6f      	ldr	r2, [pc, #444]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000e9c:	6813      	ldr	r3, [r2, #0]
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e7b5      	b.n	8000e12 <HAL_RCC_OscConfig+0x4e>
 8000ea6:	4b6c      	ldr	r3, [pc, #432]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e7ab      	b.n	8000e12 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000eba:	f7ff fdf9 	bl	8000ab0 <HAL_GetTick>
 8000ebe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec0:	4e65      	ldr	r6, [pc, #404]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000ec2:	6833      	ldr	r3, [r6, #0]
 8000ec4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ec8:	d0c3      	beq.n	8000e52 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fdf1 	bl	8000ab0 <HAL_GetTick>
 8000ece:	1b40      	subs	r0, r0, r5
 8000ed0:	2864      	cmp	r0, #100	; 0x64
 8000ed2:	d9f6      	bls.n	8000ec2 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	e160      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ed8:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ee0:	d1c6      	bne.n	8000e70 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f013 0f02 	tst.w	r3, #2
 8000eea:	d003      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x130>
 8000eec:	68e3      	ldr	r3, [r4, #12]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 8150 	bne.w	8001194 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	6921      	ldr	r1, [r4, #16]
 8000efa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000efe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f02:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	f013 0f08 	tst.w	r3, #8
 8000f0a:	d042      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f0c:	6963      	ldr	r3, [r4, #20]
 8000f0e:	b36b      	cbz	r3, 8000f6c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f10:	4b52      	ldr	r3, [pc, #328]	; (800105c <HAL_RCC_OscConfig+0x298>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f18:	f7ff fdca 	bl	8000ab0 <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4e4e      	ldr	r6, [pc, #312]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000f20:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000f22:	f013 0f02 	tst.w	r3, #2
 8000f26:	d134      	bne.n	8000f92 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fdc2 	bl	8000ab0 <HAL_GetTick>
 8000f2c:	1b40      	subs	r0, r0, r5
 8000f2e:	2802      	cmp	r0, #2
 8000f30:	d9f6      	bls.n	8000f20 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
 8000f34:	e131      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000f38:	6813      	ldr	r3, [r2, #0]
 8000f3a:	6921      	ldr	r1, [r4, #16]
 8000f3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e7dd      	b.n	8000f04 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <HAL_RCC_OscConfig+0x298>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fdaf 	bl	8000ab0 <HAL_GetTick>
 8000f52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f54:	4e40      	ldr	r6, [pc, #256]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	f013 0f02 	tst.w	r3, #2
 8000f5c:	d0d2      	beq.n	8000f04 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fda7 	bl	8000ab0 <HAL_GetTick>
 8000f62:	1b40      	subs	r0, r0, r5
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9f6      	bls.n	8000f56 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8000f68:	2003      	movs	r0, #3
 8000f6a:	e116      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <HAL_RCC_OscConfig+0x298>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fd9c 	bl	8000ab0 <HAL_GetTick>
 8000f78:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7a:	4e37      	ldr	r6, [pc, #220]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000f7c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000f7e:	f013 0f02 	tst.w	r3, #2
 8000f82:	d006      	beq.n	8000f92 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f84:	f7ff fd94 	bl	8000ab0 <HAL_GetTick>
 8000f88:	1b40      	subs	r0, r0, r5
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9f6      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8000f8e:	2003      	movs	r0, #3
 8000f90:	e103      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	f013 0f04 	tst.w	r3, #4
 8000f98:	d076      	beq.n	8001088 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fa2:	d133      	bne.n	800100c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fbc:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HAL_RCC_OscConfig+0x29c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fc6:	d023      	beq.n	8001010 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc8:	68a3      	ldr	r3, [r4, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d034      	beq.n	8001038 <HAL_RCC_OscConfig+0x274>
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d038      	beq.n	8001044 <HAL_RCC_OscConfig+0x280>
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8000fd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	671a      	str	r2, [r3, #112]	; 0x70
 8000fdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fde:	f022 0204 	bic.w	r2, r2, #4
 8000fe2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fe4:	68a3      	ldr	r3, [r4, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03c      	beq.n	8001064 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fea:	f7ff fd61 	bl	8000ab0 <HAL_GetTick>
 8000fee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	4f19      	ldr	r7, [pc, #100]	; (8001058 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff8:	f013 0f02 	tst.w	r3, #2
 8000ffc:	d143      	bne.n	8001086 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fd57 	bl	8000ab0 <HAL_GetTick>
 8001002:	1b80      	subs	r0, r0, r6
 8001004:	4540      	cmp	r0, r8
 8001006:	d9f6      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8001008:	2003      	movs	r0, #3
 800100a:	e0c6      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 800100c:	2500      	movs	r5, #0
 800100e:	e7d6      	b.n	8000fbe <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <HAL_RCC_OscConfig+0x29c>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800101a:	f7ff fd49 	bl	8000ab0 <HAL_GetTick>
 800101e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	4f0f      	ldr	r7, [pc, #60]	; (8001060 <HAL_RCC_OscConfig+0x29c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001028:	d1ce      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fd41 	bl	8000ab0 <HAL_GetTick>
 800102e:	1b80      	subs	r0, r0, r6
 8001030:	2802      	cmp	r0, #2
 8001032:	d9f6      	bls.n	8001022 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e0b0      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 800103a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6713      	str	r3, [r2, #112]	; 0x70
 8001042:	e7cf      	b.n	8000fe4 <HAL_RCC_OscConfig+0x220>
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_RCC_OscConfig+0x294>)
 8001046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	671a      	str	r2, [r3, #112]	; 0x70
 800104e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001050:	f042 0201 	orr.w	r2, r2, #1
 8001054:	671a      	str	r2, [r3, #112]	; 0x70
 8001056:	e7c5      	b.n	8000fe4 <HAL_RCC_OscConfig+0x220>
 8001058:	40023800 	.word	0x40023800
 800105c:	42470000 	.word	0x42470000
 8001060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff fd24 	bl	8000ab0 <HAL_GetTick>
 8001068:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106a:	4f52      	ldr	r7, [pc, #328]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001072:	f013 0f02 	tst.w	r3, #2
 8001076:	d006      	beq.n	8001086 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001078:	f7ff fd1a 	bl	8000ab0 <HAL_GetTick>
 800107c:	1b80      	subs	r0, r0, r6
 800107e:	4540      	cmp	r0, r8
 8001080:	d9f6      	bls.n	8001070 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
 8001084:	e089      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001086:	b9ed      	cbnz	r5, 80010c4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001088:	69a3      	ldr	r3, [r4, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8084 	beq.w	8001198 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001090:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 8001092:	6892      	ldr	r2, [r2, #8]
 8001094:	f002 020c 	and.w	r2, r2, #12
 8001098:	2a08      	cmp	r2, #8
 800109a:	d051      	beq.n	8001140 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800109c:	2b02      	cmp	r3, #2
 800109e:	d017      	beq.n	80010d0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <HAL_RCC_OscConfig+0x3f4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fd03 	bl	8000ab0 <HAL_GetTick>
 80010aa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ac:	4d41      	ldr	r5, [pc, #260]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010b4:	d042      	beq.n	800113c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fcfb 	bl	8000ab0 <HAL_GetTick>
 80010ba:	1b00      	subs	r0, r0, r4
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f6      	bls.n	80010ae <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e06a      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c4:	4a3b      	ldr	r2, [pc, #236]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 80010c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	e7db      	b.n	8001088 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <HAL_RCC_OscConfig+0x3f4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80010d6:	f7ff fceb 	bl	8000ab0 <HAL_GetTick>
 80010da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010dc:	4e35      	ldr	r6, [pc, #212]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 80010de:	6833      	ldr	r3, [r6, #0]
 80010e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e4:	d006      	beq.n	80010f4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fce3 	bl	8000ab0 <HAL_GetTick>
 80010ea:	1b40      	subs	r0, r0, r5
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f6      	bls.n	80010de <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80010f0:	2003      	movs	r0, #3
 80010f2:	e052      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010f4:	69e3      	ldr	r3, [r4, #28]
 80010f6:	6a22      	ldr	r2, [r4, #32]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001106:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001108:	0852      	lsrs	r2, r2, #1
 800110a:	3a01      	subs	r2, #1
 800110c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 8001112:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_RCC_OscConfig+0x3f4>)
 8001116:	2201      	movs	r2, #1
 8001118:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800111a:	f7ff fcc9 	bl	8000ab0 <HAL_GetTick>
 800111e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001120:	4d24      	ldr	r5, [pc, #144]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fcc1 	bl	8000ab0 <HAL_GetTick>
 800112e:	1b00      	subs	r0, r0, r4
 8001130:	2802      	cmp	r0, #2
 8001132:	d9f6      	bls.n	8001122 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001134:	2003      	movs	r0, #3
 8001136:	e030      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001138:	2000      	movs	r0, #0
 800113a:	e02e      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
 800113c:	2000      	movs	r0, #0
 800113e:	e02c      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001140:	2b01      	cmp	r3, #1
 8001142:	d02d      	beq.n	80011a0 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x3f0>)
 8001146:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001148:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800114c:	69e2      	ldr	r2, [r4, #28]
 800114e:	4291      	cmp	r1, r2
 8001150:	d128      	bne.n	80011a4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001156:	6a21      	ldr	r1, [r4, #32]
 8001158:	428a      	cmp	r2, r1
 800115a:	d125      	bne.n	80011a8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800115c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800115e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001162:	401a      	ands	r2, r3
 8001164:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001168:	d120      	bne.n	80011ac <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800116a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800116e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001170:	0852      	lsrs	r2, r2, #1
 8001172:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001174:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001178:	d11a      	bne.n	80011b0 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800117a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800117c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001180:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8001184:	bf14      	ite	ne
 8001186:	2001      	movne	r0, #1
 8001188:	2000      	moveq	r0, #0
 800118a:	e006      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
}
 800118e:	4770      	bx	lr
        return HAL_ERROR;
 8001190:	2001      	movs	r0, #1
 8001192:	e002      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8001194:	2001      	movs	r0, #1
 8001196:	e000      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 8001198:	2000      	movs	r0, #0
}
 800119a:	b002      	add	sp, #8
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80011a0:	2001      	movs	r0, #1
 80011a2:	e7fa      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
 80011a6:	e7f8      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
 80011a8:	2001      	movs	r0, #1
 80011aa:	e7f6      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
 80011ac:	2001      	movs	r0, #1
 80011ae:	e7f4      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
 80011b0:	2001      	movs	r0, #1
 80011b2:	e7f2      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
 80011b4:	40023800 	.word	0x40023800
 80011b8:	42470000 	.word	0x42470000

080011bc <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80011bc:	4b01      	ldr	r3, [pc, #4]	; (80011c4 <HAL_RCC_EnableCSS+0x8>)
 80011be:	2201      	movs	r2, #1
 80011c0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011c2:	4770      	bx	lr
 80011c4:	42470000 	.word	0x42470000

080011c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d03f      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0x8e>
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d13f      	bne.n	800125a <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011e8:	d012      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 80011ec:	6859      	ldr	r1, [r3, #4]
 80011ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011f4:	2300      	movs	r3, #0
 80011f6:	fba1 0100 	umull	r0, r1, r1, r0
 80011fa:	f7fe fff5 	bl	80001e8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001206:	3301      	adds	r3, #1
 8001208:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800120a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800120e:	e025      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_RCC_GetSysClockFreq+0x98>)
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001218:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800121c:	ebb1 000c 	subs.w	r0, r1, ip
 8001220:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001224:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001228:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800122c:	0181      	lsls	r1, r0, #6
 800122e:	1a09      	subs	r1, r1, r0
 8001230:	eb63 030e 	sbc.w	r3, r3, lr
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800123a:	00c9      	lsls	r1, r1, #3
 800123c:	eb11 0c0c 	adds.w	ip, r1, ip
 8001240:	f143 0300 	adc.w	r3, r3, #0
 8001244:	0299      	lsls	r1, r3, #10
 8001246:	2300      	movs	r3, #0
 8001248:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800124c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001250:	f7fe ffca 	bl	80001e8 <__aeabi_uldivmod>
 8001254:	e7d3      	b.n	80011fe <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001258:	e000      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x94>
      sysclockfreq = HSI_VALUE;
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800125c:	bd08      	pop	{r3, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	017d7840 	.word	0x017d7840
 8001268:	00f42400 	.word	0x00f42400

0800126c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800126c:	2800      	cmp	r0, #0
 800126e:	f000 809d 	beq.w	80013ac <HAL_RCC_ClockConfig+0x140>
{
 8001272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001276:	460d      	mov	r5, r1
 8001278:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800127a:	4b50      	ldr	r3, [pc, #320]	; (80013bc <HAL_RCC_ClockConfig+0x150>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	428b      	cmp	r3, r1
 8001284:	d208      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	b2cb      	uxtb	r3, r1
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_RCC_ClockConfig+0x150>)
 800128a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	428b      	cmp	r3, r1
 8001294:	f040 808c 	bne.w	80013b0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	f013 0f02 	tst.w	r3, #2
 800129e:	d017      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	f013 0f04 	tst.w	r3, #4
 80012a4:	d004      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a6:	4a46      	ldr	r2, [pc, #280]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 80012a8:	6893      	ldr	r3, [r2, #8]
 80012aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ae:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	f013 0f08 	tst.w	r3, #8
 80012b6:	d004      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b8:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 80012ba:	6893      	ldr	r3, [r2, #8]
 80012bc:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c2:	4a3f      	ldr	r2, [pc, #252]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ca:	68a1      	ldr	r1, [r4, #8]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	f013 0f01 	tst.w	r3, #1
 80012d6:	d032      	beq.n	800133e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d8:	6862      	ldr	r2, [r4, #4]
 80012da:	2a01      	cmp	r2, #1
 80012dc:	d021      	beq.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	1e93      	subs	r3, r2, #2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d925      	bls.n	8001330 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f013 0f02 	tst.w	r3, #2
 80012ec:	d062      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ee:	4934      	ldr	r1, [pc, #208]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 80012f0:	688b      	ldr	r3, [r1, #8]
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012fa:	f7ff fbd9 	bl	8000ab0 <HAL_GetTick>
 80012fe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001300:	4f2f      	ldr	r7, [pc, #188]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001302:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	6862      	ldr	r2, [r4, #4]
 800130e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001312:	d014      	beq.n	800133e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fbcc 	bl	8000ab0 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	4540      	cmp	r0, r8
 800131c:	d9f3      	bls.n	8001306 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
 8001320:	e042      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800132a:	d1e0      	bne.n	80012ee <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800132c:	2001      	movs	r0, #1
 800132e:	e03b      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001338:	d1d9      	bne.n	80012ee <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	e034      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_RCC_ClockConfig+0x150>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	42ab      	cmp	r3, r5
 8001348:	d907      	bls.n	800135a <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	b2ea      	uxtb	r2, r5
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_RCC_ClockConfig+0x150>)
 800134e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	42ab      	cmp	r3, r5
 8001358:	d12e      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f013 0f04 	tst.w	r3, #4
 8001360:	d006      	beq.n	8001370 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 8001364:	6893      	ldr	r3, [r2, #8]
 8001366:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800136a:	68e1      	ldr	r1, [r4, #12]
 800136c:	430b      	orrs	r3, r1
 800136e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f013 0f08 	tst.w	r3, #8
 8001376:	d007      	beq.n	8001388 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 800137a:	6893      	ldr	r3, [r2, #8]
 800137c:	6921      	ldr	r1, [r4, #16]
 800137e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001382:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001386:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001388:	f7ff ff1e 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_RCC_ClockConfig+0x154>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_RCC_ClockConfig+0x158>)
 8001396:	5cd3      	ldrb	r3, [r2, r3]
 8001398:	40d8      	lsrs	r0, r3
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_ClockConfig+0x15c>)
 800139c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_ClockConfig+0x160>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	f7ff fb39 	bl	8000a18 <HAL_InitTick>
  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
}
 80013a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
}
 80013ae:	4770      	bx	lr
      return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7f9      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e7f7      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
 80013ba:	e7f5      	b.n	80013a8 <HAL_RCC_ClockConfig+0x13c>
 80013bc:	40023c00 	.word	0x40023c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08001824 	.word	0x08001824
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008

080013d0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_RCC_NMI_IRQHandler>:
{
 80013d4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80013e0:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80013e2:	f7ff fff5 	bl	80013d0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80013e6:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	739a      	strb	r2, [r3, #14]
}
 80013ec:	e7f8      	b.n	80013e0 <HAL_RCC_NMI_IRQHandler+0xc>
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013f4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <TIM_Base_SetConfig+0x104>)
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d05d      	beq.n	80014b8 <TIM_Base_SetConfig+0xc4>
 80013fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001400:	d031      	beq.n	8001466 <TIM_Base_SetConfig+0x72>
 8001402:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001406:	4290      	cmp	r0, r2
 8001408:	d051      	beq.n	80014ae <TIM_Base_SetConfig+0xba>
 800140a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140e:	4290      	cmp	r0, r2
 8001410:	d06d      	beq.n	80014ee <TIM_Base_SetConfig+0xfa>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4290      	cmp	r0, r2
 8001418:	d064      	beq.n	80014e4 <TIM_Base_SetConfig+0xf0>
 800141a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800141e:	4290      	cmp	r0, r2
 8001420:	d033      	beq.n	800148a <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001422:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001426:	4290      	cmp	r0, r2
 8001428:	d021      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
 800142a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800142e:	4290      	cmp	r0, r2
 8001430:	d01d      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
 8001432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001436:	4290      	cmp	r0, r2
 8001438:	d019      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
 800143a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800143e:	4290      	cmp	r0, r2
 8001440:	d015      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
 8001442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001446:	4290      	cmp	r0, r2
 8001448:	d011      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
 800144a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144e:	4290      	cmp	r0, r2
 8001450:	d00d      	beq.n	800146e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001456:	694a      	ldr	r2, [r1, #20]
 8001458:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800145a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800145c:	688b      	ldr	r3, [r1, #8]
 800145e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001460:	680b      	ldr	r3, [r1, #0]
 8001462:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001464:	e03b      	b.n	80014de <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800146a:	684a      	ldr	r2, [r1, #4]
 800146c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800146e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001472:	68ca      	ldr	r2, [r1, #12]
 8001474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800147a:	694a      	ldr	r2, [r1, #20]
 800147c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800147e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001480:	688b      	ldr	r3, [r1, #8]
 8001482:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001484:	680b      	ldr	r3, [r1, #0]
 8001486:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001488:	e029      	b.n	80014de <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800148a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800148e:	684a      	ldr	r2, [r1, #4]
 8001490:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001496:	68ca      	ldr	r2, [r1, #12]
 8001498:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800149a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800149e:	694a      	ldr	r2, [r1, #20]
 80014a0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014a4:	688b      	ldr	r3, [r1, #8]
 80014a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014a8:	680b      	ldr	r3, [r1, #0]
 80014aa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014ac:	e015      	b.n	80014da <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014b2:	684a      	ldr	r2, [r1, #4]
 80014b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014b6:	e7da      	b.n	800146e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014bc:	684a      	ldr	r2, [r1, #4]
 80014be:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80014c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014c4:	68ca      	ldr	r2, [r1, #12]
 80014c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014cc:	694a      	ldr	r2, [r1, #20]
 80014ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014d2:	688b      	ldr	r3, [r1, #8]
 80014d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014d6:	680b      	ldr	r3, [r1, #0]
 80014d8:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014da:	690b      	ldr	r3, [r1, #16]
 80014dc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014de:	2301      	movs	r3, #1
 80014e0:	6143      	str	r3, [r0, #20]
}
 80014e2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014e8:	684a      	ldr	r2, [r1, #4]
 80014ea:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014ec:	e7bf      	b.n	800146e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80014f2:	684a      	ldr	r2, [r1, #4]
 80014f4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014f6:	e7ba      	b.n	800146e <TIM_Base_SetConfig+0x7a>
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80014fc:	b340      	cbz	r0, 8001550 <HAL_TIM_Base_Init+0x54>
{
 80014fe:	b510      	push	{r4, lr}
 8001500:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001502:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001506:	b1f3      	cbz	r3, 8001546 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001508:	2302      	movs	r3, #2
 800150a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800150e:	4621      	mov	r1, r4
 8001510:	f851 0b04 	ldr.w	r0, [r1], #4
 8001514:	f7ff ff6e 	bl	80013f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001518:	2301      	movs	r3, #1
 800151a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800151e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001522:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001526:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800152a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001536:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800153a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800153e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001542:	2000      	movs	r0, #0
}
 8001544:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001546:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800154a:	f7ff f989 	bl	8000860 <HAL_TIM_Base_MspInit>
 800154e:	e7db      	b.n	8001508 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
}
 8001552:	4770      	bx	lr

08001554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001554:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001556:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001558:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800155c:	430a      	orrs	r2, r1
 800155e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001562:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001566:	6082      	str	r2, [r0, #8]
}
 8001568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800156e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001572:	2b01      	cmp	r3, #1
 8001574:	f000 80ae 	beq.w	80016d4 <HAL_TIM_ConfigClockSource+0x166>
{
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800157c:	2301      	movs	r3, #1
 800157e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001588:	6802      	ldr	r2, [r0, #0]
 800158a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800158c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001590:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001594:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001596:	680b      	ldr	r3, [r1, #0]
 8001598:	2b60      	cmp	r3, #96	; 0x60
 800159a:	d060      	beq.n	800165e <HAL_TIM_ConfigClockSource+0xf0>
 800159c:	d83d      	bhi.n	800161a <HAL_TIM_ConfigClockSource+0xac>
 800159e:	2b40      	cmp	r3, #64	; 0x40
 80015a0:	d079      	beq.n	8001696 <HAL_TIM_ConfigClockSource+0x128>
 80015a2:	d91c      	bls.n	80015de <HAL_TIM_ConfigClockSource+0x70>
 80015a4:	2b50      	cmp	r3, #80	; 0x50
 80015a6:	d136      	bne.n	8001616 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015a8:	6803      	ldr	r3, [r0, #0]
 80015aa:	6848      	ldr	r0, [r1, #4]
 80015ac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80015ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015b8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015c2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80015c6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80015c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015ca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80015cc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80015ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015d4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80015d8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2000      	movs	r0, #0
}
 80015dc:	e012      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d002      	beq.n	80015e8 <HAL_TIM_ConfigClockSource+0x7a>
 80015e2:	d90b      	bls.n	80015fc <HAL_TIM_ConfigClockSource+0x8e>
 80015e4:	2b30      	cmp	r3, #48	; 0x30
 80015e6:	d114      	bne.n	8001612 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80015e8:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80015ea:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015f0:	4313      	orrs	r3, r2
 80015f2:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80015f6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	2000      	movs	r0, #0
}
 80015fa:	e003      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80015fc:	f033 0210 	bics.w	r2, r3, #16
 8001600:	d0f2      	beq.n	80015e8 <HAL_TIM_ConfigClockSource+0x7a>
 8001602:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001604:	2301      	movs	r3, #1
 8001606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800160a:	2300      	movs	r3, #0
 800160c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001610:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001612:	2001      	movs	r0, #1
 8001614:	e7f6      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
 8001616:	2001      	movs	r0, #1
 8001618:	e7f4      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161e:	d055      	beq.n	80016cc <HAL_TIM_ConfigClockSource+0x15e>
 8001620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001624:	d10c      	bne.n	8001640 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8001626:	68cb      	ldr	r3, [r1, #12]
 8001628:	684a      	ldr	r2, [r1, #4]
 800162a:	6889      	ldr	r1, [r1, #8]
 800162c:	6800      	ldr	r0, [r0, #0]
 800162e:	f7ff ff91 	bl	8001554 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	6893      	ldr	r3, [r2, #8]
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2000      	movs	r0, #0
      break;
 800163e:	e7e1      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8001640:	2b70      	cmp	r3, #112	; 0x70
 8001642:	d145      	bne.n	80016d0 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8001644:	68cb      	ldr	r3, [r1, #12]
 8001646:	684a      	ldr	r2, [r1, #4]
 8001648:	6889      	ldr	r1, [r1, #8]
 800164a:	6800      	ldr	r0, [r0, #0]
 800164c:	f7ff ff82 	bl	8001554 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001658:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2000      	movs	r0, #0
      break;
 800165c:	e7d2      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800165e:	6803      	ldr	r3, [r0, #0]
 8001660:	684d      	ldr	r5, [r1, #4]
 8001662:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001664:	6a18      	ldr	r0, [r3, #32]
 8001666:	f020 0010 	bic.w	r0, r0, #16
 800166a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800166c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800166e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001670:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001674:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001678:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800167c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001680:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001682:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001684:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8001686:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800168c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001690:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001692:	2000      	movs	r0, #0
}
 8001694:	e7b6      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001696:	6803      	ldr	r3, [r0, #0]
 8001698:	6848      	ldr	r0, [r1, #4]
 800169a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800169c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016a6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016ac:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016b0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80016b4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80016b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016b8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80016ba:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80016bc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016c2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80016c6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80016c8:	2000      	movs	r0, #0
}
 80016ca:	e79b      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e799      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80016d0:	2001      	movs	r0, #1
 80016d2:	e797      	b.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80016d4:	2002      	movs	r0, #2
}
 80016d6:	4770      	bx	lr

080016d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d03b      	beq.n	8001758 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80016e0:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80016e2:	2301      	movs	r3, #1
 80016e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016ee:	6804      	ldr	r4, [r0, #0]
 80016f0:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80016f2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80016f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016f8:	680d      	ldr	r5, [r1, #0]
 80016fa:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80016fc:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016fe:	6803      	ldr	r3, [r0, #0]
 8001700:	4c16      	ldr	r4, [pc, #88]	; (800175c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8001702:	42a3      	cmp	r3, r4
 8001704:	d01a      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170a:	d017      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800170c:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001710:	42a3      	cmp	r3, r4
 8001712:	d013      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001714:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001718:	42a3      	cmp	r3, r4
 800171a:	d00f      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800171c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001720:	42a3      	cmp	r3, r4
 8001722:	d00b      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001724:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001728:	42a3      	cmp	r3, r4
 800172a:	d007      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800172c:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8001730:	42a3      	cmp	r3, r4
 8001732:	d003      	beq.n	800173c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001734:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001738:	42a3      	cmp	r3, r4
 800173a:	d104      	bne.n	8001746 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001740:	6849      	ldr	r1, [r1, #4]
 8001742:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001746:	2301      	movs	r3, #1
 8001748:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800174c:	2300      	movs	r3, #0
 800174e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001752:	4618      	mov	r0, r3
}
 8001754:	bc30      	pop	{r4, r5}
 8001756:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001758:	2002      	movs	r0, #2
}
 800175a:	4770      	bx	lr
 800175c:	40010000 	.word	0x40010000

08001760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001764:	f7ff f94e 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopForever+0x6>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopForever+0xe>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopForever+0x16>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800178e:	f000 f811 	bl	80017b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001792:	f7ff f8fd 	bl	8000990 <main>

08001796 <LoopForever>:

LoopForever:
  b LoopForever
 8001796:	e7fe      	b.n	8001796 <LoopForever>
  ldr   r0, =_estack
 8001798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017a4:	08001844 	.word	0x08001844
  ldr r2, =_sbss
 80017a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017ac:	20000100 	.word	0x20000100

080017b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <__libc_init_array>:
 80017b4:	b570      	push	{r4, r5, r6, lr}
 80017b6:	4d0d      	ldr	r5, [pc, #52]	; (80017ec <__libc_init_array+0x38>)
 80017b8:	4c0d      	ldr	r4, [pc, #52]	; (80017f0 <__libc_init_array+0x3c>)
 80017ba:	1b64      	subs	r4, r4, r5
 80017bc:	10a4      	asrs	r4, r4, #2
 80017be:	2600      	movs	r6, #0
 80017c0:	42a6      	cmp	r6, r4
 80017c2:	d109      	bne.n	80017d8 <__libc_init_array+0x24>
 80017c4:	4d0b      	ldr	r5, [pc, #44]	; (80017f4 <__libc_init_array+0x40>)
 80017c6:	4c0c      	ldr	r4, [pc, #48]	; (80017f8 <__libc_init_array+0x44>)
 80017c8:	f000 f820 	bl	800180c <_init>
 80017cc:	1b64      	subs	r4, r4, r5
 80017ce:	10a4      	asrs	r4, r4, #2
 80017d0:	2600      	movs	r6, #0
 80017d2:	42a6      	cmp	r6, r4
 80017d4:	d105      	bne.n	80017e2 <__libc_init_array+0x2e>
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
 80017d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017dc:	4798      	blx	r3
 80017de:	3601      	adds	r6, #1
 80017e0:	e7ee      	b.n	80017c0 <__libc_init_array+0xc>
 80017e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e6:	4798      	blx	r3
 80017e8:	3601      	adds	r6, #1
 80017ea:	e7f2      	b.n	80017d2 <__libc_init_array+0x1e>
 80017ec:	0800183c 	.word	0x0800183c
 80017f0:	0800183c 	.word	0x0800183c
 80017f4:	0800183c 	.word	0x0800183c
 80017f8:	08001840 	.word	0x08001840

080017fc <memset>:
 80017fc:	4402      	add	r2, r0
 80017fe:	4603      	mov	r3, r0
 8001800:	4293      	cmp	r3, r2
 8001802:	d100      	bne.n	8001806 <memset+0xa>
 8001804:	4770      	bx	lr
 8001806:	f803 1b01 	strb.w	r1, [r3], #1
 800180a:	e7f9      	b.n	8001800 <memset+0x4>

0800180c <_init>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	bf00      	nop
 8001810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001812:	bc08      	pop	{r3}
 8001814:	469e      	mov	lr, r3
 8001816:	4770      	bx	lr

08001818 <_fini>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	bf00      	nop
 800181c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800181e:	bc08      	pop	{r3}
 8001820:	469e      	mov	lr, r3
 8001822:	4770      	bx	lr
