
log_lwprintf_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe0  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08007188  08007188  00017188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073bc  080073bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c4  080073c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c4  080073c4  000173c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000178  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001123a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c52  00000000  00000000  000312da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00033f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e655  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004cb9  00000000  00000000  0004438d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00049046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  00049098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000070 	.word	0x20000070
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08007170 	.word	0x08007170

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000074 	.word	0x20000074
 80001e4:	08007170 	.word	0x08007170

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_ldivmod>:
 8000a94:	b97b      	cbnz	r3, 8000ab6 <__aeabi_ldivmod+0x22>
 8000a96:	b972      	cbnz	r2, 8000ab6 <__aeabi_ldivmod+0x22>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bfbe      	ittt	lt
 8000a9c:	2000      	movlt	r0, #0
 8000a9e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aa2:	e006      	blt.n	8000ab2 <__aeabi_ldivmod+0x1e>
 8000aa4:	bf08      	it	eq
 8000aa6:	2800      	cmpeq	r0, #0
 8000aa8:	bf1c      	itt	ne
 8000aaa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000aae:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab2:	f000 b9f5 	b.w	8000ea0 <__aeabi_idiv0>
 8000ab6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aba:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abe:	2900      	cmp	r1, #0
 8000ac0:	db09      	blt.n	8000ad6 <__aeabi_ldivmod+0x42>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db1a      	blt.n	8000afc <__aeabi_ldivmod+0x68>
 8000ac6:	f000 f883 	bl	8000bd0 <__udivmoddi4>
 8000aca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad2:	b004      	add	sp, #16
 8000ad4:	4770      	bx	lr
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db1b      	blt.n	8000b18 <__aeabi_ldivmod+0x84>
 8000ae0:	f000 f876 	bl	8000bd0 <__udivmoddi4>
 8000ae4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aec:	b004      	add	sp, #16
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	4770      	bx	lr
 8000afc:	4252      	negs	r2, r2
 8000afe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b02:	f000 f865 	bl	8000bd0 <__udivmoddi4>
 8000b06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0e:	b004      	add	sp, #16
 8000b10:	4240      	negs	r0, r0
 8000b12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b16:	4770      	bx	lr
 8000b18:	4252      	negs	r2, r2
 8000b1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1e:	f000 f857 	bl	8000bd0 <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr

08000b34 <__aeabi_uldivmod>:
 8000b34:	b953      	cbnz	r3, 8000b4c <__aeabi_uldivmod+0x18>
 8000b36:	b94a      	cbnz	r2, 8000b4c <__aeabi_uldivmod+0x18>
 8000b38:	2900      	cmp	r1, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	2800      	cmpeq	r0, #0
 8000b3e:	bf1c      	itt	ne
 8000b40:	f04f 31ff 	movne.w	r1, #4294967295
 8000b44:	f04f 30ff 	movne.w	r0, #4294967295
 8000b48:	f000 b9aa 	b.w	8000ea0 <__aeabi_idiv0>
 8000b4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b54:	f000 f83c 	bl	8000bd0 <__udivmoddi4>
 8000b58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b60:	b004      	add	sp, #16
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_d2lz>:
 8000b64:	b538      	push	{r3, r4, r5, lr}
 8000b66:	2200      	movs	r2, #0
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	460d      	mov	r5, r1
 8000b6e:	f7ff ff69 	bl	8000a44 <__aeabi_dcmplt>
 8000b72:	b928      	cbnz	r0, 8000b80 <__aeabi_d2lz+0x1c>
 8000b74:	4620      	mov	r0, r4
 8000b76:	4629      	mov	r1, r5
 8000b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b7c:	f000 b80a 	b.w	8000b94 <__aeabi_d2ulz>
 8000b80:	4620      	mov	r0, r4
 8000b82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b86:	f000 f805 	bl	8000b94 <__aeabi_d2ulz>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	bd38      	pop	{r3, r4, r5, pc}
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2ulz>:
 8000b94:	b5d0      	push	{r4, r6, r7, lr}
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__aeabi_d2ulz+0x34>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4606      	mov	r6, r0
 8000b9c:	460f      	mov	r7, r1
 8000b9e:	f7ff fcdf 	bl	8000560 <__aeabi_dmul>
 8000ba2:	f000 f97f 	bl	8000ea4 <__aeabi_d2uiz>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	f7ff fc60 	bl	800046c <__aeabi_ui2d>
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <__aeabi_d2ulz+0x38>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f7ff fcd6 	bl	8000560 <__aeabi_dmul>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	4630      	mov	r0, r6
 8000bba:	4639      	mov	r1, r7
 8000bbc:	f7ff fb18 	bl	80001f0 <__aeabi_dsub>
 8000bc0:	f000 f970 	bl	8000ea4 <__aeabi_d2uiz>
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	bdd0      	pop	{r4, r6, r7, pc}
 8000bc8:	3df00000 	.word	0x3df00000
 8000bcc:	41f00000 	.word	0x41f00000

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2uiz>:
 8000ea4:	004a      	lsls	r2, r1, #1
 8000ea6:	d211      	bcs.n	8000ecc <__aeabi_d2uiz+0x28>
 8000ea8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eac:	d211      	bcs.n	8000ed2 <__aeabi_d2uiz+0x2e>
 8000eae:	d50d      	bpl.n	8000ecc <__aeabi_d2uiz+0x28>
 8000eb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000eb8:	d40e      	bmi.n	8000ed8 <__aeabi_d2uiz+0x34>
 8000eba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ec6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eca:	4770      	bx	lr
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	4770      	bx	lr
 8000ed2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ed6:	d102      	bne.n	8000ede <__aeabi_d2uiz+0x3a>
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	4770      	bx	lr
 8000ede:	f04f 0000 	mov.w	r0, #0
 8000ee2:	4770      	bx	lr

08000ee4 <initialize_button>:

/**
 * @brief          Button initialization (CLK, GPIO, NVIC)
 */
void initialize_button(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <initialize_button+0xb8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <initialize_button+0xb8>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <initialize_button+0xb8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <initialize_button+0xb8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <initialize_button+0xb8>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <initialize_button+0xb8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <initialize_button+0xb8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <initialize_button+0xb8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <initialize_button+0xb8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <initialize_button+0xb8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <initialize_button+0xb8>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <initialize_button+0xb8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f001 f9ab 	bl	80022ca <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f74:	2006      	movs	r0, #6
 8000f76:	f001 f9c4 	bl	8002302 <HAL_NVIC_EnableIRQ>

   GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f82:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <initialize_button+0xbc>)
 8000f90:	f001 fa64 	bl	800245c <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <button_activate>:

/**
 * @brief          Button activation from EXTI Callback
 */
void button_activate(struct user_button *user_button_ptr)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	user_button_ptr->activate = true;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	705a      	strb	r2, [r3, #1]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <button_check_mode>:

/**
 * @brief          This functions calls from SysTick constantly to check button mode
 */
void button_check_mode(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	button_check_algorithm(&user_button);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <button_check_mode+0x10>)
 8000fc6:	f000 f805 	bl	8000fd4 <button_check_algorithm>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000008c 	.word	0x2000008c

08000fd4 <button_check_algorithm>:

/**
 * @brief          Button check algorithm (for singlne, double and hold modes)
 */
void button_check_algorithm(struct user_button *user_button_ptr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if (user_button_ptr->activate) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d016      	beq.n	8001012 <button_check_algorithm+0x3e>
		if (!timeout_started(&user_button.debounce_timeout)) {
 8000fe4:	4837      	ldr	r0, [pc, #220]	; (80010c4 <button_check_algorithm+0xf0>)
 8000fe6:	f000 fcd3 	bl	8001990 <timeout_started>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <button_check_algorithm+0x38>
			user_button_ptr->mode = BUTTON_ONE_CLICK;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
			user_button_ptr->activate = false;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	705a      	strb	r2, [r3, #1]
			timeout_start(&user_button.debounce_timeout, BUTTON_DEBOUNCE_TIME_MS);
 8001002:	2132      	movs	r1, #50	; 0x32
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <button_check_algorithm+0xf0>)
 8001006:	f000 fc96 	bl	8001936 <timeout_start>
 800100a:	e002      	b.n	8001012 <button_check_algorithm+0x3e>
		}
		else {
			user_button_ptr->mode = BUTTON_DOUBLE_CLICK;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((timeout_started(&user_button.debounce_timeout)) && (timeout_check(&user_button.debounce_timeout, (5 * user_button_ptr->held_pressed_counter)))) {
 8001012:	482c      	ldr	r0, [pc, #176]	; (80010c4 <button_check_algorithm+0xf0>)
 8001014:	f000 fcbc 	bl	8001990 <timeout_started>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d023      	beq.n	8001066 <button_check_algorithm+0x92>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	461a      	mov	r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	4619      	mov	r1, r3
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <button_check_algorithm+0xf0>)
 800102e:	f000 fcc1 	bl	80019b4 <timeout_check>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d016      	beq.n	8001066 <button_check_algorithm+0x92>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8001038:	2101      	movs	r1, #1
 800103a:	4823      	ldr	r0, [pc, #140]	; (80010c8 <button_check_algorithm+0xf4>)
 800103c:	f001 fbaa 	bl	8002794 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d105      	bne.n	8001052 <button_check_algorithm+0x7e>
			++user_button_ptr->held_pressed_counter;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	709a      	strb	r2, [r3, #2]
		}
		user_button_ptr->mode = (user_button_ptr->held_pressed_counter >= 71) ? BUTTON_HELD_PRESSED : user_button_ptr->mode;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b46      	cmp	r3, #70	; 0x46
 8001058:	d802      	bhi.n	8001060 <button_check_algorithm+0x8c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	e000      	b.n	8001062 <button_check_algorithm+0x8e>
 8001060:	2202      	movs	r2, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	701a      	strb	r2, [r3, #0]
	}

	if ((timeout_started(&user_button.debounce_timeout)) && (timeout_check(&user_button.debounce_timeout, 350))) {
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <button_check_algorithm+0xf0>)
 8001068:	f000 fc92 	bl	8001990 <timeout_started>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d024      	beq.n	80010bc <button_check_algorithm+0xe8>
 8001072:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <button_check_algorithm+0xf0>)
 8001078:	f000 fc9c 	bl	80019b4 <timeout_check>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01c      	beq.n	80010bc <button_check_algorithm+0xe8>
		switch (user_button_ptr->mode) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d00c      	beq.n	80010a4 <button_check_algorithm+0xd0>
 800108a:	2b02      	cmp	r3, #2
 800108c:	dc0d      	bgt.n	80010aa <button_check_algorithm+0xd6>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <button_check_algorithm+0xc4>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <button_check_algorithm+0xca>
 8001096:	e008      	b.n	80010aa <button_check_algorithm+0xd6>
		    case BUTTON_ONE_CLICK:
		    	indication_led_button();
 8001098:	f000 f932 	bl	8001300 <indication_led_button>
			   	break;
 800109c:	e005      	b.n	80010aa <button_check_algorithm+0xd6>
		    case BUTTON_DOUBLE_CLICK:
			 	indication_led_button_double_click();
 800109e:	f000 f993 	bl	80013c8 <indication_led_button_double_click>
			   	break;
 80010a2:	e002      	b.n	80010aa <button_check_algorithm+0xd6>
			case BUTTON_HELD_PRESSED:
			    indication_led_button_hold();
 80010a4:	f000 f95e 	bl	8001364 <indication_led_button_hold>
			    break;
 80010a8:	bf00      	nop
		}
		user_button_ptr->held_pressed_counter = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	709a      	strb	r2, [r3, #2]
		timeout_stop(&user_button.debounce_timeout);
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <button_check_algorithm+0xf0>)
 80010b2:	f000 fc5b 	bl	800196c <timeout_stop>
		user_button_ptr->activate = false;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	705a      	strb	r2, [r3, #1]
	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000090 	.word	0x20000090
 80010c8:	40020000 	.word	0x40020000

080010cc <EXTI0_IRQHandler>:

/**
 * @brief          EXTI0 IRQHandler - for interrupt with button
 */
void EXTI0_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f001 fbab 	bl	800282c <HAL_GPIO_EXTI_IRQHandler>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_EXTI_Callback>:

/**
 * @brief          Callback of EXTI0
 */
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	if (gpio_pin == BUTTON_Pin) {
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x16>
		button_activate(&user_button);
 80010ec:	4803      	ldr	r0, [pc, #12]	; (80010fc <HAL_GPIO_EXTI_Callback+0x20>)
 80010ee:	f7ff ff59 	bl	8000fa4 <button_activate>
	}
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000008c 	.word	0x2000008c

08001100 <initialize_led_indication>:

/**
 * @brief          Initialization off led CLK, Pins, hardware, fns and init of each led fns
 */
void initialize_led_indication(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
	mculed_ctrl_t fns = {0};
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <initialize_led_indication+0x120>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <initialize_led_indication+0x120>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <initialize_led_indication+0x120>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <initialize_led_indication+0x120>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a36      	ldr	r2, [pc, #216]	; (8001220 <initialize_led_indication+0x120>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <initialize_led_indication+0x120>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <initialize_led_indication+0x120>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <initialize_led_indication+0x120>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <initialize_led_indication+0x120>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800117c:	4829      	ldr	r0, [pc, #164]	; (8001224 <initialize_led_indication+0x124>)
 800117e:	f001 fb21 	bl	80027c4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin;
 8001182:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001186:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <initialize_led_indication+0x124>)
 800119c:	f001 f95e 	bl	800245c <HAL_GPIO_Init>

	mculed[LED_TOP].hardware.port    =    (uint32_t) LED_TOP_GPIO_Port;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <initialize_led_indication+0x128>)
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <initialize_led_indication+0x124>)
 80011a4:	60da      	str	r2, [r3, #12]
	mculed[LED_TOP].hardware.pin     =    (uint32_t) LED_TOP_Pin;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <initialize_led_indication+0x128>)
 80011a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ac:	609a      	str	r2, [r3, #8]
	mculed[LED_LEFT].hardware.port   =    (uint32_t) LED_LEFT_GPIO_Port;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <initialize_led_indication+0x128>)
 80011b0:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <initialize_led_indication+0x124>)
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
	mculed[LED_LEFT].hardware.pin    =    (uint32_t) LED_LEFT_Pin;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <initialize_led_indication+0x128>)
 80011b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
	mculed[LED_BOTTOM].hardware.port =    (uint32_t) LED_BOTTOM_GPIO_Port;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <initialize_led_indication+0x128>)
 80011be:	4a19      	ldr	r2, [pc, #100]	; (8001224 <initialize_led_indication+0x124>)
 80011c0:	65da      	str	r2, [r3, #92]	; 0x5c
	mculed[LED_BOTTOM].hardware.pin  =    (uint32_t) LED_BOTTOM_Pin;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <initialize_led_indication+0x128>)
 80011c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c8:	659a      	str	r2, [r3, #88]	; 0x58
	mculed[LED_RIGHT].hardware.port  =    (uint32_t) LED_RIGHT_GPIO_Port;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <initialize_led_indication+0x128>)
 80011cc:	4a15      	ldr	r2, [pc, #84]	; (8001224 <initialize_led_indication+0x124>)
 80011ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	mculed[LED_RIGHT].hardware.pin   =    (uint32_t) LED_RIGHT_Pin;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <initialize_led_indication+0x128>)
 80011d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fns.turn_on = indication_led_turn_on;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <initialize_led_indication+0x12c>)
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
	fns.turn_off = indication_led_turn_off;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <initialize_led_indication+0x130>)
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
	fns.toggle = indication_led_toggle;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <initialize_led_indication+0x134>)
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	mculed_init(&mculed[LED_TOP], &fns);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <initialize_led_indication+0x128>)
 80011f0:	f000 faf6 	bl	80017e0 <mculed_init>
	mculed_init(&mculed[LED_LEFT], &fns);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	480f      	ldr	r0, [pc, #60]	; (8001238 <initialize_led_indication+0x138>)
 80011fc:	f000 faf0 	bl	80017e0 <mculed_init>
	mculed_init(&mculed[LED_BOTTOM], &fns);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <initialize_led_indication+0x13c>)
 8001208:	f000 faea 	bl	80017e0 <mculed_init>
	mculed_init(&mculed[LED_RIGHT], &fns);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <initialize_led_indication+0x140>)
 8001214:	f000 fae4 	bl	80017e0 <mculed_init>
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	2000009c 	.word	0x2000009c
 800122c:	08001245 	.word	0x08001245
 8001230:	08001269 	.word	0x08001269
 8001234:	0800128d 	.word	0x0800128d
 8001238:	200000c4 	.word	0x200000c4
 800123c:	200000ec 	.word	0x200000ec
 8001240:	20000114 	.word	0x20000114

08001244 <indication_led_turn_on>:

/**
 * @brief          Led actions fns
 */
void indication_led_turn_on(mculed_t *self)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_SET);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	b29b      	uxth	r3, r3
 8001258:	2201      	movs	r2, #1
 800125a:	4619      	mov	r1, r3
 800125c:	f001 fab2 	bl	80027c4 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <indication_led_turn_off>:

void indication_led_turn_off(mculed_t *self)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((GPIO_TypeDef *) self->hardware.port, self->hardware.pin, GPIO_PIN_RESET);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4618      	mov	r0, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	b29b      	uxth	r3, r3
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f001 faa0 	bl	80027c4 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <indication_led_toggle>:

void indication_led_toggle(mculed_t *self)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin((GPIO_TypeDef *)self->hardware.port, self->hardware.pin);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	461a      	mov	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f001 faa7 	bl	80027f6 <HAL_GPIO_TogglePin>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <indication_led_loading>:
/******************************************************************************/
/**
 * @brief          Loading led animation function
 */
void indication_led_loading(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	e017      	b.n	80012ec <indication_led_loading+0x3c>
		indication_led_loading_setup(&mculed[led_index], led_index);
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <indication_led_loading+0x4c>)
 80012c8:	4413      	add	r3, r2
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f8d5 	bl	800147c <indication_led_loading_setup>
		led_function(&mculed[led_index]);
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <indication_led_loading+0x4c>)
 80012de:	4413      	add	r3, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fab6 	bl	8001852 <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d9e4      	bls.n	80012bc <indication_led_loading+0xc>
	}
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000009c 	.word	0x2000009c

08001300 <indication_led_button>:
/******************************************************************************/
/**
 * @brief          Button led function
 */
void indication_led_button(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
    log_printf_crlf("Button!");
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <indication_led_button+0x58>)
 8001308:	f000 fc04 	bl	8001b14 <log_printf>
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <indication_led_button+0x5c>)
 800130e:	f000 fc01 	bl	8001b14 <log_printf>

    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e017      	b.n	8001348 <indication_led_button+0x48>
        indication_led_button_setup(&mculed[led_index], led_index);
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <indication_led_button+0x60>)
 8001324:	4413      	add	r3, r2
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f901 	bl	8001530 <indication_led_button_setup>
        led_function(&mculed[led_index]);
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <indication_led_button+0x60>)
 800133a:	4413      	add	r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa88 	bl	8001852 <led_function>
    for (int led_index = 0; led_index < N_LED; led_index++) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d9e4      	bls.n	8001318 <indication_led_button+0x18>
    }
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08007188 	.word	0x08007188
 800135c:	08007190 	.word	0x08007190
 8001360:	2000009c 	.word	0x2000009c

08001364 <indication_led_button_hold>:

/**
 * @brief          Hold button led function
 */
void indication_led_button_hold(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
    log_printf_crlf("Button hold!");
 800136a:	4814      	ldr	r0, [pc, #80]	; (80013bc <indication_led_button_hold+0x58>)
 800136c:	f000 fbd2 	bl	8001b14 <log_printf>
 8001370:	4813      	ldr	r0, [pc, #76]	; (80013c0 <indication_led_button_hold+0x5c>)
 8001372:	f000 fbcf 	bl	8001b14 <log_printf>

	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e017      	b.n	80013ac <indication_led_button_hold+0x48>
		indication_led_button_hold_setup(&mculed[led_index], led_index);
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <indication_led_button_hold+0x60>)
 8001388:	4413      	add	r3, r2
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f923 	bl	80015d8 <indication_led_button_hold_setup>
		led_function(&mculed[led_index]);
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <indication_led_button_hold+0x60>)
 800139e:	4413      	add	r3, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fa56 	bl	8001852 <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9e4      	bls.n	800137c <indication_led_button_hold+0x18>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	08007194 	.word	0x08007194
 80013c0:	08007190 	.word	0x08007190
 80013c4:	2000009c 	.word	0x2000009c

080013c8 <indication_led_button_double_click>:

/**
 * @brief          Double click button led function
 */
void indication_led_button_double_click(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
    log_printf_crlf("Button double click!");
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <indication_led_button_double_click+0x58>)
 80013d0:	f000 fba0 	bl	8001b14 <log_printf>
 80013d4:	4813      	ldr	r0, [pc, #76]	; (8001424 <indication_led_button_double_click+0x5c>)
 80013d6:	f000 fb9d 	bl	8001b14 <log_printf>

	for (int led_index = 0; led_index < N_LED; led_index++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e017      	b.n	8001410 <indication_led_button_double_click+0x48>
		indication_led_button_double_click_setup(&mculed[led_index], led_index);
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <indication_led_button_double_click+0x60>)
 80013ec:	4413      	add	r3, r2
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f955 	bl	80016a0 <indication_led_button_double_click_setup>
		led_function(&mculed[led_index]);
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4a09      	ldr	r2, [pc, #36]	; (8001428 <indication_led_button_double_click+0x60>)
 8001402:	4413      	add	r3, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fa24 	bl	8001852 <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d9e4      	bls.n	80013e0 <indication_led_button_double_click+0x18>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	080071a4 	.word	0x080071a4
 8001424:	08007190 	.word	0x08007190
 8001428:	2000009c 	.word	0x2000009c

0800142c <indication_led_error>:

/**
 * @brief          Error led function
 */
void indication_led_error(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e016      	b.n	8001466 <indication_led_error+0x3a>
		indication_led_error_setup(&mculed[led_index]);
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <indication_led_error+0x4c>)
 8001444:	4413      	add	r3, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f988 	bl	800175c <indication_led_error_setup>
		led_function(&mculed[led_index]);
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <indication_led_error+0x4c>)
 8001458:	4413      	add	r3, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f9f9 	bl	8001852 <led_function>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d9e5      	bls.n	8001438 <indication_led_error+0xc>
	}
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000009c 	.word	0x2000009c

0800147c <indication_led_loading_setup>:

/**
 * @brief          Loading led animation setup
 */
void indication_led_loading_setup(mculed_t *led_ptr, int led_index)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	led_ptr->hardware.mode = MCULED_LED_LOADING;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2204      	movs	r2, #4
 800148a:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_LOADING_NUM;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001492:	80da      	strh	r2, [r3, #6]

	switch (led_index) {
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d837      	bhi.n	800150a <indication_led_loading_setup+0x8e>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <indication_led_loading_setup+0x24>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014c5 	.word	0x080014c5
 80014a8:	080014db 	.word	0x080014db
 80014ac:	080014f3 	.word	0x080014f3
		case LED_TOP:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2296      	movs	r2, #150	; 0x96
 80014b4:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	22d2      	movs	r2, #210	; 0xd2
 80014ba:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_TOP_TIME_ON));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	22f0      	movs	r2, #240	; 0xf0
 80014c0:	809a      	strh	r2, [r3, #4]
			break;
 80014c2:	e023      	b.n	800150c <indication_led_loading_setup+0x90>
		case LED_LEFT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_ON);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	22d2      	movs	r2, #210	; 0xd2
 80014c8:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_LEFT_TIME_OFF);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80014d0:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_LEFT_TIME_ON));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	22b4      	movs	r2, #180	; 0xb4
 80014d6:	809a      	strh	r2, [r3, #4]
			break;
 80014d8:	e018      	b.n	800150c <indication_led_loading_setup+0x90>
		case LED_BOTTOM:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_ON);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80014e0:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_BOTTOM_TIME_OFF);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80014e8:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_BOTTOM_TIME_ON));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2278      	movs	r2, #120	; 0x78
 80014ee:	809a      	strh	r2, [r3, #4]
			break;
 80014f0:	e00c      	b.n	800150c <indication_led_loading_setup+0x90>
		case LED_RIGHT:
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_ON);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80014f8:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_RIGHT_TIME_OFF);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8001500:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = (INDICATION_LED_SPEED_MIDDLE * (LED_RIGHT_TIME_OFF - LED_RIGHT_TIME_ON));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	223c      	movs	r2, #60	; 0x3c
 8001506:	809a      	strh	r2, [r3, #4]
			break;
 8001508:	e000      	b.n	800150c <indication_led_loading_setup+0x90>
		default:
			break;
 800150a:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	885a      	ldrh	r2, [r3, #2]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	82da      	strh	r2, [r3, #22]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <indication_led_button_setup>:

/**
 * @brief          Button led setup
 */
void indication_led_button_setup(mculed_t *led_ptr, int led_index)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d839      	bhi.n	80015b4 <indication_led_button_setup+0x84>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <indication_led_button_setup+0x18>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001559 	.word	0x08001559
 800154c:	08001579 	.word	0x08001579
 8001550:	0800158d 	.word	0x0800158d
 8001554:	080015a1 	.word	0x080015a1
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_ON);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2296      	movs	r2, #150	; 0x96
 8001568:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TOP_TIME_OFF);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	22d2      	movs	r2, #210	; 0xd2
 800156e:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	809a      	strh	r2, [r3, #4]
			break;
 8001576:	e01e      	b.n	80015b6 <indication_led_button_setup+0x86>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	805a      	strh	r2, [r3, #2]
			break;
 800158a:	e014      	b.n	80015b6 <indication_led_button_setup+0x86>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	805a      	strh	r2, [r3, #2]
			break;
 800159e:	e00a      	b.n	80015b6 <indication_led_button_setup+0x86>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	805a      	strh	r2, [r3, #2]
			break;
 80015b2:	e000      	b.n	80015b6 <indication_led_button_setup+0x86>
		default:
			break;
 80015b4:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	885a      	ldrh	r2, [r3, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	82da      	strh	r2, [r3, #22]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <indication_led_button_hold_setup>:

/**
 * @brief          Button hold led setup
 */
void indication_led_button_hold_setup(mculed_t *led_ptr, int led_index)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d848      	bhi.n	800167a <indication_led_button_hold_setup+0xa2>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <indication_led_button_hold_setup+0x18>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001601 	.word	0x08001601
 80015f4:	0800161b 	.word	0x0800161b
 80015f8:	0800163b 	.word	0x0800163b
 80015fc:	0800165b 	.word	0x0800165b
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	809a      	strh	r2, [r3, #4]
			break;
 8001618:	e030      	b.n	800167c <indication_led_button_hold_setup+0xa4>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2296      	movs	r2, #150	; 0x96
 800162a:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	22d2      	movs	r2, #210	; 0xd2
 8001630:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	809a      	strh	r2, [r3, #4]
			break;
 8001638:	e020      	b.n	800167c <indication_led_button_hold_setup+0xa4>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2296      	movs	r2, #150	; 0x96
 800164a:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	22d2      	movs	r2, #210	; 0xd2
 8001650:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	809a      	strh	r2, [r3, #4]
			break;
 8001658:	e010      	b.n	800167c <indication_led_button_hold_setup+0xa4>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2296      	movs	r2, #150	; 0x96
 800166a:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	22d2      	movs	r2, #210	; 0xd2
 8001670:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	809a      	strh	r2, [r3, #4]
			break;
 8001678:	e000      	b.n	800167c <indication_led_button_hold_setup+0xa4>
		default:
			break;
 800167a:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	881a      	ldrh	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	885a      	ldrh	r2, [r3, #2]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	82da      	strh	r2, [r3, #22]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <indication_led_button_double_click_setup>:

void indication_led_button_double_click_setup(mculed_t *led_ptr, int led_index)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	switch (led_index) {
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d842      	bhi.n	8001736 <indication_led_button_double_click_setup+0x96>
 80016b0:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <indication_led_button_double_click_setup+0x18>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	080016e3 	.word	0x080016e3
 80016c0:	08001703 	.word	0x08001703
 80016c4:	0800171d 	.word	0x0800171d
		case LED_TOP:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	809a      	strh	r2, [r3, #4]
			break;
 80016e0:	e02a      	b.n	8001738 <indication_led_button_double_click_setup+0x98>
		case LED_LEFT:
			led_ptr->hardware.mode = MCULED_ON_STATE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.iterations_num = INDICATION_LED_BUTTON_NUM;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	80da      	strh	r2, [r3, #6]
			led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2296      	movs	r2, #150	; 0x96
 80016f2:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	22d2      	movs	r2, #210	; 0xd2
 80016f8:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	809a      	strh	r2, [r3, #4]
			break;
 8001700:	e01a      	b.n	8001738 <indication_led_button_double_click_setup+0x98>
		case LED_BOTTOM:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	809a      	strh	r2, [r3, #4]
			break;
 800171a:	e00d      	b.n	8001738 <indication_led_button_double_click_setup+0x98>
		case LED_RIGHT:
			led_ptr->hardware.mode = MCULED_OFF_STATE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	741a      	strb	r2, [r3, #16]
			led_ptr->setup.on_ms = ZERO_MS;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
			led_ptr->setup.off_ms = ZERO_MS;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	805a      	strh	r2, [r3, #2]
			led_ptr->setup.delay_ms = ZERO_MS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	809a      	strh	r2, [r3, #4]
			break;
 8001734:	e000      	b.n	8001738 <indication_led_button_double_click_setup+0x98>
		default:
			break;
 8001736:	bf00      	nop
 	}

	led_ptr->status.iterations_counter = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	885a      	ldrh	r2, [r3, #2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	82da      	strh	r2, [r3, #22]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <indication_led_error_setup>:

/**
 * @brief          Error led setup
 */
void indication_led_error_setup(mculed_t *led_ptr)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	led_ptr->hardware.mode = MCULED_ON_STATE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	741a      	strb	r2, [r3, #16]
	led_ptr->setup.iterations_num = INDICATION_LED_ERROR_NUM;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	80da      	strh	r2, [r3, #6]

	led_ptr->setup.on_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_ON);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2296      	movs	r2, #150	; 0x96
 8001774:	801a      	strh	r2, [r3, #0]
	led_ptr->setup.off_ms = (INDICATION_LED_SPEED_MIDDLE * LED_TIME_OFF);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	22d2      	movs	r2, #210	; 0xd2
 800177a:	805a      	strh	r2, [r3, #2]
	led_ptr->setup.delay_ms = ZERO_MS;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	809a      	strh	r2, [r3, #4]

	led_ptr->status.iterations_counter = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	831a      	strh	r2, [r3, #24]
	led_ptr->status.on_timeout = led_ptr->setup.on_ms;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	829a      	strh	r2, [r3, #20]
	led_ptr->status.off_timeout = led_ptr->setup.off_ms;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	885a      	ldrh	r2, [r3, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	82da      	strh	r2, [r3, #22]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <indication_leds_update>:

/**
 * @brief          Led update from SysTick_Handler
 */
void indication_leds_update(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	e00c      	b.n	80017ca <indication_leds_update+0x26>
		led_update(&mculed[led_index]);
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <indication_leds_update+0x38>)
 80017bc:	4413      	add	r3, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f867 	bl	8001892 <led_update>
	for (int led_index = 0; led_index < N_LED; led_index++) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d9ef      	bls.n	80017b0 <indication_leds_update+0xc>
	}
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000009c 	.word	0x2000009c

080017e0 <mculed_init>:

/**
 * @brief          Initialization of each led
 */
mculedr_t mculed_init(mculed_t *self, mculed_ctrl_t *fns)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	if (self == NULL || fns == NULL || fns->turn_on == NULL || fns->turn_off == NULL) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00a      	beq.n	8001806 <mculed_init+0x26>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <mculed_init+0x26>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <mculed_init+0x26>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <mculed_init+0x2a>
		return MCULED_ERROR;
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	e01d      	b.n	8001846 <mculed_init+0x66>
	}

	self->setup.on_ms = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
	self->setup.off_ms = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	805a      	strh	r2, [r3, #2]
	self->setup.iterations_num = 0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	80da      	strh	r2, [r3, #6]
	self->setup.delay_ms = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	809a      	strh	r2, [r3, #4]

	self->status.iterations_counter = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	831a      	strh	r2, [r3, #24]
	self->status.off_timeout = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	82da      	strh	r2, [r3, #22]
	self->status.on_timeout = 0;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	829a      	strh	r2, [r3, #20]

	self->fns.turn_on = fns->turn_on;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	61da      	str	r2, [r3, #28]
	self->fns.turn_off = fns->turn_off;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	621a      	str	r2, [r3, #32]

	return MCULED_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <led_function>:

/**
 * @brief          Led function for different modes of work
 */
void led_function(mculed_t *self)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	if (self->hardware.mode == MCULED_OFF_STATE) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7c1b      	ldrb	r3, [r3, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <led_function+0x18>
		self->fns.turn_off(self);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_ON_STATE) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7c1b      	ldrb	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d103      	bne.n	800187a <led_function+0x28>
		self->fns.turn_on(self);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
	}
	if (self->hardware.mode == MCULED_TOGGLE_STATE) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7c1b      	ldrb	r3, [r3, #16]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d103      	bne.n	800188a <led_function+0x38>
		self->fns.toggle(self);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
	}
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <led_update>:

/**
 * @brief          Led update from SysTick_Handler for each led
 */
void led_update(mculed_t *self)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	if (self->status.on_timeout) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	8a9b      	ldrh	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02b      	beq.n	80018fa <led_update+0x68>
		if (!--self->status.on_timeout) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8a9b      	ldrh	r3, [r3, #20]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	829a      	strh	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	8a9b      	ldrh	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d121      	bne.n	80018fa <led_update+0x68>
			self->fns.turn_off(self); // TURN OFF
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
			if (self->setup.iterations_num) {
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	88db      	ldrh	r3, [r3, #6]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <led_update+0x68>
				self->status.iterations_counter++;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8b1b      	ldrh	r3, [r3, #24]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	831a      	strh	r2, [r3, #24]
				if (self->status.iterations_counter >= self->setup.iterations_num) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8b1a      	ldrh	r2, [r3, #24]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	88db      	ldrh	r3, [r3, #6]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d305      	bcc.n	80018ea <led_update+0x58>
					self->setup.off_ms = 0;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	805a      	strh	r2, [r3, #2]
					self->setup.delay_ms = 0;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	809a      	strh	r2, [r3, #4]
				}
				self->status.off_timeout = (self->setup.off_ms + self->setup.delay_ms);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	885a      	ldrh	r2, [r3, #2]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	82da      	strh	r2, [r3, #22]
			}
		}
	}

	if (self->status.off_timeout) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	8adb      	ldrh	r3, [r3, #22]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <led_update+0x9c>
		if (!--self->status.off_timeout) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8adb      	ldrh	r3, [r3, #22]
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	82da      	strh	r2, [r3, #22]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	8adb      	ldrh	r3, [r3, #22]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <led_update+0x9c>
			self->status.on_timeout = (self->setup.on_ms + self->setup.delay_ms);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	4413      	add	r3, r2
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	829a      	strh	r2, [r3, #20]
			self->fns.turn_on(self); // TURN ON
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
		}
	}
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <timeout_start>:
#include "led.h"

TIM_HandleTypeDef htim1;

void timeout_start(struct timeout *timeout, uint32_t timeout_ms)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	if (timeout == NULL) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d103      	bne.n	800194e <timeout_start+0x18>
		indication_led_error();
 8001946:	f7ff fd71 	bl	800142c <indication_led_error>
		Error_Handler();
 800194a:	f000 fa53 	bl	8001df4 <Error_Handler>
	}

	timeout->timestamp_ms = HAL_GetTick();
 800194e:	f000 fbd5 	bl	80020fc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
	timeout->timeout_ms = timeout_ms;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]
	timeout->start_flag = true;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <timeout_stop>:

void timeout_stop(struct timeout *timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <timeout_stop+0x16>
		indication_led_error();
 800197a:	f7ff fd57 	bl	800142c <indication_led_error>
		Error_Handler();
 800197e:	f000 fa39 	bl	8001df4 <Error_Handler>
	}

	timeout->start_flag = false;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <timeout_started>:

bool timeout_started(struct timeout *timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	if (timeout == NULL) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <timeout_started+0x16>
		indication_led_error();
 800199e:	f7ff fd45 	bl	800142c <indication_led_error>
		Error_Handler();
 80019a2:	f000 fa27 	bl	8001df4 <Error_Handler>
	}

	return timeout->start_flag;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2db      	uxtb	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <timeout_check>:

	return false;
}

bool timeout_check(struct timeout *timeout, uint32_t msTime)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	if ((HAL_GetTick() - timeout->timestamp_ms) > msTime) {
 80019be:	f000 fb9d 	bl	80020fc <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d201      	bcs.n	80019d4 <timeout_check+0x20>
		return true;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <timeout_check+0x22>
	}

	return false;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM1_Init+0x98>)
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <MX_TIM1_Init+0x9c>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a04:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a12:	2232      	movs	r2, #50	; 0x32
 8001a14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a2a:	f001 fbd6 	bl	80031da <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a34:	f000 f9de 	bl	8001df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a46:	f001 fc17 	bl	8003278 <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a50:	f000 f9d0 	bl	8001df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_TIM1_Init+0x98>)
 8001a62:	f001 fe0b 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a6c:	f000 f9c2 	bl	8001df4 <Error_Handler>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000013c 	.word	0x2000013c
 8001a7c:	40010000 	.word	0x40010000

08001a80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(tim_baseHandle->Instance==TIM1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_TIM_Base_MspInit+0x78>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12d      	bne.n	8001aee <HAL_TIM_Base_MspInit+0x6e>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_TIM_Base_MspInit+0x7c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_TIM_Base_MspInit+0x7c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_TIM_Base_MspInit+0x7c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2018      	movs	r0, #24
 8001ab4:	f000 fc09 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ab8:	2018      	movs	r0, #24
 8001aba:	f000 fc22 	bl	8002302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2019      	movs	r0, #25
 8001ac4:	f000 fc01 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ac8:	2019      	movs	r0, #25
 8001aca:	f000 fc1a 	bl	8002302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	201a      	movs	r0, #26
 8001ad4:	f000 fbf9 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ad8:	201a      	movs	r0, #26
 8001ada:	f000 fc12 	bl	8002302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201b      	movs	r0, #27
 8001ae4:	f000 fbf1 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ae8:	201b      	movs	r0, #27
 8001aea:	f000 fc0a 	bl	8002302 <HAL_NVIC_EnableIRQ>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40023800 	.word	0x40023800

08001b00 <log_init>:
#include "lwprintf/lwprintf.h"

static int lwprintf_logs_out(int ch, lwprintf_t* p);

void log_init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
    lwprintf_init(lwprintf_logs_out);
 8001b04:	4902      	ldr	r1, [pc, #8]	; (8001b10 <log_init+0x10>)
 8001b06:	2000      	movs	r0, #0
 8001b08:	f004 fdaa 	bl	8006660 <lwprintf_init_ex>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08001b41 	.word	0x08001b41

08001b14 <log_printf>:

int log_printf(const char *fmt, ...)
{
 8001b14:	b40f      	push	{r0, r1, r2, r3}
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
    va_list args;
    int len;

    va_start(args, fmt);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	603b      	str	r3, [r7, #0]
    len = lwprintf_vprintf(fmt, args);
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	6939      	ldr	r1, [r7, #16]
 8001b26:	2000      	movs	r0, #0
 8001b28:	f004 fdb0 	bl	800668c <lwprintf_vprintf_ex>
 8001b2c:	6078      	str	r0, [r7, #4]
    va_end(args);

    return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b3a:	b004      	add	sp, #16
 8001b3c:	4770      	bx	lr
	...

08001b40 <lwprintf_logs_out>:

static int lwprintf_logs_out(int ch, lwprintf_t* p)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]

    if (c == '\0') {
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <lwprintf_logs_out+0x18>
        return ch;           //to prevent printing '0' in the end of any (char*)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e006      	b.n	8001b66 <lwprintf_logs_out+0x26>
    }

    return uart_send_byte(&huart2, ch);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4804      	ldr	r0, [pc, #16]	; (8001b70 <lwprintf_logs_out+0x30>)
 8001b60:	f000 f87a 	bl	8001c58 <uart_send_byte>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000184 	.word	0x20000184

08001b74 <debug_uart_init>:

/**
 * @brief          Debug uart init function
 */
void debug_uart_init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <debug_uart_init+0xc8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <debug_uart_init+0xc8>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <debug_uart_init+0xc8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin          = DEBUG_TX_Pin | DEBUG_RX_PIN;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode         = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull         = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate    = GPIO_AF7_USART2;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481f      	ldr	r0, [pc, #124]	; (8001c40 <debug_uart_init+0xcc>)
 8001bc2:	f000 fc4b 	bl	800245c <HAL_GPIO_Init>

    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <debug_uart_init+0xc8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <debug_uart_init+0xc8>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <debug_uart_init+0xc8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(USART2_IRQn, 0x00, 0x00);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2026      	movs	r0, #38	; 0x26
 8001be8:	f000 fb6f 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f000 fb88 	bl	8002302 <HAL_NVIC_EnableIRQ>

    huart2.Instance          = USART2;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <debug_uart_init+0xd0>)
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <debug_uart_init+0xd4>)
 8001bf6:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate     = 115200;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <debug_uart_init+0xd0>)
 8001bfa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfe:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <debug_uart_init+0xd0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits     = UART_STOPBITS_1;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <debug_uart_init+0xd0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity       = UART_PARITY_NONE;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <debug_uart_init+0xd0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode         = UART_MODE_TX_RX;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <debug_uart_init+0xd0>)
 8001c14:	220c      	movs	r2, #12
 8001c16:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <debug_uart_init+0xd0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <debug_uart_init+0xd0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <debug_uart_init+0xd0>)
 8001c26:	f001 fda5 	bl	8003774 <HAL_UART_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <debug_uart_init+0xc0>
    {
      Error_Handler();
 8001c30:	f000 f8e0 	bl	8001df4 <Error_Handler>
    }
}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	20000184 	.word	0x20000184
 8001c48:	40004400 	.word	0x40004400

08001c4c <uart_all_init>:

/**
 * @brief          Initialization of all uarts
 */
void uart_all_init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    debug_uart_init();
 8001c50:	f7ff ff90 	bl	8001b74 <debug_uart_init>
    //data_uart_init();
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <uart_send_byte>:
{
    return HAL_UART_Transmit(huart, (uint8_t*)msg_ptr, sizeof(msg_ptr), HAL_MAX_DELAY) == HAL_OK;
}

bool uart_send_byte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
    return HAL_UART_Transmit(huart, &byte, sizeof(byte), HAL_MAX_DELAY) == HAL_OK;
 8001c64:	1cf9      	adds	r1, r7, #3
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f001 fdd8 	bl	8003822 <HAL_UART_Transmit>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_UART_TxCpltCallback>:
/**
 * @brief          Interrupt callbacks
 *
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]

}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    printf("Flag is TRUE!\r\n");
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <HAL_UART_RxCpltCallback+0x1c>)
 8001ca6:	f004 fdbf 	bl	8006828 <puts>
    debug_uart.flag = true;
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_UART_RxCpltCallback+0x20>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	70da      	strb	r2, [r3, #3]
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800722c 	.word	0x0800722c
 8001cbc:	200001c8 	.word	0x200001c8

08001cc0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <main>:

//struct uart data_uart;
//struct uart debug_uart;

int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    initialize_mcu();
 8001cd8:	f000 f816 	bl	8001d08 <initialize_mcu>

    initialize_led_indication();
 8001cdc:	f7ff fa10 	bl	8001100 <initialize_led_indication>
    indication_led_loading();
 8001ce0:	f7ff fae6 	bl	80012b0 <indication_led_loading>

    initialize_button();
 8001ce4:	f7ff f8fe 	bl	8000ee4 <initialize_button>
    uart_all_init();
 8001ce8:	f7ff ffb0 	bl	8001c4c <uart_all_init>
    log_init();
 8001cec:	f7ff ff08 	bl	8001b00 <log_init>

    log_printf_crlf("\t\t\tWelcome to STM32F407 Discovery Firmware with lwprintf library");
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <main+0x2c>)
 8001cf2:	f7ff ff0f 	bl	8001b14 <log_printf>
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <main+0x30>)
 8001cf8:	f7ff ff0c 	bl	8001b14 <log_printf>
    //uart_setup_receive_msg(&huart2, &debug_uart.msg);

    for(;;) {
 8001cfc:	e7fe      	b.n	8001cfc <main+0x28>
 8001cfe:	bf00      	nop
 8001d00:	0800723c 	.word	0x0800723c
 8001d04:	08007280 	.word	0x08007280

08001d08 <initialize_mcu>:
        //uart_check_msg();
    }
}

void initialize_mcu(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    HAL_Init();
 8001d0c:	f000 f990 	bl	8002030 <HAL_Init>
    SystemClock_Config();
 8001d10:	f000 f804 	bl	8001d1c <SystemClock_Config>
    MX_TIM1_Init();
 8001d14:	f7ff fe64 	bl	80019e0 <MX_TIM1_Init>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	; 0x50
 8001d20:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2230      	movs	r2, #48	; 0x30
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 fd06 	bl	800673c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <SystemClock_Config+0xd0>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <SystemClock_Config+0xd0>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <SystemClock_Config+0xd0>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <SystemClock_Config+0xd4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8001d90:	2354      	movs	r3, #84	; 0x54
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd5b 	bl	800285c <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0x94>
    {
      Error_Handler();
 8001dac:	f000 f822 	bl	8001df4 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	2302      	movs	r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc0:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 ffbc 	bl	8002d4c <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xc2>
    {
      Error_Handler();
 8001dda:	f000 f80b 	bl	8001df4 <Error_Handler>
    }

    HAL_RCC_EnableCSS();
 8001dde:	f001 f89b 	bl	8002f18 <HAL_RCC_EnableCSS>
}
 8001de2:	bf00      	nop
 8001de4:	3750      	adds	r7, #80	; 0x50
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000

08001df4 <Error_Handler>:

void Error_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
  __disable_irq();
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <Error_Handler+0x8>
	...

08001e00 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_RCC_NMI_IRQHandler();
 8001e54:	f001 f9a6 	bl	80031a4 <HAL_RCC_NMI_IRQHandler>

  while (1)
 8001e58:	e7fe      	b.n	8001e58 <NMI_Handler+0x8>

08001e5a <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <MemManage_Handler+0x4>

08001e66 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e72 <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <PendSV_Handler>:

void PendSV_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USART2_IRQHandler+0x10>)
 8001ea2:	f001 fd51 	bl	8003948 <HAL_UART_IRQHandler>
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000184 	.word	0x20000184

08001eb0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001eb4:	f000 f90e 	bl	80020d4 <HAL_IncTick>
	indication_leds_update();
 8001eb8:	f7ff fc74 	bl	80017a4 <indication_leds_update>
	button_check_mode();
 8001ebc:	f7ff f880 	bl	8000fc0 <button_check_mode>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
  }

  return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
  }
  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f004 fb8a 	bl	80066e8 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	200001cc 	.word	0x200001cc
 8002008:	200001e8 	.word	0x200001e8

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f92b 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fecc 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f943 	bl	800231e <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f90b 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008
 80020f8:	200001d0 	.word	0x200001d0

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	200001d0 	.word	0x200001d0

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff3e 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff31 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff feda 	bl	80020fc <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d008      	beq.n	8002368 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e052      	b.n	800240e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0216 	bic.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002386:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <HAL_DMA_Abort+0x62>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0208 	bic.w	r2, r2, #8
 80023a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e013      	b.n	80023e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7ff fe9f 	bl	80020fc <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d90c      	bls.n	80023e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e015      	b.n	800240e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e4      	bne.n	80023ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d004      	beq.n	8002434 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00c      	b.n	800244e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2205      	movs	r2, #5
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	e16b      	b.n	8002750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	f040 815a 	bne.w	800274a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d130      	bne.n	8002510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 0201 	and.w	r2, r3, #1
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b03      	cmp	r3, #3
 800251a:	d017      	beq.n	800254c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d123      	bne.n	80025a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3208      	adds	r2, #8
 800259a:	69b9      	ldr	r1, [r7, #24]
 800259c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0203 	and.w	r2, r3, #3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b4 	beq.w	800274a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_GPIO_Init+0x30c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_GPIO_Init+0x310>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	220f      	movs	r2, #15
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x314>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x226>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x318>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x222>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a50      	ldr	r2, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x31c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x21e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x320>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x21a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4e      	ldr	r2, [pc, #312]	; (8002780 <HAL_GPIO_Init+0x324>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x216>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x328>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x212>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4c      	ldr	r2, [pc, #304]	; (8002788 <HAL_GPIO_Init+0x32c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4b      	ldr	r2, [pc, #300]	; (800278c <HAL_GPIO_Init+0x330>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x20a>
 8002662:	2307      	movs	r3, #7
 8002664:	e00e      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002666:	2308      	movs	r3, #8
 8002668:	e00c      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266a:	2306      	movs	r3, #6
 800266c:	e00a      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800266e:	2305      	movs	r3, #5
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002672:	2304      	movs	r3, #4
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x228>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x228>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x310>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_GPIO_Init+0x334>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <HAL_GPIO_Init+0x334>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_GPIO_Init+0x334>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f ae90 	bls.w	8002478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021c00 	.word	0x40021c00
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	041a      	lsls	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43d9      	mvns	r1, r3
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	400b      	ands	r3, r1
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fc46 	bl	80010dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e267      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d075      	beq.n	8002966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05b      	beq.n	8002964 <HAL_RCC_OscConfig+0x108>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d157      	bne.n	8002964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e242      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x74>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b70      	ldr	r3, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6f      	ldr	r2, [pc, #444]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xb0>
 80028f4:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b66      	ldr	r3, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff fbf2 	bl	80020fc <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff fbee 	bl	80020fc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e207      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xc0>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff fbde 	bl	80020fc <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7ff fbda 	bl	80020fc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1f3      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b51      	ldr	r3, [pc, #324]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0xe8>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d063      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002986:	2b08      	cmp	r3, #8
 8002988:	d11c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d116      	bne.n	80029c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c7      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4937      	ldr	r1, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	e03a      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7ff fb93 	bl	80020fc <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7ff fb8f 	bl	80020fc <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1a8      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4925      	ldr	r1, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x244>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7ff fb72 	bl	80020fc <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fb6e 	bl	80020fc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e187      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7ff fb52 	bl	80020fc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7ff fb4e 	bl	80020fc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e167      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x240>)
 8002a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x200>
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x248>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fb3b 	bl	80020fc <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8a:	f7ff fb37 	bl	80020fc <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d907      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e150      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470000 	.word	0x42470000
 8002aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ea      	bne.n	8002a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8097 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac6:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	4a7c      	ldr	r2, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af2:	4b77      	ldr	r3, [pc, #476]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002afe:	4b74      	ldr	r3, [pc, #464]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff faf7 	bl	80020fc <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b12:	f7ff faf3 	bl	80020fc <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e10c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_OscConfig+0x474>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ea>
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e01c      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x30c>
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a5e      	ldr	r2, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x324>
 8002b68:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a54      	ldr	r2, [pc, #336]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7ff fab8 	bl	80020fc <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7ff fab4 	bl	80020fc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0cb      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff faa2 	bl	80020fc <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fa9e 	bl	80020fc <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0b5      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a1 	beq.w	8002d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bfa:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d05c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d141      	bne.n	8002c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fa72 	bl	80020fc <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff fa6e 	bl	80020fc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e087      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	491b      	ldr	r1, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fa47 	bl	80020fc <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff fa43 	bl	80020fc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e05c      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x416>
 8002c90:	e054      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fa30 	bl	80020fc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff fa2c 	bl	80020fc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e045      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
 8002cbe:	e03d      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e038      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4ec>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d11a      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d111      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0cc      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d90c      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d044      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e067      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4934      	ldr	r1, [pc, #208]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3c:	f7ff f95e 	bl	80020fc <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7ff f95a 	bl	80020fc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e04f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d20c      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f82d 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490a      	ldr	r1, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f8be 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	080072a8 	.word	0x080072a8
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <HAL_RCC_EnableCSS+0x14>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	4247004c 	.word	0x4247004c

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	; 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
 800303a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003040:	f7fd fd78 	bl	8000b34 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd fd1e 	bl	8000b34 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	; 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	080072b8 	.word	0x080072b8

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	080072b8 	.word	0x080072b8

080031a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d104      	bne.n	80031be <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80031b4:	f000 f80a 	bl	80031cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	701a      	strb	r2, [r3, #0]
  }
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	4002380e 	.word	0x4002380e

080031cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e041      	b.n	8003270 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fe fc3d 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 f8f5 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e0b4      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x186>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032cc:	d03e      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xd4>
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d2:	f200 8087 	bhi.w	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	f000 8086 	beq.w	80033ea <HAL_TIM_ConfigClockSource+0x172>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d87f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d01a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d87b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d050      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x11a>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d877      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d03c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xfa>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d873      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d058      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d86f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d064      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d86b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d060      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d867      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b10      	cmp	r3, #16
 800331a:	d05a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	e062      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f000 f985 	bl	800363c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04f      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f000 f96e 	bl	800363c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e03c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f000 f8e2 	bl	8003548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	; 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f93b 	bl	8003606 <TIM_ITRx_SetConfig>
      break;
 8003390:	e02c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 f901 	bl	80035a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	; 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f92b 	bl	8003606 <TIM_ITRx_SetConfig>
      break;
 80033b0:	e01c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 f8c2 	bl	8003548 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f91b 	bl	8003606 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e00c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f912 	bl	8003606 <TIM_ITRx_SetConfig>
      break;
 80033e2:	e003      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e000      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a40      	ldr	r2, [pc, #256]	; (800351c <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d00f      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2f      	ldr	r2, [pc, #188]	; (800351c <TIM_Base_SetConfig+0x114>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d027      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <TIM_Base_SetConfig+0x118>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d023      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <TIM_Base_SetConfig+0x11c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2a      	ldr	r2, [pc, #168]	; (8003528 <TIM_Base_SetConfig+0x120>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <TIM_Base_SetConfig+0x124>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d017      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <TIM_Base_SetConfig+0x128>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <TIM_Base_SetConfig+0x12c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <TIM_Base_SetConfig+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <TIM_Base_SetConfig+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <TIM_Base_SetConfig+0x13c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <TIM_Base_SetConfig+0x114>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <TIM_Base_SetConfig+0x124>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d103      	bne.n	8003508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	615a      	str	r2, [r3, #20]
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40010400 	.word	0x40010400
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	40001800 	.word	0x40001800
 8003540:	40001c00 	.word	0x40001c00
 8003544:	40002000 	.word	0x40002000

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b087      	sub	sp, #28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	f043 0307 	orr.w	r3, r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	431a      	orrs	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4313      	orrs	r3, r2
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e05a      	b.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a21      	ldr	r2, [pc, #132]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d01d      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10c      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40010400 	.word	0x40010400
 800376c:	40014000 	.word	0x40014000
 8003770:	40001800 	.word	0x40001800

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e03f      	b.n	8003806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f837 	bl	800380e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fd67 	bl	800428c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b08a      	sub	sp, #40	; 0x28
 8003826:	af02      	add	r7, sp, #8
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b20      	cmp	r3, #32
 8003840:	d17c      	bne.n	800393c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_UART_Transmit+0x2c>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e075      	b.n	800393e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_UART_Transmit+0x3e>
 800385c:	2302      	movs	r3, #2
 800385e:	e06e      	b.n	800393e <HAL_UART_Transmit+0x11c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	; 0x21
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003876:	f7fe fc41 	bl	80020fc <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d108      	bne.n	80038a4 <HAL_UART_Transmit+0x82>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	e003      	b.n	80038ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038b4:	e02a      	b.n	800390c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fadb 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e036      	b.n	800393e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	3302      	adds	r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e007      	b.n	80038fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	3301      	adds	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1cf      	bne.n	80038b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2140      	movs	r1, #64	; 0x40
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 faab 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e006      	b.n	800393e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0ba      	sub	sp, #232	; 0xe8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fbb5 	bl	8004116 <UART_Receive_IT>
      return;
 80039ac:	e256      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80de 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80d1 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0208 	orr.w	r2, r3, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 81ed 	beq.w	8003e52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fb40 	bl	8004116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x17a>
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04f      	beq.n	8003b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa48 	bl	8003f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d141      	bne.n	8003b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1d9      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_UART_IRQHandler+0x3dc>)
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fc6d 	bl	8002416 <HAL_DMA_Abort_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e00e      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fe f8b4 	bl	8001cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00a      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe f8b0 	bl	8001cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fe f8ac 	bl	8001cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b6e:	e170      	b.n	8003e52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	bf00      	nop
    return;
 8003b72:	e16e      	b.n	8003e52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 814a 	bne.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8143 	beq.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 813c 	beq.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	f040 80b4 	bne.w	8003d28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8140 	beq.w	8003e56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f080 8139 	bcs.w	8003e56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	f000 8088 	beq.w	8003d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1d9      	bne.n	8003bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e1      	bne.n	8003c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e3      	bne.n	8003c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e3      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fb16 	bl	8002336 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8a2 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d20:	e099      	b.n	8003e56 <HAL_UART_IRQHandler+0x50e>
 8003d22:	bf00      	nop
 8003d24:	0800401f 	.word	0x0800401f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 808b 	beq.w	8003e5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d72:	647a      	str	r2, [r7, #68]	; 0x44
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	623b      	str	r3, [r7, #32]
   return(result);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e3      	bne.n	8003d86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e3      	bne.n	8003dcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f82a 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e10:	e023      	b.n	8003e5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_UART_IRQHandler+0x4ea>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f90b 	bl	8004046 <UART_Transmit_IT>
    return;
 8003e30:	e014      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <HAL_UART_IRQHandler+0x514>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f94b 	bl	80040e6 <UART_EndTransmit_IT>
    return;
 8003e50:	e004      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
    return;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
      return;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
      return;
 8003e5a:	bf00      	nop
  }
}
 8003e5c:	37e8      	adds	r7, #232	; 0xe8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop

08003e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b090      	sub	sp, #64	; 0x40
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	e050      	b.n	8003f30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d04c      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9c:	f7fe f92e 	bl	80020fc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d241      	bcs.n	8003f30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ecc:	637a      	str	r2, [r7, #52]	; 0x34
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f00:	623a      	str	r2, [r7, #32]
 8003f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e5      	bne.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e00f      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d09f      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3740      	adds	r7, #64	; 0x40
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b095      	sub	sp, #84	; 0x54
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f80:	643a      	str	r2, [r7, #64]	; 0x40
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d119      	bne.n	8004004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff0:	61ba      	str	r2, [r7, #24]
 8003ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004012:	bf00      	nop
 8004014:	3754      	adds	r7, #84	; 0x54
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7fd fe41 	bl	8001cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b21      	cmp	r3, #33	; 0x21
 8004058:	d13e      	bne.n	80040d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d114      	bne.n	800408e <UART_Transmit_IT+0x48>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d110      	bne.n	800408e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	1c9a      	adds	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]
 800408c:	e008      	b.n	80040a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6211      	str	r1, [r2, #32]
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4619      	mov	r1, r3
 80040ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fdbd 	bl	8001c86 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08c      	sub	sp, #48	; 0x30
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b22      	cmp	r3, #34	; 0x22
 8004128:	f040 80ab 	bne.w	8004282 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d117      	bne.n	8004166 <UART_Receive_IT+0x50>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d113      	bne.n	8004166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	b29a      	uxth	r2, r3
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	1c9a      	adds	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
 8004164:	e026      	b.n	80041b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004178:	d007      	beq.n	800418a <UART_Receive_IT+0x74>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <UART_Receive_IT+0x82>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e008      	b.n	80041aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15a      	bne.n	800427e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0220 	bic.w	r2, r2, #32
 80041d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	d135      	bne.n	8004274 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	613b      	str	r3, [r7, #16]
   return(result);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f023 0310 	bic.w	r3, r3, #16
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	623a      	str	r2, [r7, #32]
 8004230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	69f9      	ldr	r1, [r7, #28]
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	61bb      	str	r3, [r7, #24]
   return(result);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e5      	bne.n	800420e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b10      	cmp	r3, #16
 800424e:	d10a      	bne.n	8004266 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fdf9 	bl	8003e64 <HAL_UARTEx_RxEventCallback>
 8004272:	e002      	b.n	800427a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd fd11 	bl	8001c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e002      	b.n	8004284 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3730      	adds	r7, #48	; 0x30
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b0c0      	sub	sp, #256	; 0x100
 8004292:	af00      	add	r7, sp, #0
 8004294:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	ea40 0301 	orr.w	r3, r0, r1
 80042b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042e4:	f021 010c 	bic.w	r1, r1, #12
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042f2:	430b      	orrs	r3, r1
 80042f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	6999      	ldr	r1, [r3, #24]
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	ea40 0301 	orr.w	r3, r0, r1
 8004312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b8f      	ldr	r3, [pc, #572]	; (8004558 <UART_SetConfig+0x2cc>)
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <UART_SetConfig+0xa0>
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8d      	ldr	r3, [pc, #564]	; (800455c <UART_SetConfig+0x2d0>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d104      	bne.n	8004336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800432c:	f7fe ff26 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004330:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004334:	e003      	b.n	800433e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7fe ff0d 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800433a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004348:	f040 810c 	bne.w	8004564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004356:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800435a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	1891      	adds	r1, r2, r2
 8004364:	65b9      	str	r1, [r7, #88]	; 0x58
 8004366:	415b      	adcs	r3, r3
 8004368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800436e:	4621      	mov	r1, r4
 8004370:	eb12 0801 	adds.w	r8, r2, r1
 8004374:	4629      	mov	r1, r5
 8004376:	eb43 0901 	adc.w	r9, r3, r1
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438e:	4690      	mov	r8, r2
 8004390:	4699      	mov	r9, r3
 8004392:	4623      	mov	r3, r4
 8004394:	eb18 0303 	adds.w	r3, r8, r3
 8004398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800439c:	462b      	mov	r3, r5
 800439e:	eb49 0303 	adc.w	r3, r9, r3
 80043a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ba:	460b      	mov	r3, r1
 80043bc:	18db      	adds	r3, r3, r3
 80043be:	653b      	str	r3, [r7, #80]	; 0x50
 80043c0:	4613      	mov	r3, r2
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	657b      	str	r3, [r7, #84]	; 0x54
 80043c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d0:	f7fc fbb0 	bl	8000b34 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4b61      	ldr	r3, [pc, #388]	; (8004560 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2302 	umull	r2, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	011c      	lsls	r4, r3, #4
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80043fc:	415b      	adcs	r3, r3
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004404:	4641      	mov	r1, r8
 8004406:	eb12 0a01 	adds.w	sl, r2, r1
 800440a:	4649      	mov	r1, r9
 800440c:	eb43 0b01 	adc.w	fp, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800441c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004424:	4692      	mov	sl, r2
 8004426:	469b      	mov	fp, r3
 8004428:	4643      	mov	r3, r8
 800442a:	eb1a 0303 	adds.w	r3, sl, r3
 800442e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004432:	464b      	mov	r3, r9
 8004434:	eb4b 0303 	adc.w	r3, fp, r3
 8004438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800444c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004450:	460b      	mov	r3, r1
 8004452:	18db      	adds	r3, r3, r3
 8004454:	643b      	str	r3, [r7, #64]	; 0x40
 8004456:	4613      	mov	r3, r2
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	647b      	str	r3, [r7, #68]	; 0x44
 800445e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004466:	f7fc fb65 	bl	8000b34 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4611      	mov	r1, r2
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <UART_SetConfig+0x2d4>)
 8004472:	fba3 2301 	umull	r2, r3, r3, r1
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2264      	movs	r2, #100	; 0x64
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	1acb      	subs	r3, r1, r3
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <UART_SetConfig+0x2d4>)
 8004488:	fba3 2302 	umull	r2, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004494:	441c      	add	r4, r3
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b0:	415b      	adcs	r3, r3
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044b8:	4641      	mov	r1, r8
 80044ba:	1851      	adds	r1, r2, r1
 80044bc:	6339      	str	r1, [r7, #48]	; 0x30
 80044be:	4649      	mov	r1, r9
 80044c0:	414b      	adcs	r3, r1
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d0:	4659      	mov	r1, fp
 80044d2:	00cb      	lsls	r3, r1, #3
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044da:	4651      	mov	r1, sl
 80044dc:	00ca      	lsls	r2, r1, #3
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	4642      	mov	r2, r8
 80044e6:	189b      	adds	r3, r3, r2
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ec:	464b      	mov	r3, r9
 80044ee:	460a      	mov	r2, r1
 80044f0:	eb42 0303 	adc.w	r3, r2, r3
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800450c:	460b      	mov	r3, r1
 800450e:	18db      	adds	r3, r3, r3
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
 8004512:	4613      	mov	r3, r2
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800451e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004522:	f7fc fb07 	bl	8000b34 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4b0d      	ldr	r3, [pc, #52]	; (8004560 <UART_SetConfig+0x2d4>)
 800452c:	fba3 1302 	umull	r1, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	2164      	movs	r1, #100	; 0x64
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3332      	adds	r3, #50	; 0x32
 800453e:	4a08      	ldr	r2, [pc, #32]	; (8004560 <UART_SetConfig+0x2d4>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4422      	add	r2, r4
 8004552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004554:	e105      	b.n	8004762 <UART_SetConfig+0x4d6>
 8004556:	bf00      	nop
 8004558:	40011000 	.word	0x40011000
 800455c:	40011400 	.word	0x40011400
 8004560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800456e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004576:	4642      	mov	r2, r8
 8004578:	464b      	mov	r3, r9
 800457a:	1891      	adds	r1, r2, r2
 800457c:	6239      	str	r1, [r7, #32]
 800457e:	415b      	adcs	r3, r3
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004586:	4641      	mov	r1, r8
 8004588:	1854      	adds	r4, r2, r1
 800458a:	4649      	mov	r1, r9
 800458c:	eb43 0501 	adc.w	r5, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045ac:	464b      	mov	r3, r9
 80045ae:	eb45 0303 	adc.w	r3, r5, r3
 80045b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045d2:	4629      	mov	r1, r5
 80045d4:	008b      	lsls	r3, r1, #2
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045dc:	4621      	mov	r1, r4
 80045de:	008a      	lsls	r2, r1, #2
 80045e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045e4:	f7fc faa6 	bl	8000b34 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b60      	ldr	r3, [pc, #384]	; (8004770 <UART_SetConfig+0x4e4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	61b9      	str	r1, [r7, #24]
 8004610:	415b      	adcs	r3, r3
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004618:	4641      	mov	r1, r8
 800461a:	1851      	adds	r1, r2, r1
 800461c:	6139      	str	r1, [r7, #16]
 800461e:	4649      	mov	r1, r9
 8004620:	414b      	adcs	r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4651      	mov	r1, sl
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4642      	mov	r2, r8
 8004646:	189b      	adds	r3, r3, r2
 8004648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800464c:	464b      	mov	r3, r9
 800464e:	460a      	mov	r2, r1
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	67bb      	str	r3, [r7, #120]	; 0x78
 8004662:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004670:	4649      	mov	r1, r9
 8004672:	008b      	lsls	r3, r1, #2
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467a:	4641      	mov	r1, r8
 800467c:	008a      	lsls	r2, r1, #2
 800467e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004682:	f7fc fa57 	bl	8000b34 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <UART_SetConfig+0x4e4>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	2164      	movs	r1, #100	; 0x64
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	3332      	adds	r3, #50	; 0x32
 800469e:	4a34      	ldr	r2, [pc, #208]	; (8004770 <UART_SetConfig+0x4e4>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046aa:	441c      	add	r4, r3
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	673b      	str	r3, [r7, #112]	; 0x70
 80046b4:	677a      	str	r2, [r7, #116]	; 0x74
 80046b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046ba:	4642      	mov	r2, r8
 80046bc:	464b      	mov	r3, r9
 80046be:	1891      	adds	r1, r2, r2
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	415b      	adcs	r3, r3
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ca:	4641      	mov	r1, r8
 80046cc:	1851      	adds	r1, r2, r1
 80046ce:	6039      	str	r1, [r7, #0]
 80046d0:	4649      	mov	r1, r9
 80046d2:	414b      	adcs	r3, r1
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e2:	4659      	mov	r1, fp
 80046e4:	00cb      	lsls	r3, r1, #3
 80046e6:	4651      	mov	r1, sl
 80046e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ec:	4651      	mov	r1, sl
 80046ee:	00ca      	lsls	r2, r1, #3
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	4642      	mov	r2, r8
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80046fc:	464b      	mov	r3, r9
 80046fe:	460a      	mov	r2, r1
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	663b      	str	r3, [r7, #96]	; 0x60
 8004710:	667a      	str	r2, [r7, #100]	; 0x64
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800471e:	4649      	mov	r1, r9
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	4641      	mov	r1, r8
 8004724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004728:	4641      	mov	r1, r8
 800472a:	008a      	lsls	r2, r1, #2
 800472c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004730:	f7fc fa00 	bl	8000b34 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <UART_SetConfig+0x4e4>)
 800473a:	fba3 1302 	umull	r1, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2164      	movs	r1, #100	; 0x64
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	3332      	adds	r3, #50	; 0x32
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <UART_SetConfig+0x4e4>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4422      	add	r2, r4
 8004760:	609a      	str	r2, [r3, #8]
}
 8004762:	bf00      	nop
 8004764:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476e:	bf00      	nop
 8004770:	51eb851f 	.word	0x51eb851f

08004774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004774:	480d      	ldr	r0, [pc, #52]	; (80047ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004776:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004778:	f7fd fc48 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800477c:	480c      	ldr	r0, [pc, #48]	; (80047b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800477e:	490d      	ldr	r1, [pc, #52]	; (80047b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <LoopForever+0xe>)
  movs r3, #0
 8004782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004784:	e002      	b.n	800478c <LoopCopyDataInit>

08004786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478a:	3304      	adds	r3, #4

0800478c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800478c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800478e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004790:	d3f9      	bcc.n	8004786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004794:	4c0a      	ldr	r4, [pc, #40]	; (80047c0 <LoopForever+0x16>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004798:	e001      	b.n	800479e <LoopFillZerobss>

0800479a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800479c:	3204      	adds	r2, #4

0800479e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800479e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a0:	d3fb      	bcc.n	800479a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047a2:	f001 ffa7 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047a6:	f7fd fa95 	bl	8001cd4 <main>

080047aa <LoopForever>:

LoopForever:
  b LoopForever
 80047aa:	e7fe      	b.n	80047aa <LoopForever>
  ldr   r0, =_estack
 80047ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80047b8:	080073cc 	.word	0x080073cc
  ldr r2, =_sbss
 80047bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80047c0:	200001e8 	.word	0x200001e8

080047c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047c4:	e7fe      	b.n	80047c4 <ADC_IRQHandler>

080047c6 <prv_out_fn_print>:
 * \param[in]       p: LwPRINTF internal instance
 * \param[in]       c: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* p, const char c) {
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
    if (p->is_print_cancelled) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7e1b      	ldrb	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <prv_out_fn_print+0x18>
        return 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	e01a      	b.n	8004814 <prv_out_fn_print+0x4e>
    }
    if (!p->lw->out_fn(c, p->lw)) { /*!< Send character to output */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	78f8      	ldrb	r0, [r7, #3]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	4611      	mov	r1, r2
 80047ec:	4798      	blx	r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <prv_out_fn_print+0x34>
        p->is_print_cancelled = 1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	761a      	strb	r2, [r3, #24]
    }
    if (c != '\0' && !p->is_print_cancelled) {
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <prv_out_fn_print+0x4c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	7e1b      	ldrb	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <prv_out_fn_print+0x4c>
        ++p->n;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8004812:	2301      	movs	r3, #1
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    const char* fmt = *format;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
    int n = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

    for (; CHARISNUM(*fmt); ++fmt) {
 800482e:	e00d      	b.n	800484c <prv_parse_num+0x30>
        n = 10 * n + CHARTONUM(*fmt);
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	3b30      	subs	r3, #48	; 0x30
 8004842:	4413      	add	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]
    for (; CHARISNUM(*fmt); ++fmt) {
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b2f      	cmp	r3, #47	; 0x2f
 8004852:	d903      	bls.n	800485c <prv_parse_num+0x40>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b39      	cmp	r3, #57	; 0x39
 800485a:	d9e9      	bls.n	8004830 <prv_parse_num+0x14>
    }
    *format = fmt;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]
    return n;
 8004862:	68bb      	ldr	r3, [r7, #8]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <prv_out_str_before>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* p, size_t buff_size) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (p->m.width > 0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd12      	ble.n	80048a8 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (p->m.flags.is_negative || p->m.flags.plus)) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7f5b      	ldrb	r3, [r3, #29]
 8004886:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <prv_out_str_before+0x2e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7f1b      	ldrb	r3, [r3, #28]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <prv_out_str_before+0x38>
        --p->m.width;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	1e5a      	subs	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check for alternate mode */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7f1b      	ldrb	r3, [r3, #28]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d02c      	beq.n	8004910 <prv_out_str_before+0xa0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7f9b      	ldrb	r3, [r3, #30]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d125      	bne.n	8004910 <prv_out_str_before+0xa0>
        if (p->m.base == 8) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d109      	bne.n	80048e2 <prv_out_str_before+0x72>
            if (p->m.width > 0) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	dd1c      	ble.n	8004910 <prv_out_str_before+0xa0>
                --p->m.width;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
 80048e0:	e016      	b.n	8004910 <prv_out_str_before+0xa0>
            }
        } else if (p->m.base == 16 || p->m.base == 2) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d004      	beq.n	80048f6 <prv_out_str_before+0x86>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d10c      	bne.n	8004910 <prv_out_str_before+0xa0>
            if (p->m.width >= 2) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	dd05      	ble.n	800490a <prv_out_str_before+0x9a>
                p->m.width -= 2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1e9a      	subs	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
 8004908:	e002      	b.n	8004910 <prv_out_str_before+0xa0>
            } else {
                p->m.width = 0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (p->m.flags.zero) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7f1b      	ldrb	r3, [r3, #28]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d025      	beq.n	800496a <prv_out_str_before+0xfa>
        if (p->m.flags.is_negative) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7f5b      	ldrb	r3, [r3, #29]
 8004922:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <prv_out_str_before+0xc8>
            p->out_fn(p, '-');
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	212d      	movs	r1, #45	; 0x2d
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
 8004936:	e018      	b.n	800496a <prv_out_str_before+0xfa>
        } else if (p->m.flags.plus) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7f1b      	ldrb	r3, [r3, #28]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <prv_out_str_before+0xe2>
            p->out_fn(p, '+');
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	212b      	movs	r1, #43	; 0x2b
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e00b      	b.n	800496a <prv_out_str_before+0xfa>
        } else if (p->m.flags.space) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7f1b      	ldrb	r3, [r3, #28]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <prv_out_str_before+0xfa>
            p->out_fn(p, ' ');
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2120      	movs	r1, #32
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7f1b      	ldrb	r3, [r3, #28]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d044      	beq.n	8004a02 <prv_out_str_before+0x192>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7f9b      	ldrb	r3, [r3, #30]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d13d      	bne.n	8004a02 <prv_out_str_before+0x192>
        if (p->m.base == 8) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498c:	2b08      	cmp	r3, #8
 800498e:	d105      	bne.n	800499c <prv_out_str_before+0x12c>
            p->out_fn(p, '0');
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	2130      	movs	r1, #48	; 0x30
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
 800499a:	e032      	b.n	8004a02 <prv_out_str_before+0x192>
        } else if (p->m.base == 16) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d114      	bne.n	80049d0 <prv_out_str_before+0x160>
            p->out_fn(p, '0');
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	2130      	movs	r1, #48	; 0x30
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'X' : 'x');
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	7f52      	ldrb	r2, [r2, #29]
 80049b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	2a00      	cmp	r2, #0
 80049c0:	d001      	beq.n	80049c6 <prv_out_str_before+0x156>
 80049c2:	2258      	movs	r2, #88	; 0x58
 80049c4:	e000      	b.n	80049c8 <prv_out_str_before+0x158>
 80049c6:	2278      	movs	r2, #120	; 0x78
 80049c8:	4611      	mov	r1, r2
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
 80049ce:	e018      	b.n	8004a02 <prv_out_str_before+0x192>
        } else if (p->m.base == 2) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d113      	bne.n	8004a02 <prv_out_str_before+0x192>
            p->out_fn(p, '0');
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2130      	movs	r1, #48	; 0x30
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'B' : 'b');
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	7f52      	ldrb	r2, [r2, #29]
 80049ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	d001      	beq.n	80049fa <prv_out_str_before+0x18a>
 80049f6:	2242      	movs	r2, #66	; 0x42
 80049f8:	e000      	b.n	80049fc <prv_out_str_before+0x18c>
 80049fa:	2262      	movs	r2, #98	; 0x62
 80049fc:	4611      	mov	r1, r2
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!p->m.flags.left_align && p->m.width > 0) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7f1b      	ldrb	r3, [r3, #28]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d125      	bne.n	8004a5c <prv_out_str_before+0x1ec>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dd21      	ble.n	8004a5c <prv_out_str_before+0x1ec>
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e011      	b.n	8004a42 <prv_out_str_before+0x1d2>
            p->out_fn(p, p->m.flags.zero ? '0' : ' ');
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	7f12      	ldrb	r2, [r2, #28]
 8004a26:	f002 0208 	and.w	r2, r2, #8
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	d001      	beq.n	8004a34 <prv_out_str_before+0x1c4>
 8004a30:	2230      	movs	r2, #48	; 0x30
 8004a32:	e000      	b.n	8004a36 <prv_out_str_before+0x1c6>
 8004a34:	2220      	movs	r2, #32
 8004a36:	4611      	mov	r1, r2
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7f1b      	ldrb	r3, [r3, #28]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <prv_out_str_before+0x1ec>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	461a      	mov	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d3e0      	bcc.n	8004a1e <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!p->m.flags.zero) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	7f1b      	ldrb	r3, [r3, #28]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d12b      	bne.n	8004ac2 <prv_out_str_before+0x252>
        if (p->m.flags.is_negative) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7f5b      	ldrb	r3, [r3, #29]
 8004a6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <prv_out_str_before+0x214>
            p->out_fn(p, '-');
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	212d      	movs	r1, #45	; 0x2d
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e01e      	b.n	8004ac2 <prv_out_str_before+0x252>
        } else if (p->m.flags.plus) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7f1b      	ldrb	r3, [r3, #28]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <prv_out_str_before+0x22e>
            p->out_fn(p, '+');
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	212b      	movs	r1, #43	; 0x2b
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
 8004a9c:	e011      	b.n	8004ac2 <prv_out_str_before+0x252>
        } else if (p->m.flags.space && buff_size >= (size_t)p->m.width) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7f1b      	ldrb	r3, [r3, #28]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <prv_out_str_before+0x252>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d304      	bcc.n	8004ac2 <prv_out_str_before+0x252>
            p->out_fn(p, ' ');
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2120      	movs	r1, #32
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
        }
    }

    return 1;
 8004ac2:	2301      	movs	r3, #1
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prv_out_str_after>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* p, size_t buff_size) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (p->m.flags.left_align) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7f1b      	ldrb	r3, [r3, #28]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <prv_out_str_after+0x3a>
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e007      	b.n	8004afa <prv_out_str_after+0x2e>
            p->out_fn(p, ' ');
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2120      	movs	r1, #32
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d3f1      	bcc.n	8004aea <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8004b06:	2301      	movs	r3, #1
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < buff_size; ++i) {
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e00b      	b.n	8004b3a <prv_out_str_raw+0x2a>
        p->out_fn(p, buff[i]);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	4798      	blx	r3
    for (size_t i = 0; i < buff_size; ++i) {
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3301      	adds	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d3ef      	bcc.n	8004b22 <prv_out_str_raw+0x12>
    }
    return 1;
 8004b42:	2301      	movs	r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
    prv_out_str_before(p, buff_size);    /* Implement pre-format */
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fe88 	bl	8004870 <prv_out_str_before>
    prv_out_str_raw(p, buff, buff_size); /* Print actual string */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff ffd3 	bl	8004b10 <prv_out_str_raw>
    prv_out_str_after(p, buff_size);     /* Implement post-format */
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ffad 	bl	8004acc <prv_out_str_after>

    return 1;
 8004b72:	2301      	movs	r3, #1
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prv_unsigned_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_int_to_str(lwprintf_int_t* p, unsigned int num) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned int, num);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2d9      	uxtb	r1, r3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	7f93      	ldrb	r3, [r2, #30]
 8004b96:	f361 0300 	bfi	r3, r1, #0, #1
 8004b9a:	7793      	strb	r3, [r2, #30]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <prv_unsigned_int_to_str+0x42>
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fe63 	bl	8004870 <prv_out_str_before>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2130      	movs	r1, #48	; 0x30
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff88 	bl	8004acc <prv_out_str_after>
 8004bbc:	e063      	b.n	8004c86 <prv_unsigned_int_to_str+0x10a>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	74fb      	strb	r3, [r7, #19]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e00a      	b.n	8004bde <prv_unsigned_int_to_str+0x62>
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	74fb      	strb	r3, [r7, #19]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f1      	bne.n	8004bc8 <prv_unsigned_int_to_str+0x4c>
 8004be4:	2301      	movs	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e007      	b.n	8004bfa <prv_unsigned_int_to_str+0x7e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d2ee      	bcs.n	8004bea <prv_unsigned_int_to_str+0x6e>
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fe2d 	bl	8004870 <prv_out_str_before>
 8004c16:	e02e      	b.n	8004c76 <prv_unsigned_int_to_str+0xfa>
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c2a:	6979      	ldr	r1, [r7, #20]
 8004c2c:	fb01 f202 	mul.w	r2, r1, r2
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	d90a      	bls.n	8004c64 <prv_unsigned_int_to_str+0xe8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7f5b      	ldrb	r3, [r3, #29]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <prv_unsigned_int_to_str+0xe4>
 8004c5c:	2337      	movs	r3, #55	; 0x37
 8004c5e:	e002      	b.n	8004c66 <prv_unsigned_int_to_str+0xea>
 8004c60:	2357      	movs	r3, #87	; 0x57
 8004c62:	e000      	b.n	8004c66 <prv_unsigned_int_to_str+0xea>
 8004c64:	2330      	movs	r3, #48	; 0x30
 8004c66:	4413      	add	r3, r2
 8004c68:	72fb      	strb	r3, [r7, #11]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	7afa      	ldrb	r2, [r7, #11]
 8004c70:	4611      	mov	r1, r2
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1cd      	bne.n	8004c18 <prv_unsigned_int_to_str+0x9c>
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ff23 	bl	8004acc <prv_out_str_after>
    return 1;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prv_unsigned_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_long_int_to_str(lwprintf_int_t* p, unsigned long int num) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned long int, num);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2d9      	uxtb	r1, r3
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	7f93      	ldrb	r3, [r2, #30]
 8004caa:	f361 0300 	bfi	r3, r1, #0, #1
 8004cae:	7793      	strb	r3, [r2, #30]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <prv_unsigned_long_int_to_str+0x42>
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fdd9 	bl	8004870 <prv_out_str_before>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2130      	movs	r1, #48	; 0x30
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
 8004cc8:	2101      	movs	r1, #1
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fefe 	bl	8004acc <prv_out_str_after>
 8004cd0:	e063      	b.n	8004d9a <prv_unsigned_long_int_to_str+0x10a>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	74fb      	strb	r3, [r7, #19]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e00a      	b.n	8004cf2 <prv_unsigned_long_int_to_str+0x62>
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	74fb      	strb	r3, [r7, #19]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce8:	461a      	mov	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f1      	bne.n	8004cdc <prv_unsigned_long_int_to_str+0x4c>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e007      	b.n	8004d0e <prv_unsigned_long_int_to_str+0x7e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d04:	461a      	mov	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d2ee      	bcs.n	8004cfe <prv_unsigned_long_int_to_str+0x6e>
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fda3 	bl	8004870 <prv_out_str_before>
 8004d2a:	e02e      	b.n	8004d8a <prv_unsigned_long_int_to_str+0xfa>
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	fb01 f202 	mul.w	r2, r1, r2
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d4e:	461a      	mov	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b09      	cmp	r3, #9
 8004d60:	d90a      	bls.n	8004d78 <prv_unsigned_long_int_to_str+0xe8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7f5b      	ldrb	r3, [r3, #29]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <prv_unsigned_long_int_to_str+0xe4>
 8004d70:	2337      	movs	r3, #55	; 0x37
 8004d72:	e002      	b.n	8004d7a <prv_unsigned_long_int_to_str+0xea>
 8004d74:	2357      	movs	r3, #87	; 0x57
 8004d76:	e000      	b.n	8004d7a <prv_unsigned_long_int_to_str+0xea>
 8004d78:	2330      	movs	r3, #48	; 0x30
 8004d7a:	4413      	add	r3, r2
 8004d7c:	72fb      	strb	r3, [r7, #11]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	7afa      	ldrb	r2, [r7, #11]
 8004d84:	4611      	mov	r1, r2
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1cd      	bne.n	8004d2c <prv_unsigned_long_int_to_str+0x9c>
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fe99 	bl	8004acc <prv_out_str_after>
    return 1;
 8004d9a:	2301      	movs	r3, #1
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prv_unsigned_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_longlong_int_to_str(lwprintf_int_t* p, unsigned long long int num) {
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b090      	sub	sp, #64	; 0x40
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	61f8      	str	r0, [r7, #28]
 8004dae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(unsigned long long int, num);
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2d9      	uxtb	r1, r3
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	7f93      	ldrb	r3, [r2, #30]
 8004dc6:	f361 0300 	bfi	r3, r1, #0, #1
 8004dca:	7793      	strb	r3, [r2, #30]
 8004dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d10d      	bne.n	8004df0 <prv_unsigned_longlong_int_to_str+0x4c>
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	69f8      	ldr	r0, [r7, #28]
 8004dd8:	f7ff fd4a 	bl	8004870 <prv_out_str_before>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2130      	movs	r1, #48	; 0x30
 8004de2:	69f8      	ldr	r0, [r7, #28]
 8004de4:	4798      	blx	r3
 8004de6:	2101      	movs	r1, #1
 8004de8:	69f8      	ldr	r0, [r7, #28]
 8004dea:	f7ff fe6f 	bl	8004acc <prv_out_str_after>
 8004dee:	e0a4      	b.n	8004f3a <prv_unsigned_longlong_int_to_str+0x196>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004df6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004dfe:	e015      	b.n	8004e2c <prv_unsigned_longlong_int_to_str+0x88>
 8004e00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e04:	3301      	adds	r3, #1
 8004e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2200      	movs	r2, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	60fa      	str	r2, [r7, #12]
 8004e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e20:	f7fb fe88 	bl	8000b34 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e30:	4313      	orrs	r3, r2
 8004e32:	d1e5      	bne.n	8004e00 <prv_unsigned_longlong_int_to_str+0x5c>
 8004e34:	f04f 0201 	mov.w	r2, #1
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004e40:	e016      	b.n	8004e70 <prv_unsigned_longlong_int_to_str+0xcc>
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4698      	mov	r8, r3
 8004e4e:	4691      	mov	r9, r2
 8004e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e52:	fb08 f203 	mul.w	r2, r8, r3
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	fb09 f303 	mul.w	r3, r9, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e60:	fba2 4508 	umull	r4, r5, r2, r8
 8004e64:	442b      	add	r3, r5
 8004e66:	461d      	mov	r5, r3
 8004e68:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8004e6c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8004e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e78:	f7fb fe5c 	bl	8000b34 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004e86:	b2c9      	uxtb	r1, r1
 8004e88:	2000      	movs	r0, #0
 8004e8a:	468a      	mov	sl, r1
 8004e8c:	4683      	mov	fp, r0
 8004e8e:	4552      	cmp	r2, sl
 8004e90:	eb73 030b 	sbcs.w	r3, r3, fp
 8004e94:	d2d5      	bcs.n	8004e42 <prv_unsigned_longlong_int_to_str+0x9e>
 8004e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	69f8      	ldr	r0, [r7, #28]
 8004e9e:	f7ff fce7 	bl	8004870 <prv_out_str_before>
 8004ea2:	e040      	b.n	8004f26 <prv_unsigned_longlong_int_to_str+0x182>
 8004ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eac:	f7fb fe42 	bl	8000b34 <__aeabi_uldivmod>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004eb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec0:	f7fb fe38 	bl	8000b34 <__aeabi_uldivmod>
 8004ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004ede:	f7fb fe29 	bl	8000b34 <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004eea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef2:	2a0a      	cmp	r2, #10
 8004ef4:	f173 0300 	sbcs.w	r3, r3, #0
 8004ef8:	d30a      	bcc.n	8004f10 <prv_unsigned_longlong_int_to_str+0x16c>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	7f5b      	ldrb	r3, [r3, #29]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <prv_unsigned_longlong_int_to_str+0x168>
 8004f08:	2337      	movs	r3, #55	; 0x37
 8004f0a:	e002      	b.n	8004f12 <prv_unsigned_longlong_int_to_str+0x16e>
 8004f0c:	2357      	movs	r3, #87	; 0x57
 8004f0e:	e000      	b.n	8004f12 <prv_unsigned_longlong_int_to_str+0x16e>
 8004f10:	2330      	movs	r3, #48	; 0x30
 8004f12:	440b      	add	r3, r1
 8004f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f20:	4611      	mov	r1, r2
 8004f22:	69f8      	ldr	r0, [r7, #28]
 8004f24:	4798      	blx	r3
 8004f26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	d1ba      	bne.n	8004ea4 <prv_unsigned_longlong_int_to_str+0x100>
 8004f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f32:	4619      	mov	r1, r3
 8004f34:	69f8      	ldr	r0, [r7, #28]
 8004f36:	f7ff fdc9 	bl	8004acc <prv_out_str_after>
    return 1;
 8004f3a:	2301      	movs	r3, #1
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3740      	adds	r7, #64	; 0x40
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f46 <prv_uintptr_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_uintptr_to_str(lwprintf_int_t* p, uintptr_t num) {
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(uintptr_t, num);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2d9      	uxtb	r1, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	7f93      	ldrb	r3, [r2, #30]
 8004f60:	f361 0300 	bfi	r3, r1, #0, #1
 8004f64:	7793      	strb	r3, [r2, #30]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <prv_uintptr_to_str+0x42>
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fc7e 	bl	8004870 <prv_out_str_before>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2130      	movs	r1, #48	; 0x30
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
 8004f7e:	2101      	movs	r1, #1
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fda3 	bl	8004acc <prv_out_str_after>
 8004f86:	e063      	b.n	8005050 <prv_uintptr_to_str+0x10a>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	74fb      	strb	r3, [r7, #19]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e00a      	b.n	8004fa8 <prv_uintptr_to_str+0x62>
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	3301      	adds	r3, #1
 8004f96:	74fb      	strb	r3, [r7, #19]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f1      	bne.n	8004f92 <prv_uintptr_to_str+0x4c>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e007      	b.n	8004fc4 <prv_uintptr_to_str+0x7e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fba:	461a      	mov	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d2ee      	bcs.n	8004fb4 <prv_uintptr_to_str+0x6e>
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fc48 	bl	8004870 <prv_out_str_before>
 8004fe0:	e02e      	b.n	8005040 <prv_uintptr_to_str+0xfa>
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	fb01 f202 	mul.w	r2, r1, r2
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005004:	461a      	mov	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	fbb3 f3f2 	udiv	r3, r3, r2
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b09      	cmp	r3, #9
 8005016:	d90a      	bls.n	800502e <prv_uintptr_to_str+0xe8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	7f5b      	ldrb	r3, [r3, #29]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <prv_uintptr_to_str+0xe4>
 8005026:	2337      	movs	r3, #55	; 0x37
 8005028:	e002      	b.n	8005030 <prv_uintptr_to_str+0xea>
 800502a:	2357      	movs	r3, #87	; 0x57
 800502c:	e000      	b.n	8005030 <prv_uintptr_to_str+0xea>
 800502e:	2330      	movs	r3, #48	; 0x30
 8005030:	4413      	add	r3, r2
 8005032:	72fb      	strb	r3, [r7, #11]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	7afa      	ldrb	r2, [r7, #11]
 800503a:	4611      	mov	r1, r2
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1cd      	bne.n	8004fe2 <prv_uintptr_to_str+0x9c>
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fd3e 	bl	8004acc <prv_out_str_after>
    return 1;
 8005050:	2301      	movs	r3, #1
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <prv_sizet_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_sizet_to_str(lwprintf_int_t* p, size_t num) {
 800505a:	b580      	push	{r7, lr}
 800505c:	b086      	sub	sp, #24
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(size_t, num);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2d9      	uxtb	r1, r3
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	7f93      	ldrb	r3, [r2, #30]
 8005074:	f361 0300 	bfi	r3, r1, #0, #1
 8005078:	7793      	strb	r3, [r2, #30]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <prv_sizet_to_str+0x42>
 8005080:	2101      	movs	r1, #1
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fbf4 	bl	8004870 <prv_out_str_before>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	2130      	movs	r1, #48	; 0x30
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
 8005092:	2101      	movs	r1, #1
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fd19 	bl	8004acc <prv_out_str_after>
 800509a:	e063      	b.n	8005164 <prv_sizet_to_str+0x10a>
 800509c:	2300      	movs	r3, #0
 800509e:	74fb      	strb	r3, [r7, #19]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e00a      	b.n	80050bc <prv_sizet_to_str+0x62>
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	3301      	adds	r3, #1
 80050aa:	74fb      	strb	r3, [r7, #19]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b2:	461a      	mov	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f1      	bne.n	80050a6 <prv_sizet_to_str+0x4c>
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e007      	b.n	80050d8 <prv_sizet_to_str+0x7e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ce:	461a      	mov	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d2ee      	bcs.n	80050c8 <prv_sizet_to_str+0x6e>
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fbbe 	bl	8004870 <prv_out_str_before>
 80050f4:	e02e      	b.n	8005154 <prv_sizet_to_str+0xfa>
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	fbb3 f2f2 	udiv	r2, r3, r2
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	fb01 f202 	mul.w	r2, r1, r2
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005118:	461a      	mov	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b09      	cmp	r3, #9
 800512a:	d90a      	bls.n	8005142 <prv_sizet_to_str+0xe8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	7f5b      	ldrb	r3, [r3, #29]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <prv_sizet_to_str+0xe4>
 800513a:	2337      	movs	r3, #55	; 0x37
 800513c:	e002      	b.n	8005144 <prv_sizet_to_str+0xea>
 800513e:	2357      	movs	r3, #87	; 0x57
 8005140:	e000      	b.n	8005144 <prv_sizet_to_str+0xea>
 8005142:	2330      	movs	r3, #48	; 0x30
 8005144:	4413      	add	r3, r2
 8005146:	72fb      	strb	r3, [r7, #11]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	7afa      	ldrb	r2, [r7, #11]
 800514e:	4611      	mov	r1, r2
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1cd      	bne.n	80050f6 <prv_sizet_to_str+0x9c>
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff fcb4 	bl	8004acc <prv_out_str_after>
    return 1;
 8005164:	2301      	movs	r3, #1
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <prv_umaxt_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_umaxt_to_str(lwprintf_int_t* p, uintmax_t num) {
 800516e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005172:	b090      	sub	sp, #64	; 0x40
 8005174:	af00      	add	r7, sp, #0
 8005176:	61f8      	str	r0, [r7, #28]
 8005178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(uintmax_t, num);
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf0c      	ite	eq
 8005186:	2301      	moveq	r3, #1
 8005188:	2300      	movne	r3, #0
 800518a:	b2d9      	uxtb	r1, r3
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	7f93      	ldrb	r3, [r2, #30]
 8005190:	f361 0300 	bfi	r3, r1, #0, #1
 8005194:	7793      	strb	r3, [r2, #30]
 8005196:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	d10d      	bne.n	80051ba <prv_umaxt_to_str+0x4c>
 800519e:	2101      	movs	r1, #1
 80051a0:	69f8      	ldr	r0, [r7, #28]
 80051a2:	f7ff fb65 	bl	8004870 <prv_out_str_before>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2130      	movs	r1, #48	; 0x30
 80051ac:	69f8      	ldr	r0, [r7, #28]
 80051ae:	4798      	blx	r3
 80051b0:	2101      	movs	r1, #1
 80051b2:	69f8      	ldr	r0, [r7, #28]
 80051b4:	f7ff fc8a 	bl	8004acc <prv_out_str_after>
 80051b8:	e0a4      	b.n	8005304 <prv_umaxt_to_str+0x196>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80051c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80051c8:	e015      	b.n	80051f6 <prv_umaxt_to_str+0x88>
 80051ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051ce:	3301      	adds	r3, #1
 80051d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2200      	movs	r2, #0
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	60fa      	str	r2, [r7, #12]
 80051e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80051ea:	f7fb fca3 	bl	8000b34 <__aeabi_uldivmod>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80051f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d1e5      	bne.n	80051ca <prv_umaxt_to_str+0x5c>
 80051fe:	f04f 0201 	mov.w	r2, #1
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800520a:	e016      	b.n	800523a <prv_umaxt_to_str+0xcc>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2200      	movs	r2, #0
 8005216:	4698      	mov	r8, r3
 8005218:	4691      	mov	r9, r2
 800521a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521c:	fb08 f203 	mul.w	r2, r8, r3
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	fb09 f303 	mul.w	r3, r9, r3
 8005226:	4413      	add	r3, r2
 8005228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522a:	fba2 4508 	umull	r4, r5, r2, r8
 800522e:	442b      	add	r3, r5
 8005230:	461d      	mov	r5, r3
 8005232:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8005236:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800523a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800523e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005242:	f7fb fc77 	bl	8000b34 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8005250:	b2c9      	uxtb	r1, r1
 8005252:	2000      	movs	r0, #0
 8005254:	468a      	mov	sl, r1
 8005256:	4683      	mov	fp, r0
 8005258:	4552      	cmp	r2, sl
 800525a:	eb73 030b 	sbcs.w	r3, r3, fp
 800525e:	d2d5      	bcs.n	800520c <prv_umaxt_to_str+0x9e>
 8005260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005264:	4619      	mov	r1, r3
 8005266:	69f8      	ldr	r0, [r7, #28]
 8005268:	f7ff fb02 	bl	8004870 <prv_out_str_before>
 800526c:	e040      	b.n	80052f0 <prv_umaxt_to_str+0x182>
 800526e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005272:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005276:	f7fb fc5d 	bl	8000b34 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005282:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005286:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800528a:	f7fb fc53 	bl	8000b34 <__aeabi_uldivmod>
 800528e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2200      	movs	r2, #0
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80052a8:	f7fb fc44 	bl	8000b34 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80052b4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80052b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052bc:	2a0a      	cmp	r2, #10
 80052be:	f173 0300 	sbcs.w	r3, r3, #0
 80052c2:	d30a      	bcc.n	80052da <prv_umaxt_to_str+0x16c>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	7f5b      	ldrb	r3, [r3, #29]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <prv_umaxt_to_str+0x168>
 80052d2:	2337      	movs	r3, #55	; 0x37
 80052d4:	e002      	b.n	80052dc <prv_umaxt_to_str+0x16e>
 80052d6:	2357      	movs	r3, #87	; 0x57
 80052d8:	e000      	b.n	80052dc <prv_umaxt_to_str+0x16e>
 80052da:	2330      	movs	r3, #48	; 0x30
 80052dc:	440b      	add	r3, r1
 80052de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80052ea:	4611      	mov	r1, r2
 80052ec:	69f8      	ldr	r0, [r7, #28]
 80052ee:	4798      	blx	r3
 80052f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052f4:	4313      	orrs	r3, r2
 80052f6:	d1ba      	bne.n	800526e <prv_umaxt_to_str+0x100>
 80052f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052fc:	4619      	mov	r1, r3
 80052fe:	69f8      	ldr	r0, [r7, #28]
 8005300:	f7ff fbe4 	bl	8004acc <prv_out_str_after>
    return 1;
 8005304:	2301      	movs	r3, #1
}
 8005306:	4618      	mov	r0, r3
 8005308:	3740      	adds	r7, #64	; 0x40
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005310 <prv_signed_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_int_to_str(lwprintf_int_t* p, signed int num) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da07      	bge.n	8005330 <prv_signed_int_to_str+0x20>
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	7f53      	ldrb	r3, [r2, #29]
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	7753      	strb	r3, [r2, #29]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	425b      	negs	r3, r3
 800532e:	603b      	str	r3, [r7, #0]
    return prv_unsigned_int_to_str(p, num);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fc21 	bl	8004b7c <prv_unsigned_int_to_str>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prv_signed_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_long_int_to_str(lwprintf_int_t* p, signed long int num) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	da07      	bge.n	8005364 <prv_signed_long_int_to_str+0x20>
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	7f53      	ldrb	r3, [r2, #29]
 8005358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535c:	7753      	strb	r3, [r2, #29]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	425b      	negs	r3, r3
 8005362:	603b      	str	r3, [r7, #0]
    return prv_unsigned_long_int_to_str(p, num);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fc91 	bl	8004c90 <prv_unsigned_long_int_to_str>
 800536e:	4603      	mov	r3, r0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <prv_signed_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_longlong_int_to_str(lwprintf_int_t* p, signed long long int num) {
 8005378:	b5b0      	push	{r4, r5, r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(p, num);
 8005384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da0c      	bge.n	80053a6 <prv_signed_longlong_int_to_str+0x2e>
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	7f53      	ldrb	r3, [r2, #29]
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	7753      	strb	r3, [r2, #29]
 8005396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539a:	2100      	movs	r1, #0
 800539c:	4254      	negs	r4, r2
 800539e:	eb61 0503 	sbc.w	r5, r1, r3
 80053a2:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_unsigned_longlong_int_to_str(p, num);
 80053a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff fcfa 	bl	8004da4 <prv_unsigned_longlong_int_to_str>
 80053b0:	4603      	mov	r3, r0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bdb0      	pop	{r4, r5, r7, pc}
 80053ba:	0000      	movs	r0, r0
 80053bc:	0000      	movs	r0, r0
	...

080053c0 <prv_calculate_dbl_num_data>:
 * \param[in]       num: Input number
 * \param[in]       e: Exponent number (to normalize)
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* p, float_num_t* n, double num, uint8_t e, const char type) {
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b090      	sub	sp, #64	; 0x40
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6278      	str	r0, [r7, #36]	; 0x24
 80053ca:	6239      	str	r1, [r7, #32]
 80053cc:	ed87 0b06 	vstr	d0, [r7, #24]
 80053d0:	4611      	mov	r1, r2
 80053d2:	461a      	mov	r2, r3
 80053d4:	460b      	mov	r3, r1
 80053d6:	75fb      	strb	r3, [r7, #23]
 80053d8:	4613      	mov	r3, r2
 80053da:	75bb      	strb	r3, [r7, #22]
    memset(n, 0x00, sizeof(*n));
 80053dc:	2228      	movs	r2, #40	; 0x28
 80053de:	2100      	movs	r1, #0
 80053e0:	6a38      	ldr	r0, [r7, #32]
 80053e2:	f001 f9ab 	bl	800673c <memset>

    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	2b12      	cmp	r3, #18
 80053ec:	dd02      	ble.n	80053f4 <prv_calculate_dbl_num_data+0x34>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2212      	movs	r2, #18
 80053f2:	621a      	str	r2, [r3, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 80053f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005678 <prv_calculate_dbl_num_data+0x2b8>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053fe:	f7fa fef9 	bl	80001f4 <__adddf3>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	e9c7 2306 	strd	r2, r3, [r7, #24]
    n->integer_part = (float_long_t)num;
 800540a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800540e:	f7fb fba9 	bl	8000b64 <__aeabi_d2lz>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	6a39      	ldr	r1, [r7, #32]
 8005418:	e9c1 2300 	strd	r2, r3, [r1]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[p->m.precision];
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	f7fb f86d 	bl	8000504 <__aeabi_l2d>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005432:	f7fa fedd 	bl	80001f0 <__aeabi_dsub>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4614      	mov	r4, r2
 800543c:	461d      	mov	r5, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4a8b      	ldr	r2, [pc, #556]	; (8005670 <prv_calculate_dbl_num_data+0x2b0>)
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	f7fb f858 	bl	8000504 <__aeabi_l2d>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f7fb f880 	bl	8000560 <__aeabi_dmul>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	6a39      	ldr	r1, [r7, #32]
 8005466:	e9c1 2302 	strd	r2, r3, [r1, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	f7fb fb76 	bl	8000b64 <__aeabi_d2lz>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	6a39      	ldr	r1, [r7, #32]
 800547e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    n->diff = n->decimal_part_dbl - (float_long_t)n->decimal_part;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	f7fb f837 	bl	8000504 <__aeabi_l2d>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f7fa fea7 	bl	80001f0 <__aeabi_dsub>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	6a39      	ldr	r1, [r7, #32]
 80054a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5f) {
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	4b6f      	ldr	r3, [pc, #444]	; (8005674 <prv_calculate_dbl_num_data+0x2b4>)
 80054b8:	f7fb fae2 	bl	8000a80 <__aeabi_dcmpgt>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d02f      	beq.n	8005522 <prv_calculate_dbl_num_data+0x162>
        ++n->decimal_part;
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80054c8:	1c51      	adds	r1, r2, #1
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	f143 0300 	adc.w	r3, r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054d8:	e9c3 1204 	strd	r1, r2, [r3, #16]
        if (n->decimal_part >= powers_of_10[p->m.precision]) {
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4a62      	ldr	r2, [pc, #392]	; (8005670 <prv_calculate_dbl_num_data+0x2b0>)
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	4290      	cmp	r0, r2
 80054f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80054f6:	db39      	blt.n	800556c <prv_calculate_dbl_num_data+0x1ac>
            n->decimal_part = 0;
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9c1 2304 	strd	r2, r3, [r1, #16]
            ++n->integer_part;
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	1c51      	adds	r1, r2, #1
 800550e:	6039      	str	r1, [r7, #0]
 8005510:	f143 0300 	adc.w	r3, r3, #0
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	e9d7 1200 	ldrd	r1, r2, [r7]
 800551c:	e9c3 1200 	strd	r1, r2, [r3]
 8005520:	e024      	b.n	800556c <prv_calculate_dbl_num_data+0x1ac>
        }
    } else if (n->diff < 0.5f) {
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	4b51      	ldr	r3, [pc, #324]	; (8005674 <prv_calculate_dbl_num_data+0x2b4>)
 800552e:	f7fb fa89 	bl	8000a44 <__aeabi_dcmplt>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d119      	bne.n	800556c <prv_calculate_dbl_num_data+0x1ac>
        /* Used in separate if, since comparing float to == will certainly result to false */
    } else {
        /* Difference is exactly 0.5 */
        if (n->decimal_part == 0) {
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	d10a      	bne.n	8005558 <prv_calculate_dbl_num_data+0x198>
            ++n->integer_part;
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f112 0a01 	adds.w	sl, r2, #1
 800554c:	f143 0b00 	adc.w	fp, r3, #0
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	e9c3 ab00 	strd	sl, fp, [r3]
 8005556:	e009      	b.n	800556c <prv_calculate_dbl_num_data+0x1ac>
        } else {
            ++n->decimal_part;
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800555e:	f112 0801 	adds.w	r8, r2, #1
 8005562:	f143 0900 	adc.w	r9, r3, #0
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	e9c3 8904 	strd	r8, r9, [r3, #16]
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	4313      	orrs	r3, r2
 8005574:	d103      	bne.n	800557e <prv_calculate_dbl_num_data+0x1be>
        n->digits_cnt_integer_part = 1;
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2201      	movs	r2, #1
 800557a:	841a      	strh	r2, [r3, #32]
 800557c:	e023      	b.n	80055c6 <prv_calculate_dbl_num_data+0x206>
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	2200      	movs	r2, #0
 8005582:	841a      	strh	r2, [r3, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800558e:	e014      	b.n	80055ba <prv_calculate_dbl_num_data+0x1fa>
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005596:	b29b      	uxth	r3, r3
 8005598:	3301      	adds	r3, #1
 800559a:	b29b      	uxth	r3, r3
 800559c:	b21a      	sxth	r2, r3
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	841a      	strh	r2, [r3, #32]
 80055a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055a6:	f04f 020a 	mov.w	r2, #10
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f7fb fa71 	bl	8000a94 <__aeabi_ldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80055ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055be:	2a01      	cmp	r2, #1
 80055c0:	f173 0300 	sbcs.w	r3, r3, #0
 80055c4:	dae4      	bge.n	8005590 <prv_calculate_dbl_num_data+0x1d0>
    }
    n->digits_cnt_decimal_part = p->m.precision;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	b21a      	sxth	r2, r3
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	845a      	strh	r2, [r3, #34]	; 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 80055d0:	7dbb      	ldrb	r3, [r7, #22]
 80055d2:	2b67      	cmp	r3, #103	; 0x67
 80055d4:	d141      	bne.n	800565a <prv_calculate_dbl_num_data+0x29a>
        float_long_t tmp = n->decimal_part;
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        size_t adder, i;
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e4:	2300      	movs	r3, #0
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e8:	e02a      	b.n	8005640 <prv_calculate_dbl_num_data+0x280>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
            if (adder == 0 && (tmp % 10) > 0) {
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10d      	bne.n	800560c <prv_calculate_dbl_num_data+0x24c>
 80055f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80055f4:	f04f 020a 	mov.w	r2, #10
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	f7fb fa4a 	bl	8000a94 <__aeabi_ldivmod>
 8005600:	2a01      	cmp	r2, #1
 8005602:	f173 0300 	sbcs.w	r3, r3, #0
 8005606:	db01      	blt.n	800560c <prv_calculate_dbl_num_data+0x24c>
                adder = 1;
 8005608:	2301      	movs	r3, #1
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 800560c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005610:	f04f 020a 	mov.w	r2, #10
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	f7fb fa3c 	bl	8000a94 <__aeabi_ldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800562a:	b29a      	uxth	r2, r3
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	b29b      	uxth	r3, r3
 8005630:	4413      	add	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	b21a      	sxth	r2, r3
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	849a      	strh	r2, [r3, #36]	; 0x24
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	3301      	adds	r3, #1
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 8005640:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005644:	2a01      	cmp	r2, #1
 8005646:	f173 0300 	sbcs.w	r3, r3, #0
 800564a:	dace      	bge.n	80055ea <prv_calculate_dbl_num_data+0x22a>
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	461a      	mov	r2, r3
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	4293      	cmp	r3, r2
 8005656:	d3c8      	bcc.n	80055ea <prv_calculate_dbl_num_data+0x22a>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = p->m.precision;
    }
    (void)e;
}
 8005658:	e004      	b.n	8005664 <prv_calculate_dbl_num_data+0x2a4>
        n->digits_cnt_decimal_part_useful = p->m.precision;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	b21a      	sxth	r2, r3
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8005664:	bf00      	nop
 8005666:	3740      	adds	r7, #64	; 0x40
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	080072c0 	.word	0x080072c0
 8005674:	3fe00000 	.word	0x3fe00000
 8005678:	86a12b9b 	.word	0x86a12b9b
 800567c:	3cf6849b 	.word	0x3cf6849b

08005680 <prv_double_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* p, double in_num) {
 8005680:	b5b0      	push	{r4, r5, r7, lr}
 8005682:	b0a0      	sub	sp, #128	; 0x80
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	ed87 0b00 	vstr	d0, [r7]
    float_num_t dblnum;
    size_t i;
    double orig_num = in_num;
 800568c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005690:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    int digits_cnt, exp_cnt = 0, chosen_precision;
 8005694:	2300      	movs	r3, #0
 8005696:	677b      	str	r3, [r7, #116]	; 0x74
    char def_type = p->m.type;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800569e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 80056a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056aa:	f7fb f9c1 	bl	8000a30 <__aeabi_dcmpeq>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d110      	bne.n	80056d6 <prv_double_to_str+0x56>
        return prv_out_str(p, p->m.flags.uc ? "NAN" : "nan", 3);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	7f5b      	ldrb	r3, [r3, #29]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <prv_double_to_str+0x46>
 80056c2:	4ba7      	ldr	r3, [pc, #668]	; (8005960 <prv_double_to_str+0x2e0>)
 80056c4:	e000      	b.n	80056c8 <prv_double_to_str+0x48>
 80056c6:	4ba7      	ldr	r3, [pc, #668]	; (8005964 <prv_double_to_str+0x2e4>)
 80056c8:	2203      	movs	r2, #3
 80056ca:	4619      	mov	r1, r3
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fa3d 	bl	8004b4c <prv_out_str>
 80056d2:	4603      	mov	r3, r0
 80056d4:	e336      	b.n	8005d44 <prv_double_to_str+0x6c4>
    } else if (in_num < -DBL_MAX
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80056de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e2:	f7fb f9af 	bl	8000a44 <__aeabi_dcmplt>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d010      	beq.n	800570e <prv_double_to_str+0x8e>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(p, p->m.flags.uc ? "-INF" : "-inf", 4);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	7f5b      	ldrb	r3, [r3, #29]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <prv_double_to_str+0x7e>
 80056fa:	4b9b      	ldr	r3, [pc, #620]	; (8005968 <prv_double_to_str+0x2e8>)
 80056fc:	e000      	b.n	8005700 <prv_double_to_str+0x80>
 80056fe:	4b9b      	ldr	r3, [pc, #620]	; (800596c <prv_double_to_str+0x2ec>)
 8005700:	2204      	movs	r2, #4
 8005702:	4619      	mov	r1, r3
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fa21 	bl	8004b4c <prv_out_str>
 800570a:	4603      	mov	r3, r0
 800570c:	e31a      	b.n	8005d44 <prv_double_to_str+0x6c4>
    } else if (in_num > DBL_MAX
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	4b97      	ldr	r3, [pc, #604]	; (8005970 <prv_double_to_str+0x2f0>)
 8005714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005718:	f7fb f9b2 	bl	8000a80 <__aeabi_dcmpgt>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02e      	beq.n	8005780 <prv_double_to_str+0x100>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num > FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        char str[5], *s_ptr = str;
 8005722:	f107 0310 	add.w	r3, r7, #16
 8005726:	66bb      	str	r3, [r7, #104]	; 0x68
        if (p->m.flags.plus) {
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	7f1b      	ldrb	r3, [r3, #28]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <prv_double_to_str+0xc0>
            *s_ptr++ = '+';
 8005736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	66ba      	str	r2, [r7, #104]	; 0x68
 800573c:	222b      	movs	r2, #43	; 0x2b
 800573e:	701a      	strb	r2, [r3, #0]
        }
        strcpy(s_ptr, p->m.flags.uc ? "INF" : "inf");
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	7f5b      	ldrb	r3, [r3, #29]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <prv_double_to_str+0xd2>
 800574e:	4b89      	ldr	r3, [pc, #548]	; (8005974 <prv_double_to_str+0x2f4>)
 8005750:	e000      	b.n	8005754 <prv_double_to_str+0xd4>
 8005752:	4b89      	ldr	r3, [pc, #548]	; (8005978 <prv_double_to_str+0x2f8>)
 8005754:	4619      	mov	r1, r3
 8005756:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005758:	f001 f86e 	bl	8006838 <strcpy>
        return prv_out_str(p, str, p->m.flags.plus ? 4 : 3);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	7f1b      	ldrb	r3, [r3, #28]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <prv_double_to_str+0xee>
 800576a:	2204      	movs	r2, #4
 800576c:	e000      	b.n	8005770 <prv_double_to_str+0xf0>
 800576e:	2203      	movs	r2, #3
 8005770:	f107 0310 	add.w	r3, r7, #16
 8005774:	4619      	mov	r1, r3
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff f9e8 	bl	8004b4c <prv_out_str>
 800577c:	4603      	mov	r3, r0
 800577e:	e2e1      	b.n	8005d44 <prv_double_to_str+0x6c4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 8005780:	a371      	add	r3, pc, #452	; (adr r3, 8005948 <prv_double_to_str+0x2c8>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578a:	f7fb f95b 	bl	8000a44 <__aeabi_dcmplt>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <prv_double_to_str+0x128>
 8005794:	a36e      	add	r3, pc, #440	; (adr r3, 8005950 <prv_double_to_str+0x2d0>)
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800579e:	f7fb f96f 	bl	8000a80 <__aeabi_dcmpgt>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <prv_double_to_str+0x140>
 80057a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057ac:	2b67      	cmp	r3, #103	; 0x67
 80057ae:	d007      	beq.n	80057c0 <prv_double_to_str+0x140>
        p->m.type = def_type = 'e'; /* Go to engineering mode */
 80057b0:	2365      	movs	r3, #101	; 0x65
 80057b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80057bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#endif                              /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(p, in_num);
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057cc:	f7fb f93a 	bl	8000a44 <__aeabi_dcmplt>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <prv_double_to_str+0x16c>
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	7f53      	ldrb	r3, [r2, #29]
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	7753      	strb	r3, [r2, #29]
 80057e0:	683c      	ldr	r4, [r7, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80057e8:	e9c7 4500 	strd	r4, r5, [r7]
    orig_num = in_num;
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 80057f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057f8:	2b65      	cmp	r3, #101	; 0x65
 80057fa:	d013      	beq.n	8005824 <prv_double_to_str+0x1a4>
 80057fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005800:	2b67      	cmp	r3, #103	; 0x67
 8005802:	d00f      	beq.n	8005824 <prv_double_to_str+0x1a4>
        || in_num > (powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 8005804:	a354      	add	r3, pc, #336	; (adr r3, 8005958 <prv_double_to_str+0x2d8>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	4610      	mov	r0, r2
 800580c:	4619      	mov	r1, r3
 800580e:	f7fa fe79 	bl	8000504 <__aeabi_l2d>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800581a:	f7fb f931 	bl	8000a80 <__aeabi_dcmpgt>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d054      	beq.n	80058ce <prv_double_to_str+0x24e>
        if (p->m.type != 'g') {
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800582a:	2b67      	cmp	r3, #103	; 0x67
 800582c:	d003      	beq.n	8005836 <prv_double_to_str+0x1b6>
            p->m.type = 'e';
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2265      	movs	r2, #101	; 0x65
 8005832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	4b50      	ldr	r3, [pc, #320]	; (800597c <prv_double_to_str+0x2fc>)
 800583c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005840:	f7fb f900 	bl	8000a44 <__aeabi_dcmplt>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d026      	beq.n	8005898 <prv_double_to_str+0x218>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 800584a:	2300      	movs	r3, #0
 800584c:	677b      	str	r3, [r7, #116]	; 0x74
 800584e:	e00d      	b.n	800586c <prv_double_to_str+0x1ec>
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	4b4a      	ldr	r3, [pc, #296]	; (8005980 <prv_double_to_str+0x300>)
 8005856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800585a:	f7fa fe81 	bl	8000560 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	e9c7 2300 	strd	r2, r3, [r7]
 8005866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005868:	3b01      	subs	r3, #1
 800586a:	677b      	str	r3, [r7, #116]	; 0x74
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <prv_double_to_str+0x2fc>)
 8005872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005876:	f7fb f8e5 	bl	8000a44 <__aeabi_dcmplt>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d026      	beq.n	80058ce <prv_double_to_str+0x24e>
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800588c:	f7fb f8f8 	bl	8000a80 <__aeabi_dcmpgt>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1dc      	bne.n	8005850 <prv_double_to_str+0x1d0>
 8005896:	e01a      	b.n	80058ce <prv_double_to_str+0x24e>
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 8005898:	2300      	movs	r3, #0
 800589a:	677b      	str	r3, [r7, #116]	; 0x74
 800589c:	e00d      	b.n	80058ba <prv_double_to_str+0x23a>
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	4b37      	ldr	r3, [pc, #220]	; (8005980 <prv_double_to_str+0x300>)
 80058a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a8:	f7fa ff84 	bl	80007b4 <__aeabi_ddiv>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	e9c7 2300 	strd	r2, r3, [r7]
 80058b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b6:	3301      	adds	r3, #1
 80058b8:	677b      	str	r3, [r7, #116]	; 0x74
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	4b30      	ldr	r3, [pc, #192]	; (8005980 <prv_double_to_str+0x300>)
 80058c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c4:	f7fb f8d2 	bl	8000a6c <__aeabi_dcmpge>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e7      	bne.n	800589e <prv_double_to_str+0x21e>
        }
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Check precision data */
    chosen_precision = p->m.precision; /* This is default value coming from app */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	2b12      	cmp	r3, #18
 80058da:	dd03      	ble.n	80058e4 <prv_double_to_str+0x264>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2212      	movs	r2, #18
 80058e0:	621a      	str	r2, [r3, #32]
 80058e2:	e01f      	b.n	8005924 <prv_double_to_str+0x2a4>
        /*
         * Precision is lower than the one selected by app (or user).
         * It means that we have to append ending zeros for precision when printing data
         */
    } else if (!p->m.flags.precision) {
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	7f1b      	ldrb	r3, [r3, #28]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <prv_double_to_str+0x280>
        p->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2206      	movs	r2, #6
 80058f6:	621a      	str	r2, [r3, #32]
        chosen_precision = p->m.precision;                     /* There was no precision, update chosen precision */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	673b      	str	r3, [r7, #112]	; 0x70
 80058fe:	e011      	b.n	8005924 <prv_double_to_str+0x2a4>
    } else if (p->m.flags.precision && p->m.precision == 0) {
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	7f1b      	ldrb	r3, [r3, #28]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <prv_double_to_str+0x2a4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <prv_double_to_str+0x2a4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        /* Precision must be set to 1 if set to 0 by default */
        if (def_type == 'g') {
 8005916:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800591a:	2b67      	cmp	r3, #103	; 0x67
 800591c:	d102      	bne.n	8005924 <prv_double_to_str+0x2a4>
            p->m.precision = 1;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	621a      	str	r2, [r3, #32]
     *
     * A double argument representing an infinity or 'NaN' is converted in the style of an 'f' or 'F' conversion specifier.
     */

    /* Calculate data for number */
    prv_calculate_dbl_num_data(p, &dblnum, def_type == 'e' ? in_num : orig_num, def_type == 'e' ? 0 : exp_cnt,
 8005924:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005928:	2b65      	cmp	r3, #101	; 0x65
 800592a:	d102      	bne.n	8005932 <prv_double_to_str+0x2b2>
 800592c:	ed97 7b00 	vldr	d7, [r7]
 8005930:	e001      	b.n	8005936 <prv_double_to_str+0x2b6>
 8005932:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8005936:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800593a:	2b65      	cmp	r3, #101	; 0x65
 800593c:	d022      	beq.n	8005984 <prv_double_to_str+0x304>
 800593e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005940:	b2da      	uxtb	r2, r3
 8005942:	e020      	b.n	8005986 <prv_double_to_str+0x306>
 8005944:	f3af 8000 	nop.w
 8005948:	674ec800 	.word	0x674ec800
 800594c:	c3abc16d 	.word	0xc3abc16d
 8005950:	674ec800 	.word	0x674ec800
 8005954:	43abc16d 	.word	0x43abc16d
 8005958:	a7640000 	.word	0xa7640000
 800595c:	0de0b6b3 	.word	0x0de0b6b3
 8005960:	08007284 	.word	0x08007284
 8005964:	08007288 	.word	0x08007288
 8005968:	0800728c 	.word	0x0800728c
 800596c:	08007294 	.word	0x08007294
 8005970:	7fefffff 	.word	0x7fefffff
 8005974:	0800729c 	.word	0x0800729c
 8005978:	080072a0 	.word	0x080072a0
 800597c:	3ff00000 	.word	0x3ff00000
 8005980:	40240000 	.word	0x40240000
 8005984:	2200      	movs	r2, #0
 8005986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800598a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800598e:	eeb0 0a47 	vmov.f32	s0, s14
 8005992:	eef0 0a67 	vmov.f32	s1, s15
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fd12 	bl	80053c0 <prv_calculate_dbl_num_data>
                               def_type);
    //prv_calculate_dbl_num_data(p, &dblnum, orig_num, exp_cnt, def_type);

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Set type G */
    if (def_type == 'g') {
 800599c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80059a0:	2b67      	cmp	r3, #103	; 0x67
 80059a2:	d142      	bne.n	8005a2a <prv_double_to_str+0x3aa>
        /* As per standard to decide level of precision */
        if (exp_cnt >= -4 && exp_cnt < p->m.precision) {
 80059a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a6:	f113 0f04 	cmn.w	r3, #4
 80059aa:	db24      	blt.n	80059f6 <prv_double_to_str+0x376>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059b2:	429a      	cmp	r2, r3
 80059b4:	da1f      	bge.n	80059f6 <prv_double_to_str+0x376>
            if (p->m.precision > exp_cnt) {
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80059bc:	429a      	cmp	r2, r3
 80059be:	da0c      	bge.n	80059da <prv_double_to_str+0x35a>
                p->m.precision -= exp_cnt + 1;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c6:	3301      	adds	r3, #1
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
                chosen_precision -= exp_cnt + 1;
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	3301      	adds	r3, #1
 80059d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	673b      	str	r3, [r7, #112]	; 0x70
 80059d8:	e004      	b.n	80059e4 <prv_double_to_str+0x364>
            } else {
                p->m.precision = 0;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
                chosen_precision = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	673b      	str	r3, [r7, #112]	; 0x70
            }
            p->m.type = 'f';
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2266      	movs	r2, #102	; 0x66
 80059e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            in_num = orig_num;
 80059ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059f0:	e9c7 2300 	strd	r2, r3, [r7]
 80059f4:	e00f      	b.n	8005a16 <prv_double_to_str+0x396>
        } else {
            p->m.type = 'e';
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2265      	movs	r2, #101	; 0x65
 80059fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            if (p->m.precision > 0) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dd07      	ble.n	8005a16 <prv_double_to_str+0x396>
                --p->m.precision;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
                --chosen_precision;
 8005a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a12:	3b01      	subs	r3, #1
 8005a14:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }
        prv_calculate_dbl_num_data(p, &dblnum, in_num, 0, def_type);
 8005a16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005a1e:	2200      	movs	r2, #0
 8005a20:	ed97 0b00 	vldr	d0, [r7]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fccb 	bl	80053c0 <prv_calculate_dbl_num_data>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Set number of digits to display */
    digits_cnt = dblnum.digits_cnt_integer_part;
 8005a2a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8005a2e:	67bb      	str	r3, [r7, #120]	; 0x78
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    if (def_type == 'g' && p->m.precision > 0) {
 8005a30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005a34:	2b67      	cmp	r3, #103	; 0x67
 8005a36:	d111      	bne.n	8005a5c <prv_double_to_str+0x3dc>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dd0d      	ble.n	8005a5c <prv_double_to_str+0x3dc>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 8005a40:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005a44:	461a      	mov	r2, r3
 8005a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a48:	4413      	add	r3, r2
 8005a4a:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8005a4c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dd12      	ble.n	8005a7a <prv_double_to_str+0x3fa>
            ++digits_cnt;
 8005a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a56:	3301      	adds	r3, #1
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8005a5a:	e00e      	b.n	8005a7a <prv_double_to_str+0x3fa>
        }
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        if (chosen_precision > 0 && p->m.flags.precision) {
 8005a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dd0b      	ble.n	8005a7a <prv_double_to_str+0x3fa>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	7f1b      	ldrb	r3, [r3, #28]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <prv_double_to_str+0x3fa>
            /* Add precision digits + dot separator */
            digits_cnt += chosen_precision + 1;
 8005a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a72:	3301      	adds	r3, #1
 8005a74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a76:	4413      	add	r3, r2
 8005a78:	67bb      	str	r3, [r7, #120]	; 0x78
        }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Increase number of digits to display */
    if (p->m.type == 'e') {
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a80:	2b65      	cmp	r3, #101	; 0x65
 8005a82:	d10d      	bne.n	8005aa0 <prv_double_to_str+0x420>
        /* Format is +Exxx, so add 4 or 5 characters (max is 307, min is 00 for exponent) */
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 8005a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a86:	2b63      	cmp	r3, #99	; 0x63
 8005a88:	dc03      	bgt.n	8005a92 <prv_double_to_str+0x412>
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005a90:	da01      	bge.n	8005a96 <prv_double_to_str+0x416>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <prv_double_to_str+0x418>
 8005a96:	2300      	movs	r3, #0
 8005a98:	3304      	adds	r3, #4
 8005a9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a9c:	4413      	add	r3, r2
 8005a9e:	67bb      	str	r3, [r7, #120]	; 0x78
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Output strings */
    prv_out_str_before(p, digits_cnt);
 8005aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7fe fee3 	bl	8004870 <prv_out_str_before>

    /* Output integer part of number */
    if (dblnum.integer_part == 0) {
 8005aaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d105      	bne.n	8005abe <prv_double_to_str+0x43e>
        p->out_fn(p, '0');
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2130      	movs	r1, #48	; 0x30
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	4798      	blx	r3
 8005abc:	e03a      	b.n	8005b34 <prv_double_to_str+0x4b4>
    } else {
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8005abe:	2300      	movs	r3, #0
 8005ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ac2:	e01f      	b.n	8005b04 <prv_double_to_str+0x484>
            str[i] = '0' + (char)(dblnum.integer_part % 10);
 8005ac4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005ac8:	f04f 020a 	mov.w	r2, #10
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	f7fa ffe0 	bl	8000a94 <__aeabi_ldivmod>
 8005ad4:	b2d3      	uxtb	r3, r2
 8005ad6:	3330      	adds	r3, #48	; 0x30
 8005ad8:	b2d9      	uxtb	r1, r3
 8005ada:	f107 0218 	add.w	r2, r7, #24
 8005ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ae0:	4413      	add	r3, r2
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8005ae6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005aea:	f04f 020a 	mov.w	r2, #10
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	f7fa ffcf 	bl	8000a94 <__aeabi_ldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b00:	3301      	adds	r3, #1
 8005b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b08:	2a01      	cmp	r2, #1
 8005b0a:	f173 0300 	sbcs.w	r3, r3, #0
 8005b0e:	dad9      	bge.n	8005ac4 <prv_double_to_str+0x444>
        }
        for (; i > 0; --i) {
 8005b10:	e00d      	b.n	8005b2e <prv_double_to_str+0x4ae>
            p->out_fn(p, str[i - 1]);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	3280      	adds	r2, #128	; 0x80
 8005b1c:	443a      	add	r2, r7
 8005b1e:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8005b22:	4611      	mov	r1, r2
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	4798      	blx	r3
        for (; i > 0; --i) {
 8005b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ee      	bne.n	8005b12 <prv_double_to_str+0x492>
        }
    }

    /* Output decimal part */
    if (p->m.precision > 0) {
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f340 809b 	ble.w	8005c74 <prv_double_to_str+0x5f4>
        int x;
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8005b3e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd04      	ble.n	8005b50 <prv_double_to_str+0x4d0>
            p->out_fn(p, '.');
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	212e      	movs	r1, #46	; 0x2e
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	4798      	blx	r3
        }
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8005b50:	2300      	movs	r3, #0
 8005b52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b54:	e01f      	b.n	8005b96 <prv_double_to_str+0x516>
            str[i] = '0' + (dblnum.decimal_part % 10);
 8005b56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005b5a:	f04f 020a 	mov.w	r2, #10
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	f7fa ff97 	bl	8000a94 <__aeabi_ldivmod>
 8005b66:	b2d3      	uxtb	r3, r2
 8005b68:	3330      	adds	r3, #48	; 0x30
 8005b6a:	b2d9      	uxtb	r1, r3
 8005b6c:	f107 0218 	add.w	r2, r7, #24
 8005b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b72:	4413      	add	r3, r2
 8005b74:	460a      	mov	r2, r1
 8005b76:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8005b78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005b7c:	f04f 020a 	mov.w	r2, #10
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	f7fa ff86 	bl	8000a94 <__aeabi_ldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005b90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b92:	3301      	adds	r3, #1
 8005b94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b9a:	2a01      	cmp	r2, #1
 8005b9c:	f173 0300 	sbcs.w	r3, r3, #0
 8005ba0:	dad9      	bge.n	8005b56 <prv_double_to_str+0x4d6>
        }

        /* Output relevant zeros first, string to print is opposite way */
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        if (def_type == 'g') {
 8005ba2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ba6:	2b67      	cmp	r3, #103	; 0x67
 8005ba8:	d11f      	bne.n	8005bea <prv_double_to_str+0x56a>
            /* TODO: This is to be checked */
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	667b      	str	r3, [r7, #100]	; 0x64
 8005bae:	e00f      	b.n	8005bd0 <prv_double_to_str+0x550>
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
                p->out_fn(p, '0');
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	2130      	movs	r1, #48	; 0x30
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8005bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8005bc0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	b21b      	sxth	r3, r3
 8005bcc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bd8:	1ad2      	subs	r2, r2, r3
 8005bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d933      	bls.n	8005c48 <prv_double_to_str+0x5c8>
 8005be0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dce3      	bgt.n	8005bb0 <prv_double_to_str+0x530>
 8005be8:	e02e      	b.n	8005c48 <prv_double_to_str+0x5c8>
            }
        } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        {
            for (x = i; x < p->m.precision; ++x) {
 8005bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bec:	667b      	str	r3, [r7, #100]	; 0x64
 8005bee:	e007      	b.n	8005c00 <prv_double_to_str+0x580>
                p->out_fn(p, '0');
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	2130      	movs	r1, #48	; 0x30
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	4798      	blx	r3
            for (x = i; x < p->m.precision; ++x) {
 8005bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c06:	429a      	cmp	r2, r3
 8005c08:	dbf2      	blt.n	8005bf0 <prv_double_to_str+0x570>
            }
        }

        /* Now print string itself */
        for (; i > 0; --i) {
 8005c0a:	e01d      	b.n	8005c48 <prv_double_to_str+0x5c8>
            p->out_fn(p, str[i - 1]);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c12:	3a01      	subs	r2, #1
 8005c14:	3280      	adds	r2, #128	; 0x80
 8005c16:	443a      	add	r2, r7
 8005c18:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	4798      	blx	r3
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 8005c22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c26:	2b67      	cmp	r3, #103	; 0x67
 8005c28:	d10b      	bne.n	8005c42 <prv_double_to_str+0x5c2>
 8005c2a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b21b      	sxth	r3, r3
 8005c36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8005c3a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d006      	beq.n	8005c50 <prv_double_to_str+0x5d0>
        for (; i > 0; --i) {
 8005c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c44:	3b01      	subs	r3, #1
 8005c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1de      	bne.n	8005c0c <prv_double_to_str+0x58c>
 8005c4e:	e000      	b.n	8005c52 <prv_double_to_str+0x5d2>
                break;
 8005c50:	bf00      	nop
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        }

        /* Print ending zeros if selected precision is bigger than maximum supported */
        if (def_type != 'g') {
 8005c52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c56:	2b67      	cmp	r3, #103	; 0x67
 8005c58:	d00c      	beq.n	8005c74 <prv_double_to_str+0x5f4>
            for (; x < chosen_precision; ++x) {
 8005c5a:	e007      	b.n	8005c6c <prv_double_to_str+0x5ec>
                p->out_fn(p, '0');
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2130      	movs	r1, #48	; 0x30
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 8005c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c68:	3301      	adds	r3, #1
 8005c6a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dbf3      	blt.n	8005c5c <prv_double_to_str+0x5dc>
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode output, add exponent part */
    if (p->m.type == 'e') {
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c7a:	2b65      	cmp	r3, #101	; 0x65
 8005c7c:	d15c      	bne.n	8005d38 <prv_double_to_str+0x6b8>
        p->out_fn(p, p->m.flags.uc ? 'E' : 'e');
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	7f52      	ldrb	r2, [r2, #29]
 8005c86:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d001      	beq.n	8005c94 <prv_double_to_str+0x614>
 8005c90:	2245      	movs	r2, #69	; 0x45
 8005c92:	e000      	b.n	8005c96 <prv_double_to_str+0x616>
 8005c94:	2265      	movs	r2, #101	; 0x65
 8005c96:	4611      	mov	r1, r2
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	4798      	blx	r3
        p->out_fn(p, exp_cnt >= 0 ? '+' : '-');
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	db01      	blt.n	8005caa <prv_double_to_str+0x62a>
 8005ca6:	222b      	movs	r2, #43	; 0x2b
 8005ca8:	e000      	b.n	8005cac <prv_double_to_str+0x62c>
 8005caa:	222d      	movs	r2, #45	; 0x2d
 8005cac:	4611      	mov	r1, r2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
        if (exp_cnt < 0) {
 8005cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da02      	bge.n	8005cbe <prv_double_to_str+0x63e>
            exp_cnt = -exp_cnt;
 8005cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cba:	425b      	negs	r3, r3
 8005cbc:	677b      	str	r3, [r7, #116]	; 0x74
        }
        if (exp_cnt >= 100) {
 8005cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc0:	2b63      	cmp	r3, #99	; 0x63
 8005cc2:	dd16      	ble.n	8005cf2 <prv_double_to_str+0x672>
            p->out_fn(p, '0' + (char)(exp_cnt / 100));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cca:	4920      	ldr	r1, [pc, #128]	; (8005d4c <prv_double_to_str+0x6cc>)
 8005ccc:	fb81 0103 	smull	r0, r1, r1, r3
 8005cd0:	1149      	asrs	r1, r1, #5
 8005cd2:	17db      	asrs	r3, r3, #31
 8005cd4:	1acb      	subs	r3, r1, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	3330      	adds	r3, #48	; 0x30
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	4790      	blx	r2
            exp_cnt /= 100;
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <prv_double_to_str+0x6cc>)
 8005ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8005cea:	1152      	asrs	r2, r2, #5
 8005cec:	17db      	asrs	r3, r3, #31
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	677b      	str	r3, [r7, #116]	; 0x74
        }
        p->out_fn(p, '0' + (char)(exp_cnt / 10));
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf8:	4915      	ldr	r1, [pc, #84]	; (8005d50 <prv_double_to_str+0x6d0>)
 8005cfa:	fb81 0103 	smull	r0, r1, r1, r3
 8005cfe:	1089      	asrs	r1, r1, #2
 8005d00:	17db      	asrs	r3, r3, #31
 8005d02:	1acb      	subs	r3, r1, r3
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	3330      	adds	r3, #48	; 0x30
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	4790      	blx	r2
        p->out_fn(p, '0' + (char)(exp_cnt % 10));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	695c      	ldr	r4, [r3, #20]
 8005d14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <prv_double_to_str+0x6d0>)
 8005d18:	fb83 1302 	smull	r1, r3, r3, r2
 8005d1c:	1099      	asrs	r1, r3, #2
 8005d1e:	17d3      	asrs	r3, r2, #31
 8005d20:	1ac9      	subs	r1, r1, r3
 8005d22:	460b      	mov	r3, r1
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	1ad1      	subs	r1, r2, r3
 8005d2c:	b2cb      	uxtb	r3, r1
 8005d2e:	3330      	adds	r3, #48	; 0x30
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	47a0      	blx	r4
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(p, digits_cnt);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7fe fec5 	bl	8004acc <prv_out_str_after>

    return 1;
 8005d42:	2301      	movs	r3, #1
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3780      	adds	r7, #128	; 0x80
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4c:	51eb851f 	.word	0x51eb851f
 8005d50:	66666667 	.word	0x66666667

08005d54 <prv_format>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* p, va_list arg) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
    uint8_t detected = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    const char* fmt = p->fmt;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60bb      	str	r3, [r7, #8]
         || !lwprintf_sys_mutex_wait(&p->lw->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 8005d6a:	f000 bc65 	b.w	8006638 <prv_format+0x8e4>
        /* Check if we should stop processing */
        if (p->is_print_cancelled) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	7e1b      	ldrb	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 8469 	bne.w	800664a <prv_format+0x8f6>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b25      	cmp	r3, #37	; 0x25
 8005d7e:	d00b      	beq.n	8005d98 <prv_format+0x44>
            p->out_fn(p, *fmt); /* Output character */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
            ++fmt;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60bb      	str	r3, [r7, #8]
            continue;
 8005d94:	f000 bc50 	b.w	8006638 <prv_format+0x8e4>
        }
        ++fmt;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60bb      	str	r3, [r7, #8]
        memset(&p->m, 0x00, sizeof(p->m)); /* Reset structure */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	331c      	adds	r3, #28
 8005da2:	2210      	movs	r2, #16
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fcc8 	bl	800673c <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        do {
            switch (*fmt) {
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	3b20      	subs	r3, #32
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d849      	bhi.n	8005e50 <prv_format+0xfc>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <prv_format+0x70>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005e21 	.word	0x08005e21
 8005dc8:	08005e51 	.word	0x08005e51
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e45 	.word	0x08005e45
 8005dd4:	08005e51 	.word	0x08005e51
 8005dd8:	08005e51 	.word	0x08005e51
 8005ddc:	08005e51 	.word	0x08005e51
 8005de0:	08005e39 	.word	0x08005e39
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e51 	.word	0x08005e51
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e2d 	.word	0x08005e2d
                case '-':
                    p->m.flags.left_align = 1;
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	7f13      	ldrb	r3, [r2, #28]
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	7713      	strb	r3, [r2, #28]
                    break;
 8005e12:	e021      	b.n	8005e58 <prv_format+0x104>
                case '+':
                    p->m.flags.plus = 1;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	7f13      	ldrb	r3, [r2, #28]
 8005e18:	f043 0302 	orr.w	r3, r3, #2
 8005e1c:	7713      	strb	r3, [r2, #28]
                    break;
 8005e1e:	e01b      	b.n	8005e58 <prv_format+0x104>
                case ' ':
                    p->m.flags.space = 1;
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	7f13      	ldrb	r3, [r2, #28]
 8005e24:	f043 0304 	orr.w	r3, r3, #4
 8005e28:	7713      	strb	r3, [r2, #28]
                    break;
 8005e2a:	e015      	b.n	8005e58 <prv_format+0x104>
                case '0':
                    p->m.flags.zero = 1;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	7f13      	ldrb	r3, [r2, #28]
 8005e30:	f043 0308 	orr.w	r3, r3, #8
 8005e34:	7713      	strb	r3, [r2, #28]
                    break;
 8005e36:	e00f      	b.n	8005e58 <prv_format+0x104>
                case '\'':
                    p->m.flags.thousands = 1;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7f13      	ldrb	r3, [r2, #28]
 8005e3c:	f043 0310 	orr.w	r3, r3, #16
 8005e40:	7713      	strb	r3, [r2, #28]
                    break;
 8005e42:	e009      	b.n	8005e58 <prv_format+0x104>
                case '#':
                    p->m.flags.alt = 1;
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	7f13      	ldrb	r3, [r2, #28]
 8005e48:	f043 0320 	orr.w	r3, r3, #32
 8005e4c:	7713      	strb	r3, [r2, #28]
                    break;
 8005e4e:	e003      	b.n	8005e58 <prv_format+0x104>
                default:
                    detected = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    break;
 8005e56:	bf00      	nop
            }
            if (detected) {
 8005e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <prv_format+0x112>
                ++fmt;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60bb      	str	r3, [r7, #8]
            }
        } while (detected);
 8005e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1a1      	bne.n	8005db2 <prv_format+0x5e>

        /* Check [width] */
        p->m.width = 0;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b2f      	cmp	r3, #47	; 0x2f
 8005e7a:	d90c      	bls.n	8005e96 <prv_format+0x142>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b39      	cmp	r3, #57	; 0x39
 8005e82:	d808      	bhi.n	8005e96 <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            p->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe fcc7 	bl	800481c <prv_parse_num>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
 8005e94:	e01b      	b.n	8005ece <prv_format+0x17a>
        } else if (*fmt == '*') {             /* Or variable check */
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9c:	d117      	bne.n	8005ece <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	603a      	str	r2, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	623b      	str	r3, [r7, #32]
            if (w < 0) {
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da09      	bge.n	8005ec2 <prv_format+0x16e>
                p->m.flags.left_align = 1; /* Negative width means left aligned */
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	7f13      	ldrb	r3, [r2, #28]
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	7713      	strb	r3, [r2, #28]
                p->m.width = -w;
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	425a      	negs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8005ec0:	e002      	b.n	8005ec8 <prv_format+0x174>
            } else {
                p->m.width = w;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a3a      	ldr	r2, [r7, #32]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            ++fmt;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60bb      	str	r3, [r7, #8]
        }

        /* Check [.precision] */
        p->m.precision = 0;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	621a      	str	r2, [r3, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eda:	d129      	bne.n	8005f30 <prv_format+0x1dc>
            p->m.flags.precision = 1;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	7f13      	ldrb	r3, [r2, #28]
 8005ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee4:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef2:	d10d      	bne.n	8005f10 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	1d1a      	adds	r2, r3, #4
 8005ef8:	603a      	str	r2, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	61fb      	str	r3, [r7, #28]
                p->m.precision = pr > 0 ? pr : 0;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	621a      	str	r2, [r3, #32]
                ++fmt;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	e00f      	b.n	8005f30 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b2f      	cmp	r3, #47	; 0x2f
 8005f16:	d90b      	bls.n	8005f30 <prv_format+0x1dc>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b39      	cmp	r3, #57	; 0x39
 8005f1e:	d807      	bhi.n	8005f30 <prv_format+0x1dc>
                p->m.precision = prv_parse_num(&fmt);
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fc79 	bl	800481c <prv_parse_num>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        switch (*fmt) {
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	3b4c      	subs	r3, #76	; 0x4c
 8005f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f3e:	f200 80a1 	bhi.w	8006084 <prv_format+0x330>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <prv_format+0x1f4>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	0800608d 	.word	0x0800608d
 8005f4c:	08006085 	.word	0x08006085
 8005f50:	08006085 	.word	0x08006085
 8005f54:	08006085 	.word	0x08006085
 8005f58:	08006085 	.word	0x08006085
 8005f5c:	08006085 	.word	0x08006085
 8005f60:	08006085 	.word	0x08006085
 8005f64:	08006085 	.word	0x08006085
 8005f68:	08006085 	.word	0x08006085
 8005f6c:	08006085 	.word	0x08006085
 8005f70:	08006085 	.word	0x08006085
 8005f74:	08006085 	.word	0x08006085
 8005f78:	08006085 	.word	0x08006085
 8005f7c:	08006085 	.word	0x08006085
 8005f80:	08006085 	.word	0x08006085
 8005f84:	08006085 	.word	0x08006085
 8005f88:	08006085 	.word	0x08006085
 8005f8c:	08006085 	.word	0x08006085
 8005f90:	08006085 	.word	0x08006085
 8005f94:	08006085 	.word	0x08006085
 8005f98:	08006085 	.word	0x08006085
 8005f9c:	08006085 	.word	0x08006085
 8005fa0:	08006085 	.word	0x08006085
 8005fa4:	08006085 	.word	0x08006085
 8005fa8:	08006085 	.word	0x08006085
 8005fac:	08006085 	.word	0x08006085
 8005fb0:	08006085 	.word	0x08006085
 8005fb4:	08006085 	.word	0x08006085
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	08006085 	.word	0x08006085
 8005fc0:	08006073 	.word	0x08006073
 8005fc4:	08006085 	.word	0x08006085
 8005fc8:	08006033 	.word	0x08006033
 8005fcc:	08006085 	.word	0x08006085
 8005fd0:	08006085 	.word	0x08006085
 8005fd4:	08006085 	.word	0x08006085
 8005fd8:	08006085 	.word	0x08006085
 8005fdc:	08006085 	.word	0x08006085
 8005fe0:	08006085 	.word	0x08006085
 8005fe4:	08006085 	.word	0x08006085
 8005fe8:	0800608d 	.word	0x0800608d
 8005fec:	08006085 	.word	0x08006085
 8005ff0:	08006085 	.word	0x08006085
 8005ff4:	08006085 	.word	0x08006085
 8005ff8:	08006085 	.word	0x08006085
 8005ffc:	08006085 	.word	0x08006085
 8006000:	08006061 	.word	0x08006061
            case 'h':
                p->m.flags.char_short = 1;     /* Single h detected */
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	7f53      	ldrb	r3, [r2, #29]
 8006008:	2101      	movs	r1, #1
 800600a:	f361 0383 	bfi	r3, r1, #2, #2
 800600e:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'h') {           /* Does it follow by another h? */
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	3301      	adds	r3, #1
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b68      	cmp	r3, #104	; 0x68
 800601c:	d138      	bne.n	8006090 <prv_format+0x33c>
                    p->m.flags.char_short = 2; /* Second h detected */
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	7f53      	ldrb	r3, [r2, #29]
 8006022:	2102      	movs	r1, #2
 8006024:	f361 0383 	bfi	r3, r1, #2, #2
 8006028:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3301      	adds	r3, #1
 800602e:	60bb      	str	r3, [r7, #8]
                }
                break;
 8006030:	e02e      	b.n	8006090 <prv_format+0x33c>
            case 'l':
                p->m.flags.longlong = 1;     /* Single l detected */
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	7f53      	ldrb	r3, [r2, #29]
 8006036:	2101      	movs	r1, #1
 8006038:	f361 0301 	bfi	r3, r1, #0, #2
 800603c:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'l') {         /* Does it follow by another l? */
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b6c      	cmp	r3, #108	; 0x6c
 800604a:	d123      	bne.n	8006094 <prv_format+0x340>
                    p->m.flags.longlong = 2; /* Second l detected */
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	7f53      	ldrb	r3, [r2, #29]
 8006050:	2102      	movs	r1, #2
 8006052:	f361 0301 	bfi	r3, r1, #0, #2
 8006056:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3301      	adds	r3, #1
 800605c:	60bb      	str	r3, [r7, #8]
                }
                break;
 800605e:	e019      	b.n	8006094 <prv_format+0x340>
            case 'L':
                break;
            case 'z':
                p->m.flags.sz_t = 1; /* Size T flag */
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7f53      	ldrb	r3, [r2, #29]
 8006064:	f043 0310 	orr.w	r3, r3, #16
 8006068:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3301      	adds	r3, #1
 800606e:	60bb      	str	r3, [r7, #8]
                break;
 8006070:	e011      	b.n	8006096 <prv_format+0x342>
            case 'j':
                p->m.flags.umax_t = 1; /* uintmax_t flag */
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	7f53      	ldrb	r3, [r2, #29]
 8006076:	f043 0320 	orr.w	r3, r3, #32
 800607a:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3301      	adds	r3, #1
 8006080:	60bb      	str	r3, [r7, #8]
                break;
 8006082:	e008      	b.n	8006096 <prv_format+0x342>
            case 't':
                break;
            default:
                detected = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800608a:	e004      	b.n	8006096 <prv_format+0x342>
                break;
 800608c:	bf00      	nop
 800608e:	e002      	b.n	8006096 <prv_format+0x342>
                break;
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <prv_format+0x342>
                break;
 8006094:	bf00      	nop
        }

        /* Check type */
        p->m.type = *fmt + ((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	2a40      	cmp	r2, #64	; 0x40
 80060a0:	d905      	bls.n	80060ae <prv_format+0x35a>
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	2a5a      	cmp	r2, #90	; 0x5a
 80060a8:	d801      	bhi.n	80060ae <prv_format+0x35a>
 80060aa:	2220      	movs	r2, #32
 80060ac:	e000      	b.n	80060b0 <prv_format+0x35c>
 80060ae:	2200      	movs	r2, #0
 80060b0:	4413      	add	r3, r2
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d908      	bls.n	80060d4 <prv_format+0x380>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b5a      	cmp	r3, #90	; 0x5a
 80060c8:	d804      	bhi.n	80060d4 <prv_format+0x380>
            p->m.flags.uc = 1;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	7f53      	ldrb	r3, [r2, #29]
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	3b25      	subs	r3, #37	; 0x25
 80060da:	2b53      	cmp	r3, #83	; 0x53
 80060dc:	f200 829c 	bhi.w	8006618 <prv_format+0x8c4>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <prv_format+0x394>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080064df 	.word	0x080064df
 80060ec:	08006619 	.word	0x08006619
 80060f0:	08006619 	.word	0x08006619
 80060f4:	08006619 	.word	0x08006619
 80060f8:	08006619 	.word	0x08006619
 80060fc:	08006619 	.word	0x08006619
 8006100:	08006619 	.word	0x08006619
 8006104:	08006619 	.word	0x08006619
 8006108:	08006619 	.word	0x08006619
 800610c:	08006619 	.word	0x08006619
 8006110:	08006619 	.word	0x08006619
 8006114:	08006619 	.word	0x08006619
 8006118:	08006619 	.word	0x08006619
 800611c:	08006619 	.word	0x08006619
 8006120:	08006619 	.word	0x08006619
 8006124:	08006619 	.word	0x08006619
 8006128:	08006619 	.word	0x08006619
 800612c:	08006619 	.word	0x08006619
 8006130:	08006619 	.word	0x08006619
 8006134:	08006619 	.word	0x08006619
 8006138:	08006619 	.word	0x08006619
 800613c:	08006619 	.word	0x08006619
 8006140:	08006619 	.word	0x08006619
 8006144:	08006619 	.word	0x08006619
 8006148:	08006619 	.word	0x08006619
 800614c:	08006619 	.word	0x08006619
 8006150:	08006619 	.word	0x08006619
 8006154:	08006619 	.word	0x08006619
 8006158:	08006239 	.word	0x08006239
 800615c:	080062d9 	.word	0x080062d9
 8006160:	08006619 	.word	0x08006619
 8006164:	08006619 	.word	0x08006619
 8006168:	080064a3 	.word	0x080064a3
 800616c:	080064a3 	.word	0x080064a3
 8006170:	080064a3 	.word	0x080064a3
 8006174:	08006619 	.word	0x08006619
 8006178:	08006619 	.word	0x08006619
 800617c:	08006619 	.word	0x08006619
 8006180:	080064eb 	.word	0x080064eb
 8006184:	08006619 	.word	0x08006619
 8006188:	08006619 	.word	0x08006619
 800618c:	08006619 	.word	0x08006619
 8006190:	08006619 	.word	0x08006619
 8006194:	08006619 	.word	0x08006619
 8006198:	08006619 	.word	0x08006619
 800619c:	08006619 	.word	0x08006619
 80061a0:	08006619 	.word	0x08006619
 80061a4:	08006619 	.word	0x08006619
 80061a8:	08006619 	.word	0x08006619
 80061ac:	08006619 	.word	0x08006619
 80061b0:	08006619 	.word	0x08006619
 80061b4:	080062d9 	.word	0x080062d9
 80061b8:	08006619 	.word	0x08006619
 80061bc:	08006619 	.word	0x08006619
 80061c0:	08006619 	.word	0x08006619
 80061c4:	08006619 	.word	0x08006619
 80061c8:	08006619 	.word	0x08006619
 80061cc:	08006619 	.word	0x08006619
 80061d0:	08006619 	.word	0x08006619
 80061d4:	08006619 	.word	0x08006619
 80061d8:	08006239 	.word	0x08006239
 80061dc:	080062d9 	.word	0x080062d9
 80061e0:	08006251 	.word	0x08006251
 80061e4:	08006267 	.word	0x08006267
 80061e8:	080064a3 	.word	0x080064a3
 80061ec:	080064a3 	.word	0x080064a3
 80061f0:	080064a3 	.word	0x080064a3
 80061f4:	08006619 	.word	0x08006619
 80061f8:	08006267 	.word	0x08006267
 80061fc:	08006619 	.word	0x08006619
 8006200:	080064eb 	.word	0x080064eb
 8006204:	08006619 	.word	0x08006619
 8006208:	08006619 	.word	0x08006619
 800620c:	080064c9 	.word	0x080064c9
 8006210:	080062d9 	.word	0x080062d9
 8006214:	0800646f 	.word	0x0800646f
 8006218:	08006619 	.word	0x08006619
 800621c:	08006619 	.word	0x08006619
 8006220:	08006429 	.word	0x08006429
 8006224:	08006619 	.word	0x08006619
 8006228:	080062d9 	.word	0x080062d9
 800622c:	08006619 	.word	0x08006619
 8006230:	08006619 	.word	0x08006619
 8006234:	080062d9 	.word	0x080062d9
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);    /* Read argument to ignore it and move to next one */
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	3307      	adds	r3, #7
 800623c:	f023 0307 	bic.w	r3, r3, #7
 8006240:	3308      	adds	r3, #8
 8006242:	603b      	str	r3, [r7, #0]
                prv_out_str_raw(p, "NaN", 3); /* Print string */
 8006244:	2203      	movs	r2, #3
 8006246:	499f      	ldr	r1, [pc, #636]	; (80064c4 <prv_format+0x770>)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fe fc61 	bl	8004b10 <prv_out_str_raw>
                break;
 800624e:	e1f0      	b.n	8006632 <prv_format+0x8de>
            case 'c':
                p->out_fn(p, (char)va_arg(arg, int));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	1d19      	adds	r1, r3, #4
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4790      	blx	r2
                break;
 8006264:	e1e5      	b.n	8006632 <prv_format+0x8de>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                p->m.base = 10;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	220a      	movs	r2, #10
 800626a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (p->m.flags.longlong == 0) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	7f5b      	ldrb	r3, [r3, #29]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <prv_format+0x53a>
                    prv_signed_int_to_str(p, (signed int)va_arg(arg, signed int));
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	603a      	str	r2, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff f842 	bl	8005310 <prv_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 800628c:	e1cc      	b.n	8006628 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 1) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	7f5b      	ldrb	r3, [r3, #29]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	d108      	bne.n	80062ae <prv_format+0x55a>
                    prv_signed_long_int_to_str(p, (signed long int)va_arg(arg, signed long int));
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	603a      	str	r2, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff f84c 	bl	8005344 <prv_signed_long_int_to_str>
                break;
 80062ac:	e1bc      	b.n	8006628 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 2) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7f5b      	ldrb	r3, [r3, #29]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	f040 81b5 	bne.w	8006628 <prv_format+0x8d4>
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3307      	adds	r3, #7
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	f103 0208 	add.w	r2, r3, #8
 80062ca:	603a      	str	r2, [r7, #0]
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f851 	bl	8005378 <prv_signed_longlong_int_to_str>
                break;
 80062d6:	e1a7      	b.n	8006628 <prv_format+0x8d4>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b62      	cmp	r3, #98	; 0x62
 80062de:	d003      	beq.n	80062e8 <prv_format+0x594>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b42      	cmp	r3, #66	; 0x42
 80062e6:	d104      	bne.n	80062f2 <prv_format+0x59e>
                    p->m.base = 2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80062f0:	e01d      	b.n	800632e <prv_format+0x5da>
                } else if (*fmt == 'o') {
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b6f      	cmp	r3, #111	; 0x6f
 80062f8:	d104      	bne.n	8006304 <prv_format+0x5b0>
                    p->m.base = 8;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2208      	movs	r2, #8
 80062fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006302:	e014      	b.n	800632e <prv_format+0x5da>
                } else if (*fmt == 'u') {
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b75      	cmp	r3, #117	; 0x75
 800630a:	d104      	bne.n	8006316 <prv_format+0x5c2>
                    p->m.base = 10;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220a      	movs	r2, #10
 8006310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006314:	e00b      	b.n	800632e <prv_format+0x5da>
                } else if (*fmt == 'x' || *fmt == 'X') {
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b78      	cmp	r3, #120	; 0x78
 800631c:	d003      	beq.n	8006326 <prv_format+0x5d2>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b58      	cmp	r3, #88	; 0x58
 8006324:	d103      	bne.n	800632e <prv_format+0x5da>
                    p->m.base = 16;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2210      	movs	r2, #16
 800632a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                }
                p->m.flags.space = 0; /* Space flag has no meaning here */
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	7f13      	ldrb	r3, [r2, #28]
 8006332:	f36f 0382 	bfc	r3, #2, #1
 8006336:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (p->m.flags.sz_t) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7f5b      	ldrb	r3, [r3, #29]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d008      	beq.n	8006358 <prv_format+0x604>
                    prv_sizet_to_str(p, (size_t)va_arg(arg, size_t));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	603a      	str	r2, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fe fe82 	bl	800505a <prv_sizet_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8006356:	e169      	b.n	800662c <prv_format+0x8d8>
                } else if (p->m.flags.umax_t) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7f5b      	ldrb	r3, [r3, #29]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <prv_format+0x62c>
                    prv_umaxt_to_str(p, (uintmax_t)va_arg(arg, uintmax_t));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	3307      	adds	r3, #7
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	f103 0208 	add.w	r2, r3, #8
 8006372:	603a      	str	r2, [r7, #0]
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fe fef8 	bl	800516e <prv_umaxt_to_str>
                break;
 800637e:	e155      	b.n	800662c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	7f5b      	ldrb	r3, [r3, #29]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <prv_format+0x644>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006394:	2b02      	cmp	r3, #2
 8006396:	d122      	bne.n	80063de <prv_format+0x68a>
                    switch (p->m.flags.char_short) {
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7f5b      	ldrb	r3, [r3, #29]
 800639c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d008      	beq.n	80063b8 <prv_format+0x664>
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d10d      	bne.n	80063c6 <prv_format+0x672>
                            v = (unsigned int)((unsigned char)va_arg(arg, unsigned int));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	603a      	str	r2, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80063b6:	e00c      	b.n	80063d2 <prv_format+0x67e>
                            v = (unsigned int)((unsigned short int)va_arg(arg, unsigned int));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	1d1a      	adds	r2, r3, #4
 80063bc:	603a      	str	r2, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80063c4:	e005      	b.n	80063d2 <prv_format+0x67e>
                            v = (unsigned int)((unsigned int)va_arg(arg, unsigned int));
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	1d1a      	adds	r2, r3, #4
 80063ca:	603a      	str	r2, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80063d0:	bf00      	nop
                    prv_unsigned_int_to_str(p, v);
 80063d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fe fbd1 	bl	8004b7c <prv_unsigned_int_to_str>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 80063da:	bf00      	nop
                break;
 80063dc:	e126      	b.n	800662c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 1) {
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7f5b      	ldrb	r3, [r3, #29]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d108      	bne.n	80063fe <prv_format+0x6aa>
                    prv_unsigned_long_int_to_str(p, (unsigned long int)va_arg(arg, unsigned long int));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	1d1a      	adds	r2, r3, #4
 80063f0:	603a      	str	r2, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fe fc4a 	bl	8004c90 <prv_unsigned_long_int_to_str>
                break;
 80063fc:	e116      	b.n	800662c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 2) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7f5b      	ldrb	r3, [r3, #29]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	f040 810f 	bne.w	800662c <prv_format+0x8d8>
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3307      	adds	r3, #7
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	f103 0208 	add.w	r2, r3, #8
 800641a:	603a      	str	r2, [r7, #0]
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fe fcbf 	bl	8004da4 <prv_unsigned_longlong_int_to_str>
                break;
 8006426:	e101      	b.n	800662c <prv_format+0x8d8>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	603a      	str	r2, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	61bb      	str	r3, [r7, #24]
                 * - If precision is given, max len is up to precision value
                 * - if user selects write to buffer, go up to buffer size (-1 actually, but handled by write function)
                 * - Otherwise use max available system length
                 */
                prv_out_str(p, b,
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7f1b      	ldrb	r3, [r3, #28]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	b2db      	uxtb	r3, r3
                prv_out_str(p, b,
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <prv_format+0x6f2>
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	e008      	b.n	8006458 <prv_format+0x704>
                                                            : (p->buff != NULL ? p->buff_size : SIZE_MAX)));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <prv_format+0x700>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	e001      	b.n	8006458 <prv_format+0x704>
 8006454:	f04f 33ff 	mov.w	r3, #4294967295
                prv_out_str(p, b,
 8006458:	4619      	mov	r1, r3
 800645a:	69b8      	ldr	r0, [r7, #24]
 800645c:	f000 f9f4 	bl	8006848 <strnlen>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	69b9      	ldr	r1, [r7, #24]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fe fb70 	bl	8004b4c <prv_out_str>
                break;
 800646c:	e0e1      	b.n	8006632 <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                p->m.base = 16;                     /* Go to hex format */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2210      	movs	r2, #16
 8006472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.uc = 0;                  /* Uppercase characters */
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	7f53      	ldrb	r3, [r2, #29]
 800647a:	f36f 1386 	bfc	r3, #6, #1
 800647e:	7753      	strb	r3, [r2, #29]
                p->m.flags.zero = 1;                /* Zero padding */
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	7f13      	ldrb	r3, [r2, #28]
 8006484:	f043 0308 	orr.w	r3, r3, #8
 8006488:	7713      	strb	r3, [r2, #28]
                p->m.width = sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2208      	movs	r2, #8
 800648e:	625a      	str	r2, [r3, #36]	; 0x24

                prv_uintptr_to_str(p, (uintptr_t)va_arg(arg, uintptr_t));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	1d1a      	adds	r2, r3, #4
 8006494:	603a      	str	r2, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fe fd53 	bl	8004f46 <prv_uintptr_to_str>
                break;
 80064a0:	e0c7      	b.n	8006632 <prv_format+0x8de>
            case 'E':
            case 'g':
            case 'G':
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(p, (double)va_arg(arg, double));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	3307      	adds	r3, #7
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	f103 0208 	add.w	r2, r3, #8
 80064ae:	603a      	str	r2, [r7, #0]
 80064b0:	ed93 7b00 	vldr	d7, [r3]
 80064b4:	eeb0 0a47 	vmov.f32	s0, s14
 80064b8:	eef0 0a67 	vmov.f32	s1, s15
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff f8df 	bl	8005680 <prv_double_to_str>
                break;
 80064c2:	e0b6      	b.n	8006632 <prv_format+0x8de>
 80064c4:	080072a4 	.word	0x080072a4
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	1d1a      	adds	r2, r3, #4
 80064cc:	603a      	str	r2, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	617b      	str	r3, [r7, #20]
                *ptr = p->n; /* Write current length */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	461a      	mov	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	601a      	str	r2, [r3, #0]

                break;
 80064dc:	e0a9      	b.n	8006632 <prv_format+0x8de>
            }
            case '%':
                p->out_fn(p, '%');
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2125      	movs	r1, #37	; 0x25
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
                break;
 80064e8:	e0a3      	b.n	8006632 <prv_format+0x8de>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	1d1a      	adds	r2, r3, #4
 80064ee:	603a      	str	r2, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = p->m.width, full_width;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	613b      	str	r3, [r7, #16]
                uint8_t is_space = p->m.flags.space == 1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7f1b      	ldrb	r3, [r3, #28]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	73fb      	strb	r3, [r7, #15]

                if (ptr == NULL || len == 0) {
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 808c 	beq.w	8006630 <prv_format+0x8dc>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8088 	beq.w	8006630 <prv_format+0x8dc>
                    break;
                }

                p->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	7f13      	ldrb	r3, [r2, #28]
 8006524:	f043 0308 	orr.w	r3, r3, #8
 8006528:	7713      	strb	r3, [r2, #28]
                p->m.width = 0;       /* No width parameter */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	625a      	str	r2, [r3, #36]	; 0x24
                p->m.base = 16;       /* Hex format */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2210      	movs	r2, #16
 8006534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.space = 0; /* Delete any flag for space */
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	7f13      	ldrb	r3, [r2, #28]
 800653c:	f36f 0382 	bfc	r3, #2, #1
 8006540:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (is_space && full_width > 0) {
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <prv_format+0x80c>
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	dd02      	ble.n	8006560 <prv_format+0x80c>
                    --full_width; /* Remove space after last number */
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	3b01      	subs	r3, #1
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(p, full_width);
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fe f983 	bl	8004870 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 800656a:	2300      	movs	r3, #0
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
 800656e:	e049      	b.n	8006604 <prv_format+0x8b0>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b09      	cmp	r3, #9
 8006580:	d90a      	bls.n	8006598 <prv_format+0x844>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7f5b      	ldrb	r3, [r3, #29]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <prv_format+0x840>
 8006590:	2337      	movs	r3, #55	; 0x37
 8006592:	e002      	b.n	800659a <prv_format+0x846>
 8006594:	2357      	movs	r3, #87	; 0x57
 8006596:	e000      	b.n	800659a <prv_format+0x846>
 8006598:	2330      	movs	r3, #48	; 0x30
 800659a:	7bb9      	ldrb	r1, [r7, #14]
 800659c:	440b      	add	r3, r1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4790      	blx	r2
                    d = *ptr & 0x0F; /* Print LSB */
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695a      	ldr	r2, [r3, #20]
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d90a      	bls.n	80065d0 <prv_format+0x87c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7f5b      	ldrb	r3, [r3, #29]
 80065be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <prv_format+0x878>
 80065c8:	2337      	movs	r3, #55	; 0x37
 80065ca:	e002      	b.n	80065d2 <prv_format+0x87e>
 80065cc:	2357      	movs	r3, #87	; 0x57
 80065ce:	e000      	b.n	80065d2 <prv_format+0x87e>
 80065d0:	2330      	movs	r3, #48	; 0x30
 80065d2:	7bb9      	ldrb	r1, [r7, #14]
 80065d4:	440b      	add	r3, r1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4790      	blx	r2

                    if (is_space && i < (len - 1)) {
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <prv_format+0x8a4>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	429a      	cmp	r2, r3
 80065ec:	da04      	bge.n	80065f8 <prv_format+0x8a4>
                        p->out_fn(p, ' '); /* Generate space between numbers */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	2120      	movs	r1, #32
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	3301      	adds	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	3301      	adds	r3, #1
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	429a      	cmp	r2, r3
 800660a:	dbb1      	blt.n	8006570 <prv_format+0x81c>
                    }
                }
                prv_out_str_after(p, full_width);
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fe fa5b 	bl	8004acc <prv_out_str_after>
                break;
 8006616:	e00c      	b.n	8006632 <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default:
                p->out_fn(p, *fmt);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	4611      	mov	r1, r2
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	e004      	b.n	8006632 <prv_format+0x8de>
                break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <prv_format+0x8de>
                break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <prv_format+0x8de>
        }
        ++fmt;
 8006630:	bf00      	nop
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	3301      	adds	r3, #1
 8006636:	60bb      	str	r3, [r7, #8]
    while (fmt != NULL && *fmt != '\0') {
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <prv_format+0x8f8>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f47f ab93 	bne.w	8005d6e <prv_format+0x1a>
 8006648:	e000      	b.n	800664c <prv_format+0x8f8>
            break;
 800664a:	bf00      	nop
    }
    p->out_fn(p, '\0'); /* Output last zero number */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2100      	movs	r1, #0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&p->lw->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8006656:	2301      	movs	r3, #1
}
 8006658:	4618      	mov	r0, r3
 800665a:	3738      	adds	r7, #56	; 0x38
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <lwprintf_init_ex>:
 * \param[in,out]   lw: LwPRINTF working instance
 * \param[in]       out_fn: Output function used for print operation
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lw, lwprintf_output_fn out_fn) {
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LW(lw)->out_fn = out_fn;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <lwprintf_init_ex+0x14>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	e000      	b.n	8006676 <lwprintf_init_ex+0x16>
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <lwprintf_init_ex+0x28>)
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	601a      	str	r2, [r3, #0]
    if (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LW(lw)->mutex)
        || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LW(lw)->mutex)) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 800667a:	2301      	movs	r3, #1
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	200001d4 	.word	0x200001d4

0800668c <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lw, const char* format, va_list arg) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b090      	sub	sp, #64	; 0x40
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
    lwprintf_int_t f = {
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	222c      	movs	r2, #44	; 0x2c
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 f84b 	bl	800673c <memset>
        .lw = LWPRINTF_GET_LW(lw), .out_fn = prv_out_fn_print, .fmt = format, .buff = NULL, .buff_size = 0};
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <lwprintf_vprintf_ex+0x24>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	e000      	b.n	80066b2 <lwprintf_vprintf_ex+0x26>
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <lwprintf_vprintf_ex+0x54>)
    lwprintf_int_t f = {
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <lwprintf_vprintf_ex+0x58>)
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* For direct print, output function must be set by user */
    if (f.lw->out_fn == NULL) {
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <lwprintf_vprintf_ex+0x3c>
        return 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e006      	b.n	80066d6 <lwprintf_vprintf_ex+0x4a>
    }
    prv_format(&f, arg);
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fb40 	bl	8005d54 <prv_format>
    return f.n;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3740      	adds	r7, #64	; 0x40
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	200001d4 	.word	0x200001d4
 80066e4:	080047c7 	.word	0x080047c7

080066e8 <__errno>:
 80066e8:	4b01      	ldr	r3, [pc, #4]	; (80066f0 <__errno+0x8>)
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	2000000c 	.word	0x2000000c

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f000 fd32 	bl	8007170 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	080073c4 	.word	0x080073c4
 8006730:	080073c4 	.word	0x080073c4
 8006734:	080073c4 	.word	0x080073c4
 8006738:	080073c8 	.word	0x080073c8

0800673c <memset>:
 800673c:	4402      	add	r2, r0
 800673e:	4603      	mov	r3, r0
 8006740:	4293      	cmp	r3, r2
 8006742:	d100      	bne.n	8006746 <memset+0xa>
 8006744:	4770      	bx	lr
 8006746:	f803 1b01 	strb.w	r1, [r3], #1
 800674a:	e7f9      	b.n	8006740 <memset+0x4>

0800674c <_puts_r>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	460e      	mov	r6, r1
 8006750:	4605      	mov	r5, r0
 8006752:	b118      	cbz	r0, 800675c <_puts_r+0x10>
 8006754:	6983      	ldr	r3, [r0, #24]
 8006756:	b90b      	cbnz	r3, 800675c <_puts_r+0x10>
 8006758:	f000 fa5c 	bl	8006c14 <__sinit>
 800675c:	69ab      	ldr	r3, [r5, #24]
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	b913      	cbnz	r3, 8006768 <_puts_r+0x1c>
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fa56 	bl	8006c14 <__sinit>
 8006768:	4b2c      	ldr	r3, [pc, #176]	; (800681c <_puts_r+0xd0>)
 800676a:	429c      	cmp	r4, r3
 800676c:	d120      	bne.n	80067b0 <_puts_r+0x64>
 800676e:	686c      	ldr	r4, [r5, #4]
 8006770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006772:	07db      	lsls	r3, r3, #31
 8006774:	d405      	bmi.n	8006782 <_puts_r+0x36>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	0598      	lsls	r0, r3, #22
 800677a:	d402      	bmi.n	8006782 <_puts_r+0x36>
 800677c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677e:	f000 fae7 	bl	8006d50 <__retarget_lock_acquire_recursive>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	0719      	lsls	r1, r3, #28
 8006786:	d51d      	bpl.n	80067c4 <_puts_r+0x78>
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	b1db      	cbz	r3, 80067c4 <_puts_r+0x78>
 800678c:	3e01      	subs	r6, #1
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006794:	3b01      	subs	r3, #1
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	bb39      	cbnz	r1, 80067ea <_puts_r+0x9e>
 800679a:	2b00      	cmp	r3, #0
 800679c:	da38      	bge.n	8006810 <_puts_r+0xc4>
 800679e:	4622      	mov	r2, r4
 80067a0:	210a      	movs	r1, #10
 80067a2:	4628      	mov	r0, r5
 80067a4:	f000 f85c 	bl	8006860 <__swbuf_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	d011      	beq.n	80067d0 <_puts_r+0x84>
 80067ac:	250a      	movs	r5, #10
 80067ae:	e011      	b.n	80067d4 <_puts_r+0x88>
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <_puts_r+0xd4>)
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d101      	bne.n	80067ba <_puts_r+0x6e>
 80067b6:	68ac      	ldr	r4, [r5, #8]
 80067b8:	e7da      	b.n	8006770 <_puts_r+0x24>
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <_puts_r+0xd8>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	bf08      	it	eq
 80067c0:	68ec      	ldreq	r4, [r5, #12]
 80067c2:	e7d5      	b.n	8006770 <_puts_r+0x24>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f89c 	bl	8006904 <__swsetup_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0dd      	beq.n	800678c <_puts_r+0x40>
 80067d0:	f04f 35ff 	mov.w	r5, #4294967295
 80067d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d6:	07da      	lsls	r2, r3, #31
 80067d8:	d405      	bmi.n	80067e6 <_puts_r+0x9a>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	059b      	lsls	r3, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_puts_r+0x9a>
 80067e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e2:	f000 fab6 	bl	8006d52 <__retarget_lock_release_recursive>
 80067e6:	4628      	mov	r0, r5
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da04      	bge.n	80067f8 <_puts_r+0xac>
 80067ee:	69a2      	ldr	r2, [r4, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	dc06      	bgt.n	8006802 <_puts_r+0xb6>
 80067f4:	290a      	cmp	r1, #10
 80067f6:	d004      	beq.n	8006802 <_puts_r+0xb6>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	7019      	strb	r1, [r3, #0]
 8006800:	e7c5      	b.n	800678e <_puts_r+0x42>
 8006802:	4622      	mov	r2, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f82b 	bl	8006860 <__swbuf_r>
 800680a:	3001      	adds	r0, #1
 800680c:	d1bf      	bne.n	800678e <_puts_r+0x42>
 800680e:	e7df      	b.n	80067d0 <_puts_r+0x84>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	250a      	movs	r5, #10
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	701d      	strb	r5, [r3, #0]
 800681a:	e7db      	b.n	80067d4 <_puts_r+0x88>
 800681c:	0800737c 	.word	0x0800737c
 8006820:	0800739c 	.word	0x0800739c
 8006824:	0800735c 	.word	0x0800735c

08006828 <puts>:
 8006828:	4b02      	ldr	r3, [pc, #8]	; (8006834 <puts+0xc>)
 800682a:	4601      	mov	r1, r0
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	f7ff bf8d 	b.w	800674c <_puts_r>
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c

08006838 <strcpy>:
 8006838:	4603      	mov	r3, r0
 800683a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800683e:	f803 2b01 	strb.w	r2, [r3], #1
 8006842:	2a00      	cmp	r2, #0
 8006844:	d1f9      	bne.n	800683a <strcpy+0x2>
 8006846:	4770      	bx	lr

08006848 <strnlen>:
 8006848:	b510      	push	{r4, lr}
 800684a:	4602      	mov	r2, r0
 800684c:	4401      	add	r1, r0
 800684e:	428a      	cmp	r2, r1
 8006850:	4613      	mov	r3, r2
 8006852:	d003      	beq.n	800685c <strnlen+0x14>
 8006854:	781c      	ldrb	r4, [r3, #0]
 8006856:	3201      	adds	r2, #1
 8006858:	2c00      	cmp	r4, #0
 800685a:	d1f8      	bne.n	800684e <strnlen+0x6>
 800685c:	1a18      	subs	r0, r3, r0
 800685e:	bd10      	pop	{r4, pc}

08006860 <__swbuf_r>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	460e      	mov	r6, r1
 8006864:	4614      	mov	r4, r2
 8006866:	4605      	mov	r5, r0
 8006868:	b118      	cbz	r0, 8006872 <__swbuf_r+0x12>
 800686a:	6983      	ldr	r3, [r0, #24]
 800686c:	b90b      	cbnz	r3, 8006872 <__swbuf_r+0x12>
 800686e:	f000 f9d1 	bl	8006c14 <__sinit>
 8006872:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <__swbuf_r+0x98>)
 8006874:	429c      	cmp	r4, r3
 8006876:	d12b      	bne.n	80068d0 <__swbuf_r+0x70>
 8006878:	686c      	ldr	r4, [r5, #4]
 800687a:	69a3      	ldr	r3, [r4, #24]
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	071a      	lsls	r2, r3, #28
 8006882:	d52f      	bpl.n	80068e4 <__swbuf_r+0x84>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	b36b      	cbz	r3, 80068e4 <__swbuf_r+0x84>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	6820      	ldr	r0, [r4, #0]
 800688c:	1ac0      	subs	r0, r0, r3
 800688e:	6963      	ldr	r3, [r4, #20]
 8006890:	b2f6      	uxtb	r6, r6
 8006892:	4283      	cmp	r3, r0
 8006894:	4637      	mov	r7, r6
 8006896:	dc04      	bgt.n	80068a2 <__swbuf_r+0x42>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f926 	bl	8006aec <_fflush_r>
 80068a0:	bb30      	cbnz	r0, 80068f0 <__swbuf_r+0x90>
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	6022      	str	r2, [r4, #0]
 80068ae:	701e      	strb	r6, [r3, #0]
 80068b0:	6963      	ldr	r3, [r4, #20]
 80068b2:	3001      	adds	r0, #1
 80068b4:	4283      	cmp	r3, r0
 80068b6:	d004      	beq.n	80068c2 <__swbuf_r+0x62>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d506      	bpl.n	80068cc <__swbuf_r+0x6c>
 80068be:	2e0a      	cmp	r6, #10
 80068c0:	d104      	bne.n	80068cc <__swbuf_r+0x6c>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f911 	bl	8006aec <_fflush_r>
 80068ca:	b988      	cbnz	r0, 80068f0 <__swbuf_r+0x90>
 80068cc:	4638      	mov	r0, r7
 80068ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <__swbuf_r+0x9c>)
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d101      	bne.n	80068da <__swbuf_r+0x7a>
 80068d6:	68ac      	ldr	r4, [r5, #8]
 80068d8:	e7cf      	b.n	800687a <__swbuf_r+0x1a>
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <__swbuf_r+0xa0>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	bf08      	it	eq
 80068e0:	68ec      	ldreq	r4, [r5, #12]
 80068e2:	e7ca      	b.n	800687a <__swbuf_r+0x1a>
 80068e4:	4621      	mov	r1, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 f80c 	bl	8006904 <__swsetup_r>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0cb      	beq.n	8006888 <__swbuf_r+0x28>
 80068f0:	f04f 37ff 	mov.w	r7, #4294967295
 80068f4:	e7ea      	b.n	80068cc <__swbuf_r+0x6c>
 80068f6:	bf00      	nop
 80068f8:	0800737c 	.word	0x0800737c
 80068fc:	0800739c 	.word	0x0800739c
 8006900:	0800735c 	.word	0x0800735c

08006904 <__swsetup_r>:
 8006904:	4b32      	ldr	r3, [pc, #200]	; (80069d0 <__swsetup_r+0xcc>)
 8006906:	b570      	push	{r4, r5, r6, lr}
 8006908:	681d      	ldr	r5, [r3, #0]
 800690a:	4606      	mov	r6, r0
 800690c:	460c      	mov	r4, r1
 800690e:	b125      	cbz	r5, 800691a <__swsetup_r+0x16>
 8006910:	69ab      	ldr	r3, [r5, #24]
 8006912:	b913      	cbnz	r3, 800691a <__swsetup_r+0x16>
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f97d 	bl	8006c14 <__sinit>
 800691a:	4b2e      	ldr	r3, [pc, #184]	; (80069d4 <__swsetup_r+0xd0>)
 800691c:	429c      	cmp	r4, r3
 800691e:	d10f      	bne.n	8006940 <__swsetup_r+0x3c>
 8006920:	686c      	ldr	r4, [r5, #4]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006928:	0719      	lsls	r1, r3, #28
 800692a:	d42c      	bmi.n	8006986 <__swsetup_r+0x82>
 800692c:	06dd      	lsls	r5, r3, #27
 800692e:	d411      	bmi.n	8006954 <__swsetup_r+0x50>
 8006930:	2309      	movs	r3, #9
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e03e      	b.n	80069be <__swsetup_r+0xba>
 8006940:	4b25      	ldr	r3, [pc, #148]	; (80069d8 <__swsetup_r+0xd4>)
 8006942:	429c      	cmp	r4, r3
 8006944:	d101      	bne.n	800694a <__swsetup_r+0x46>
 8006946:	68ac      	ldr	r4, [r5, #8]
 8006948:	e7eb      	b.n	8006922 <__swsetup_r+0x1e>
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <__swsetup_r+0xd8>)
 800694c:	429c      	cmp	r4, r3
 800694e:	bf08      	it	eq
 8006950:	68ec      	ldreq	r4, [r5, #12]
 8006952:	e7e6      	b.n	8006922 <__swsetup_r+0x1e>
 8006954:	0758      	lsls	r0, r3, #29
 8006956:	d512      	bpl.n	800697e <__swsetup_r+0x7a>
 8006958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695a:	b141      	cbz	r1, 800696e <__swsetup_r+0x6a>
 800695c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006960:	4299      	cmp	r1, r3
 8006962:	d002      	beq.n	800696a <__swsetup_r+0x66>
 8006964:	4630      	mov	r0, r6
 8006966:	f000 fa5b 	bl	8006e20 <_free_r>
 800696a:	2300      	movs	r3, #0
 800696c:	6363      	str	r3, [r4, #52]	; 0x34
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	2300      	movs	r3, #0
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f043 0308 	orr.w	r3, r3, #8
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	b94b      	cbnz	r3, 800699e <__swsetup_r+0x9a>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d003      	beq.n	800699e <__swsetup_r+0x9a>
 8006996:	4621      	mov	r1, r4
 8006998:	4630      	mov	r0, r6
 800699a:	f000 fa01 	bl	8006da0 <__smakebuf_r>
 800699e:	89a0      	ldrh	r0, [r4, #12]
 80069a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a4:	f010 0301 	ands.w	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <__swsetup_r+0xbc>
 80069aa:	2300      	movs	r3, #0
 80069ac:	60a3      	str	r3, [r4, #8]
 80069ae:	6963      	ldr	r3, [r4, #20]
 80069b0:	425b      	negs	r3, r3
 80069b2:	61a3      	str	r3, [r4, #24]
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	b943      	cbnz	r3, 80069ca <__swsetup_r+0xc6>
 80069b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069bc:	d1ba      	bne.n	8006934 <__swsetup_r+0x30>
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	0781      	lsls	r1, r0, #30
 80069c2:	bf58      	it	pl
 80069c4:	6963      	ldrpl	r3, [r4, #20]
 80069c6:	60a3      	str	r3, [r4, #8]
 80069c8:	e7f4      	b.n	80069b4 <__swsetup_r+0xb0>
 80069ca:	2000      	movs	r0, #0
 80069cc:	e7f7      	b.n	80069be <__swsetup_r+0xba>
 80069ce:	bf00      	nop
 80069d0:	2000000c 	.word	0x2000000c
 80069d4:	0800737c 	.word	0x0800737c
 80069d8:	0800739c 	.word	0x0800739c
 80069dc:	0800735c 	.word	0x0800735c

080069e0 <__sflush_r>:
 80069e0:	898a      	ldrh	r2, [r1, #12]
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	0710      	lsls	r0, r2, #28
 80069ea:	460c      	mov	r4, r1
 80069ec:	d458      	bmi.n	8006aa0 <__sflush_r+0xc0>
 80069ee:	684b      	ldr	r3, [r1, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dc05      	bgt.n	8006a00 <__sflush_r+0x20>
 80069f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dc02      	bgt.n	8006a00 <__sflush_r+0x20>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	d0f9      	beq.n	80069fa <__sflush_r+0x1a>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a0c:	682f      	ldr	r7, [r5, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	d032      	beq.n	8006a78 <__sflush_r+0x98>
 8006a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	075a      	lsls	r2, r3, #29
 8006a18:	d505      	bpl.n	8006a26 <__sflush_r+0x46>
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	1ac0      	subs	r0, r0, r3
 8006a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a20:	b10b      	cbz	r3, 8006a26 <__sflush_r+0x46>
 8006a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a24:	1ac0      	subs	r0, r0, r3
 8006a26:	2300      	movs	r3, #0
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	d106      	bne.n	8006a46 <__sflush_r+0x66>
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	291d      	cmp	r1, #29
 8006a3c:	d82c      	bhi.n	8006a98 <__sflush_r+0xb8>
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <__sflush_r+0x108>)
 8006a40:	40ca      	lsrs	r2, r1
 8006a42:	07d6      	lsls	r6, r2, #31
 8006a44:	d528      	bpl.n	8006a98 <__sflush_r+0xb8>
 8006a46:	2200      	movs	r2, #0
 8006a48:	6062      	str	r2, [r4, #4]
 8006a4a:	04d9      	lsls	r1, r3, #19
 8006a4c:	6922      	ldr	r2, [r4, #16]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	d504      	bpl.n	8006a5c <__sflush_r+0x7c>
 8006a52:	1c42      	adds	r2, r0, #1
 8006a54:	d101      	bne.n	8006a5a <__sflush_r+0x7a>
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	b903      	cbnz	r3, 8006a5c <__sflush_r+0x7c>
 8006a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d0ca      	beq.n	80069fa <__sflush_r+0x1a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__sflush_r+0x92>
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f000 f9d7 	bl	8006e20 <_free_r>
 8006a72:	2000      	movs	r0, #0
 8006a74:	6360      	str	r0, [r4, #52]	; 0x34
 8006a76:	e7c1      	b.n	80069fc <__sflush_r+0x1c>
 8006a78:	6a21      	ldr	r1, [r4, #32]
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b0      	blx	r6
 8006a80:	1c41      	adds	r1, r0, #1
 8006a82:	d1c7      	bne.n	8006a14 <__sflush_r+0x34>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0c4      	beq.n	8006a14 <__sflush_r+0x34>
 8006a8a:	2b1d      	cmp	r3, #29
 8006a8c:	d001      	beq.n	8006a92 <__sflush_r+0xb2>
 8006a8e:	2b16      	cmp	r3, #22
 8006a90:	d101      	bne.n	8006a96 <__sflush_r+0xb6>
 8006a92:	602f      	str	r7, [r5, #0]
 8006a94:	e7b1      	b.n	80069fa <__sflush_r+0x1a>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	e7ad      	b.n	80069fc <__sflush_r+0x1c>
 8006aa0:	690f      	ldr	r7, [r1, #16]
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	d0a9      	beq.n	80069fa <__sflush_r+0x1a>
 8006aa6:	0793      	lsls	r3, r2, #30
 8006aa8:	680e      	ldr	r6, [r1, #0]
 8006aaa:	bf08      	it	eq
 8006aac:	694b      	ldreq	r3, [r1, #20]
 8006aae:	600f      	str	r7, [r1, #0]
 8006ab0:	bf18      	it	ne
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	eba6 0807 	sub.w	r8, r6, r7
 8006ab8:	608b      	str	r3, [r1, #8]
 8006aba:	f1b8 0f00 	cmp.w	r8, #0
 8006abe:	dd9c      	ble.n	80069fa <__sflush_r+0x1a>
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b0      	blx	r6
 8006acc:	2800      	cmp	r0, #0
 8006ace:	dc06      	bgt.n	8006ade <__sflush_r+0xfe>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	e78e      	b.n	80069fc <__sflush_r+0x1c>
 8006ade:	4407      	add	r7, r0
 8006ae0:	eba8 0800 	sub.w	r8, r8, r0
 8006ae4:	e7e9      	b.n	8006aba <__sflush_r+0xda>
 8006ae6:	bf00      	nop
 8006ae8:	20400001 	.word	0x20400001

08006aec <_fflush_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	4605      	mov	r5, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	b913      	cbnz	r3, 8006afc <_fflush_r+0x10>
 8006af6:	2500      	movs	r5, #0
 8006af8:	4628      	mov	r0, r5
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	b118      	cbz	r0, 8006b06 <_fflush_r+0x1a>
 8006afe:	6983      	ldr	r3, [r0, #24]
 8006b00:	b90b      	cbnz	r3, 8006b06 <_fflush_r+0x1a>
 8006b02:	f000 f887 	bl	8006c14 <__sinit>
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <_fflush_r+0x6c>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d11b      	bne.n	8006b44 <_fflush_r+0x58>
 8006b0c:	686c      	ldr	r4, [r5, #4]
 8006b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0ef      	beq.n	8006af6 <_fflush_r+0xa>
 8006b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b18:	07d0      	lsls	r0, r2, #31
 8006b1a:	d404      	bmi.n	8006b26 <_fflush_r+0x3a>
 8006b1c:	0599      	lsls	r1, r3, #22
 8006b1e:	d402      	bmi.n	8006b26 <_fflush_r+0x3a>
 8006b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b22:	f000 f915 	bl	8006d50 <__retarget_lock_acquire_recursive>
 8006b26:	4628      	mov	r0, r5
 8006b28:	4621      	mov	r1, r4
 8006b2a:	f7ff ff59 	bl	80069e0 <__sflush_r>
 8006b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b30:	07da      	lsls	r2, r3, #31
 8006b32:	4605      	mov	r5, r0
 8006b34:	d4e0      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	059b      	lsls	r3, r3, #22
 8006b3a:	d4dd      	bmi.n	8006af8 <_fflush_r+0xc>
 8006b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3e:	f000 f908 	bl	8006d52 <__retarget_lock_release_recursive>
 8006b42:	e7d9      	b.n	8006af8 <_fflush_r+0xc>
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <_fflush_r+0x70>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <_fflush_r+0x62>
 8006b4a:	68ac      	ldr	r4, [r5, #8]
 8006b4c:	e7df      	b.n	8006b0e <_fflush_r+0x22>
 8006b4e:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <_fflush_r+0x74>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68ec      	ldreq	r4, [r5, #12]
 8006b56:	e7da      	b.n	8006b0e <_fflush_r+0x22>
 8006b58:	0800737c 	.word	0x0800737c
 8006b5c:	0800739c 	.word	0x0800739c
 8006b60:	0800735c 	.word	0x0800735c

08006b64 <std>:
 8006b64:	2300      	movs	r3, #0
 8006b66:	b510      	push	{r4, lr}
 8006b68:	4604      	mov	r4, r0
 8006b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b72:	6083      	str	r3, [r0, #8]
 8006b74:	8181      	strh	r1, [r0, #12]
 8006b76:	6643      	str	r3, [r0, #100]	; 0x64
 8006b78:	81c2      	strh	r2, [r0, #14]
 8006b7a:	6183      	str	r3, [r0, #24]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	2208      	movs	r2, #8
 8006b80:	305c      	adds	r0, #92	; 0x5c
 8006b82:	f7ff fddb 	bl	800673c <memset>
 8006b86:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <std+0x38>)
 8006b88:	6263      	str	r3, [r4, #36]	; 0x24
 8006b8a:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <std+0x3c>)
 8006b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <std+0x40>)
 8006b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <std+0x44>)
 8006b94:	6224      	str	r4, [r4, #32]
 8006b96:	6323      	str	r3, [r4, #48]	; 0x30
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop
 8006b9c:	08007001 	.word	0x08007001
 8006ba0:	08007023 	.word	0x08007023
 8006ba4:	0800705b 	.word	0x0800705b
 8006ba8:	0800707f 	.word	0x0800707f

08006bac <_cleanup_r>:
 8006bac:	4901      	ldr	r1, [pc, #4]	; (8006bb4 <_cleanup_r+0x8>)
 8006bae:	f000 b8af 	b.w	8006d10 <_fwalk_reent>
 8006bb2:	bf00      	nop
 8006bb4:	08006aed 	.word	0x08006aed

08006bb8 <__sfmoreglue>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	2268      	movs	r2, #104	; 0x68
 8006bbc:	1e4d      	subs	r5, r1, #1
 8006bbe:	4355      	muls	r5, r2
 8006bc0:	460e      	mov	r6, r1
 8006bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bc6:	f000 f997 	bl	8006ef8 <_malloc_r>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	b140      	cbz	r0, 8006be0 <__sfmoreglue+0x28>
 8006bce:	2100      	movs	r1, #0
 8006bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8006bd4:	300c      	adds	r0, #12
 8006bd6:	60a0      	str	r0, [r4, #8]
 8006bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bdc:	f7ff fdae 	bl	800673c <memset>
 8006be0:	4620      	mov	r0, r4
 8006be2:	bd70      	pop	{r4, r5, r6, pc}

08006be4 <__sfp_lock_acquire>:
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <__sfp_lock_acquire+0x8>)
 8006be6:	f000 b8b3 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	200001d9 	.word	0x200001d9

08006bf0 <__sfp_lock_release>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <__sfp_lock_release+0x8>)
 8006bf2:	f000 b8ae 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	200001d9 	.word	0x200001d9

08006bfc <__sinit_lock_acquire>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <__sinit_lock_acquire+0x8>)
 8006bfe:	f000 b8a7 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006c02:	bf00      	nop
 8006c04:	200001da 	.word	0x200001da

08006c08 <__sinit_lock_release>:
 8006c08:	4801      	ldr	r0, [pc, #4]	; (8006c10 <__sinit_lock_release+0x8>)
 8006c0a:	f000 b8a2 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006c0e:	bf00      	nop
 8006c10:	200001da 	.word	0x200001da

08006c14 <__sinit>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4604      	mov	r4, r0
 8006c18:	f7ff fff0 	bl	8006bfc <__sinit_lock_acquire>
 8006c1c:	69a3      	ldr	r3, [r4, #24]
 8006c1e:	b11b      	cbz	r3, 8006c28 <__sinit+0x14>
 8006c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c24:	f7ff bff0 	b.w	8006c08 <__sinit_lock_release>
 8006c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <__sinit+0x68>)
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <__sinit+0x6c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	bf04      	itt	eq
 8006c3a:	2301      	moveq	r3, #1
 8006c3c:	61a3      	streq	r3, [r4, #24]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 f820 	bl	8006c84 <__sfp>
 8006c44:	6060      	str	r0, [r4, #4]
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 f81c 	bl	8006c84 <__sfp>
 8006c4c:	60a0      	str	r0, [r4, #8]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f818 	bl	8006c84 <__sfp>
 8006c54:	2200      	movs	r2, #0
 8006c56:	60e0      	str	r0, [r4, #12]
 8006c58:	2104      	movs	r1, #4
 8006c5a:	6860      	ldr	r0, [r4, #4]
 8006c5c:	f7ff ff82 	bl	8006b64 <std>
 8006c60:	68a0      	ldr	r0, [r4, #8]
 8006c62:	2201      	movs	r2, #1
 8006c64:	2109      	movs	r1, #9
 8006c66:	f7ff ff7d 	bl	8006b64 <std>
 8006c6a:	68e0      	ldr	r0, [r4, #12]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	2112      	movs	r1, #18
 8006c70:	f7ff ff78 	bl	8006b64 <std>
 8006c74:	2301      	movs	r3, #1
 8006c76:	61a3      	str	r3, [r4, #24]
 8006c78:	e7d2      	b.n	8006c20 <__sinit+0xc>
 8006c7a:	bf00      	nop
 8006c7c:	08007358 	.word	0x08007358
 8006c80:	08006bad 	.word	0x08006bad

08006c84 <__sfp>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	4607      	mov	r7, r0
 8006c88:	f7ff ffac 	bl	8006be4 <__sfp_lock_acquire>
 8006c8c:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <__sfp+0x84>)
 8006c8e:	681e      	ldr	r6, [r3, #0]
 8006c90:	69b3      	ldr	r3, [r6, #24]
 8006c92:	b913      	cbnz	r3, 8006c9a <__sfp+0x16>
 8006c94:	4630      	mov	r0, r6
 8006c96:	f7ff ffbd 	bl	8006c14 <__sinit>
 8006c9a:	3648      	adds	r6, #72	; 0x48
 8006c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	d503      	bpl.n	8006cac <__sfp+0x28>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	b30b      	cbz	r3, 8006cec <__sfp+0x68>
 8006ca8:	6836      	ldr	r6, [r6, #0]
 8006caa:	e7f7      	b.n	8006c9c <__sfp+0x18>
 8006cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cb0:	b9d5      	cbnz	r5, 8006ce8 <__sfp+0x64>
 8006cb2:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <__sfp+0x88>)
 8006cb4:	60e3      	str	r3, [r4, #12]
 8006cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cba:	6665      	str	r5, [r4, #100]	; 0x64
 8006cbc:	f000 f847 	bl	8006d4e <__retarget_lock_init_recursive>
 8006cc0:	f7ff ff96 	bl	8006bf0 <__sfp_lock_release>
 8006cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ccc:	6025      	str	r5, [r4, #0]
 8006cce:	61a5      	str	r5, [r4, #24]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cd8:	f7ff fd30 	bl	800673c <memset>
 8006cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	3468      	adds	r4, #104	; 0x68
 8006cea:	e7d9      	b.n	8006ca0 <__sfp+0x1c>
 8006cec:	2104      	movs	r1, #4
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f7ff ff62 	bl	8006bb8 <__sfmoreglue>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	6030      	str	r0, [r6, #0]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d1d5      	bne.n	8006ca8 <__sfp+0x24>
 8006cfc:	f7ff ff78 	bl	8006bf0 <__sfp_lock_release>
 8006d00:	230c      	movs	r3, #12
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	e7ee      	b.n	8006ce4 <__sfp+0x60>
 8006d06:	bf00      	nop
 8006d08:	08007358 	.word	0x08007358
 8006d0c:	ffff0001 	.word	0xffff0001

08006d10 <_fwalk_reent>:
 8006d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d14:	4606      	mov	r6, r0
 8006d16:	4688      	mov	r8, r1
 8006d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d1c:	2700      	movs	r7, #0
 8006d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d22:	f1b9 0901 	subs.w	r9, r9, #1
 8006d26:	d505      	bpl.n	8006d34 <_fwalk_reent+0x24>
 8006d28:	6824      	ldr	r4, [r4, #0]
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	d1f7      	bne.n	8006d1e <_fwalk_reent+0xe>
 8006d2e:	4638      	mov	r0, r7
 8006d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d34:	89ab      	ldrh	r3, [r5, #12]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d907      	bls.n	8006d4a <_fwalk_reent+0x3a>
 8006d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	d003      	beq.n	8006d4a <_fwalk_reent+0x3a>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	47c0      	blx	r8
 8006d48:	4307      	orrs	r7, r0
 8006d4a:	3568      	adds	r5, #104	; 0x68
 8006d4c:	e7e9      	b.n	8006d22 <_fwalk_reent+0x12>

08006d4e <__retarget_lock_init_recursive>:
 8006d4e:	4770      	bx	lr

08006d50 <__retarget_lock_acquire_recursive>:
 8006d50:	4770      	bx	lr

08006d52 <__retarget_lock_release_recursive>:
 8006d52:	4770      	bx	lr

08006d54 <__swhatbuf_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	460e      	mov	r6, r1
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	b096      	sub	sp, #88	; 0x58
 8006d60:	4614      	mov	r4, r2
 8006d62:	461d      	mov	r5, r3
 8006d64:	da08      	bge.n	8006d78 <__swhatbuf_r+0x24>
 8006d66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	061a      	lsls	r2, r3, #24
 8006d70:	d410      	bmi.n	8006d94 <__swhatbuf_r+0x40>
 8006d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d76:	e00e      	b.n	8006d96 <__swhatbuf_r+0x42>
 8006d78:	466a      	mov	r2, sp
 8006d7a:	f000 f9a7 	bl	80070cc <_fstat_r>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	dbf1      	blt.n	8006d66 <__swhatbuf_r+0x12>
 8006d82:	9a01      	ldr	r2, [sp, #4]
 8006d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d8c:	425a      	negs	r2, r3
 8006d8e:	415a      	adcs	r2, r3
 8006d90:	602a      	str	r2, [r5, #0]
 8006d92:	e7ee      	b.n	8006d72 <__swhatbuf_r+0x1e>
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	2000      	movs	r0, #0
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	b016      	add	sp, #88	; 0x58
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006da0 <__smakebuf_r>:
 8006da0:	898b      	ldrh	r3, [r1, #12]
 8006da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006da4:	079d      	lsls	r5, r3, #30
 8006da6:	4606      	mov	r6, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	d507      	bpl.n	8006dbc <__smakebuf_r+0x1c>
 8006dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2301      	movs	r3, #1
 8006db6:	6163      	str	r3, [r4, #20]
 8006db8:	b002      	add	sp, #8
 8006dba:	bd70      	pop	{r4, r5, r6, pc}
 8006dbc:	ab01      	add	r3, sp, #4
 8006dbe:	466a      	mov	r2, sp
 8006dc0:	f7ff ffc8 	bl	8006d54 <__swhatbuf_r>
 8006dc4:	9900      	ldr	r1, [sp, #0]
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f895 	bl	8006ef8 <_malloc_r>
 8006dce:	b948      	cbnz	r0, 8006de4 <__smakebuf_r+0x44>
 8006dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd4:	059a      	lsls	r2, r3, #22
 8006dd6:	d4ef      	bmi.n	8006db8 <__smakebuf_r+0x18>
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	f043 0302 	orr.w	r3, r3, #2
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7e3      	b.n	8006dac <__smakebuf_r+0xc>
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <__smakebuf_r+0x7c>)
 8006de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df0:	81a3      	strh	r3, [r4, #12]
 8006df2:	9b00      	ldr	r3, [sp, #0]
 8006df4:	6163      	str	r3, [r4, #20]
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	6120      	str	r0, [r4, #16]
 8006dfa:	b15b      	cbz	r3, 8006e14 <__smakebuf_r+0x74>
 8006dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 f975 	bl	80070f0 <_isatty_r>
 8006e06:	b128      	cbz	r0, 8006e14 <__smakebuf_r+0x74>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	89a0      	ldrh	r0, [r4, #12]
 8006e16:	4305      	orrs	r5, r0
 8006e18:	81a5      	strh	r5, [r4, #12]
 8006e1a:	e7cd      	b.n	8006db8 <__smakebuf_r+0x18>
 8006e1c:	08006bad 	.word	0x08006bad

08006e20 <_free_r>:
 8006e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d044      	beq.n	8006eb0 <_free_r+0x90>
 8006e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2a:	9001      	str	r0, [sp, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e32:	bfb8      	it	lt
 8006e34:	18e4      	addlt	r4, r4, r3
 8006e36:	f000 f97d 	bl	8007134 <__malloc_lock>
 8006e3a:	4a1e      	ldr	r2, [pc, #120]	; (8006eb4 <_free_r+0x94>)
 8006e3c:	9801      	ldr	r0, [sp, #4]
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	b933      	cbnz	r3, 8006e50 <_free_r+0x30>
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	6014      	str	r4, [r2, #0]
 8006e46:	b003      	add	sp, #12
 8006e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e4c:	f000 b978 	b.w	8007140 <__malloc_unlock>
 8006e50:	42a3      	cmp	r3, r4
 8006e52:	d908      	bls.n	8006e66 <_free_r+0x46>
 8006e54:	6825      	ldr	r5, [r4, #0]
 8006e56:	1961      	adds	r1, r4, r5
 8006e58:	428b      	cmp	r3, r1
 8006e5a:	bf01      	itttt	eq
 8006e5c:	6819      	ldreq	r1, [r3, #0]
 8006e5e:	685b      	ldreq	r3, [r3, #4]
 8006e60:	1949      	addeq	r1, r1, r5
 8006e62:	6021      	streq	r1, [r4, #0]
 8006e64:	e7ed      	b.n	8006e42 <_free_r+0x22>
 8006e66:	461a      	mov	r2, r3
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	b10b      	cbz	r3, 8006e70 <_free_r+0x50>
 8006e6c:	42a3      	cmp	r3, r4
 8006e6e:	d9fa      	bls.n	8006e66 <_free_r+0x46>
 8006e70:	6811      	ldr	r1, [r2, #0]
 8006e72:	1855      	adds	r5, r2, r1
 8006e74:	42a5      	cmp	r5, r4
 8006e76:	d10b      	bne.n	8006e90 <_free_r+0x70>
 8006e78:	6824      	ldr	r4, [r4, #0]
 8006e7a:	4421      	add	r1, r4
 8006e7c:	1854      	adds	r4, r2, r1
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	6011      	str	r1, [r2, #0]
 8006e82:	d1e0      	bne.n	8006e46 <_free_r+0x26>
 8006e84:	681c      	ldr	r4, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	6053      	str	r3, [r2, #4]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	e7da      	b.n	8006e46 <_free_r+0x26>
 8006e90:	d902      	bls.n	8006e98 <_free_r+0x78>
 8006e92:	230c      	movs	r3, #12
 8006e94:	6003      	str	r3, [r0, #0]
 8006e96:	e7d6      	b.n	8006e46 <_free_r+0x26>
 8006e98:	6825      	ldr	r5, [r4, #0]
 8006e9a:	1961      	adds	r1, r4, r5
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	bf04      	itt	eq
 8006ea0:	6819      	ldreq	r1, [r3, #0]
 8006ea2:	685b      	ldreq	r3, [r3, #4]
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	bf04      	itt	eq
 8006ea8:	1949      	addeq	r1, r1, r5
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	6054      	str	r4, [r2, #4]
 8006eae:	e7ca      	b.n	8006e46 <_free_r+0x26>
 8006eb0:	b003      	add	sp, #12
 8006eb2:	bd30      	pop	{r4, r5, pc}
 8006eb4:	200001dc 	.word	0x200001dc

08006eb8 <sbrk_aligned>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4e0e      	ldr	r6, [pc, #56]	; (8006ef4 <sbrk_aligned+0x3c>)
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	6831      	ldr	r1, [r6, #0]
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	b911      	cbnz	r1, 8006eca <sbrk_aligned+0x12>
 8006ec4:	f000 f88c 	bl	8006fe0 <_sbrk_r>
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 f887 	bl	8006fe0 <_sbrk_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d00a      	beq.n	8006eec <sbrk_aligned+0x34>
 8006ed6:	1cc4      	adds	r4, r0, #3
 8006ed8:	f024 0403 	bic.w	r4, r4, #3
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d007      	beq.n	8006ef0 <sbrk_aligned+0x38>
 8006ee0:	1a21      	subs	r1, r4, r0
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f87c 	bl	8006fe0 <_sbrk_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d101      	bne.n	8006ef0 <sbrk_aligned+0x38>
 8006eec:	f04f 34ff 	mov.w	r4, #4294967295
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	200001e0 	.word	0x200001e0

08006ef8 <_malloc_r>:
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	1ccd      	adds	r5, r1, #3
 8006efe:	f025 0503 	bic.w	r5, r5, #3
 8006f02:	3508      	adds	r5, #8
 8006f04:	2d0c      	cmp	r5, #12
 8006f06:	bf38      	it	cc
 8006f08:	250c      	movcc	r5, #12
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	db01      	blt.n	8006f14 <_malloc_r+0x1c>
 8006f10:	42a9      	cmp	r1, r5
 8006f12:	d905      	bls.n	8006f20 <_malloc_r+0x28>
 8006f14:	230c      	movs	r3, #12
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	2600      	movs	r6, #0
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f20:	4e2e      	ldr	r6, [pc, #184]	; (8006fdc <_malloc_r+0xe4>)
 8006f22:	f000 f907 	bl	8007134 <__malloc_lock>
 8006f26:	6833      	ldr	r3, [r6, #0]
 8006f28:	461c      	mov	r4, r3
 8006f2a:	bb34      	cbnz	r4, 8006f7a <_malloc_r+0x82>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7ff ffc2 	bl	8006eb8 <sbrk_aligned>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	4604      	mov	r4, r0
 8006f38:	d14d      	bne.n	8006fd6 <_malloc_r+0xde>
 8006f3a:	6834      	ldr	r4, [r6, #0]
 8006f3c:	4626      	mov	r6, r4
 8006f3e:	2e00      	cmp	r6, #0
 8006f40:	d140      	bne.n	8006fc4 <_malloc_r+0xcc>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	4631      	mov	r1, r6
 8006f46:	4638      	mov	r0, r7
 8006f48:	eb04 0803 	add.w	r8, r4, r3
 8006f4c:	f000 f848 	bl	8006fe0 <_sbrk_r>
 8006f50:	4580      	cmp	r8, r0
 8006f52:	d13a      	bne.n	8006fca <_malloc_r+0xd2>
 8006f54:	6821      	ldr	r1, [r4, #0]
 8006f56:	3503      	adds	r5, #3
 8006f58:	1a6d      	subs	r5, r5, r1
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	4629      	mov	r1, r5
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff ffa5 	bl	8006eb8 <sbrk_aligned>
 8006f6e:	3001      	adds	r0, #1
 8006f70:	d02b      	beq.n	8006fca <_malloc_r+0xd2>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	442b      	add	r3, r5
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	e00e      	b.n	8006f98 <_malloc_r+0xa0>
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	1b52      	subs	r2, r2, r5
 8006f7e:	d41e      	bmi.n	8006fbe <_malloc_r+0xc6>
 8006f80:	2a0b      	cmp	r2, #11
 8006f82:	d916      	bls.n	8006fb2 <_malloc_r+0xba>
 8006f84:	1961      	adds	r1, r4, r5
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	6025      	str	r5, [r4, #0]
 8006f8a:	bf18      	it	ne
 8006f8c:	6059      	strne	r1, [r3, #4]
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	bf08      	it	eq
 8006f92:	6031      	streq	r1, [r6, #0]
 8006f94:	5162      	str	r2, [r4, r5]
 8006f96:	604b      	str	r3, [r1, #4]
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f104 060b 	add.w	r6, r4, #11
 8006f9e:	f000 f8cf 	bl	8007140 <__malloc_unlock>
 8006fa2:	f026 0607 	bic.w	r6, r6, #7
 8006fa6:	1d23      	adds	r3, r4, #4
 8006fa8:	1af2      	subs	r2, r6, r3
 8006faa:	d0b6      	beq.n	8006f1a <_malloc_r+0x22>
 8006fac:	1b9b      	subs	r3, r3, r6
 8006fae:	50a3      	str	r3, [r4, r2]
 8006fb0:	e7b3      	b.n	8006f1a <_malloc_r+0x22>
 8006fb2:	6862      	ldr	r2, [r4, #4]
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	bf0c      	ite	eq
 8006fb8:	6032      	streq	r2, [r6, #0]
 8006fba:	605a      	strne	r2, [r3, #4]
 8006fbc:	e7ec      	b.n	8006f98 <_malloc_r+0xa0>
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	6864      	ldr	r4, [r4, #4]
 8006fc2:	e7b2      	b.n	8006f2a <_malloc_r+0x32>
 8006fc4:	4634      	mov	r4, r6
 8006fc6:	6876      	ldr	r6, [r6, #4]
 8006fc8:	e7b9      	b.n	8006f3e <_malloc_r+0x46>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f000 f8b6 	bl	8007140 <__malloc_unlock>
 8006fd4:	e7a1      	b.n	8006f1a <_malloc_r+0x22>
 8006fd6:	6025      	str	r5, [r4, #0]
 8006fd8:	e7de      	b.n	8006f98 <_malloc_r+0xa0>
 8006fda:	bf00      	nop
 8006fdc:	200001dc 	.word	0x200001dc

08006fe0 <_sbrk_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d06      	ldr	r5, [pc, #24]	; (8006ffc <_sbrk_r+0x1c>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f7fa ffd8 	bl	8001fa0 <_sbrk>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_sbrk_r+0x1a>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_sbrk_r+0x1a>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	200001e4 	.word	0x200001e4

08007000 <__sread>:
 8007000:	b510      	push	{r4, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	f000 f8a0 	bl	800714c <_read_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	bfab      	itete	ge
 8007010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007012:	89a3      	ldrhlt	r3, [r4, #12]
 8007014:	181b      	addge	r3, r3, r0
 8007016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800701a:	bfac      	ite	ge
 800701c:	6563      	strge	r3, [r4, #84]	; 0x54
 800701e:	81a3      	strhlt	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__swrite>:
 8007022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	461f      	mov	r7, r3
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	05db      	lsls	r3, r3, #23
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	4616      	mov	r6, r2
 8007032:	d505      	bpl.n	8007040 <__swrite+0x1e>
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	2302      	movs	r3, #2
 800703a:	2200      	movs	r2, #0
 800703c:	f000 f868 	bl	8007110 <_lseek_r>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	4628      	mov	r0, r5
 8007052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	f000 b817 	b.w	8007088 <_write_r>

0800705a <__sseek>:
 800705a:	b510      	push	{r4, lr}
 800705c:	460c      	mov	r4, r1
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 f855 	bl	8007110 <_lseek_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	bf15      	itete	ne
 800706c:	6560      	strne	r0, [r4, #84]	; 0x54
 800706e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007076:	81a3      	strheq	r3, [r4, #12]
 8007078:	bf18      	it	ne
 800707a:	81a3      	strhne	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__sclose>:
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 b813 	b.w	80070ac <_close_r>
	...

08007088 <_write_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d07      	ldr	r5, [pc, #28]	; (80070a8 <_write_r+0x20>)
 800708c:	4604      	mov	r4, r0
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	2200      	movs	r2, #0
 8007094:	602a      	str	r2, [r5, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	f7fa ff31 	bl	8001efe <_write>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_write_r+0x1e>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_write_r+0x1e>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	200001e4 	.word	0x200001e4

080070ac <_close_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_close_r+0x1c>)
 80070b0:	2300      	movs	r3, #0
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	f7fa ff3d 	bl	8001f36 <_close>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_close_r+0x1a>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_close_r+0x1a>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	200001e4 	.word	0x200001e4

080070cc <_fstat_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	4d07      	ldr	r5, [pc, #28]	; (80070ec <_fstat_r+0x20>)
 80070d0:	2300      	movs	r3, #0
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	602b      	str	r3, [r5, #0]
 80070da:	f7fa ff38 	bl	8001f4e <_fstat>
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	d102      	bne.n	80070e8 <_fstat_r+0x1c>
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	b103      	cbz	r3, 80070e8 <_fstat_r+0x1c>
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	bd38      	pop	{r3, r4, r5, pc}
 80070ea:	bf00      	nop
 80070ec:	200001e4 	.word	0x200001e4

080070f0 <_isatty_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d06      	ldr	r5, [pc, #24]	; (800710c <_isatty_r+0x1c>)
 80070f4:	2300      	movs	r3, #0
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	602b      	str	r3, [r5, #0]
 80070fc:	f7fa ff37 	bl	8001f6e <_isatty>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_isatty_r+0x1a>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_isatty_r+0x1a>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	200001e4 	.word	0x200001e4

08007110 <_lseek_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	; (8007130 <_lseek_r+0x20>)
 8007114:	4604      	mov	r4, r0
 8007116:	4608      	mov	r0, r1
 8007118:	4611      	mov	r1, r2
 800711a:	2200      	movs	r2, #0
 800711c:	602a      	str	r2, [r5, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	f7fa ff30 	bl	8001f84 <_lseek>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_lseek_r+0x1e>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_lseek_r+0x1e>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	200001e4 	.word	0x200001e4

08007134 <__malloc_lock>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__malloc_lock+0x8>)
 8007136:	f7ff be0b 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 800713a:	bf00      	nop
 800713c:	200001d8 	.word	0x200001d8

08007140 <__malloc_unlock>:
 8007140:	4801      	ldr	r0, [pc, #4]	; (8007148 <__malloc_unlock+0x8>)
 8007142:	f7ff be06 	b.w	8006d52 <__retarget_lock_release_recursive>
 8007146:	bf00      	nop
 8007148:	200001d8 	.word	0x200001d8

0800714c <_read_r>:
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4d07      	ldr	r5, [pc, #28]	; (800716c <_read_r+0x20>)
 8007150:	4604      	mov	r4, r0
 8007152:	4608      	mov	r0, r1
 8007154:	4611      	mov	r1, r2
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	f7fa feb2 	bl	8001ec4 <_read>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_read_r+0x1e>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_read_r+0x1e>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	200001e4 	.word	0x200001e4

08007170 <_init>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr

0800717c <_fini>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr
