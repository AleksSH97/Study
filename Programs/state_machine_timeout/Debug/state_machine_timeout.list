
state_machine_timeout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d08  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000eb0  08000eb0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000eb0  08000eb0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb0  08000eb0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb0  08000eb0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb0  08000eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d65  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b51  00000000  00000000  00022d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000310  00000000  00000000  00023c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c44  00000000  00000000  00023f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cf5  00000000  00000000  0003dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093bed  00000000  00000000  000408b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d449e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cd0  00000000  00000000  000d44f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e98 	.word	0x08000e98

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000e98 	.word	0x08000e98

080001e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4313      	orrs	r3, r2
 80001fa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4013      	ands	r3, r2
 8000204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000206:	68fb      	ldr	r3, [r7, #12]
}
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	40023800 	.word	0x40023800

08000218 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	041a      	lsls	r2, r3, #16
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	619a      	str	r2, [r3, #24]
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	463b      	mov	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
 800024c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800024e:	2080      	movs	r0, #128	; 0x80
 8000250:	f7ff ffca 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000254:	2008      	movs	r0, #8
 8000256:	f7ff ffc7 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800025a:	2001      	movs	r0, #1
 800025c:	f7ff ffc4 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8000260:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000264:	480b      	ldr	r0, [pc, #44]	; (8000294 <MX_GPIO_Init+0x5c>)
 8000266:	f7ff ffd7 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800026a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800026e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000270:	2301      	movs	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <MX_GPIO_Init+0x5c>)
 8000286:	f000 fc2f 	bl	8000ae8 <LL_GPIO_Init>
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020c00 	.word	0x40020c00

08000298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f003 0307 	and.w	r3, r3, #7
 80002a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <__NVIC_SetPriorityGrouping+0x44>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ae:	68ba      	ldr	r2, [r7, #8]
 80002b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b4:	4013      	ands	r3, r2
 80002b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ca:	4a04      	ldr	r2, [pc, #16]	; (80002dc <__NVIC_SetPriorityGrouping+0x44>)
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	60d3      	str	r3, [r2, #12]
}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <__NVIC_GetPriorityGrouping+0x18>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	0a1b      	lsrs	r3, r3, #8
 80002ea:	f003 0307 	and.w	r3, r3, #7
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <LL_RCC_HSE_Enable+0x1c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <LL_RCC_HSE_Enable+0x1c>)
 80003c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800

080003d8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <LL_RCC_HSE_IsReady+0x24>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80003e8:	bf0c      	ite	eq
 80003ea:	2301      	moveq	r3, #1
 80003ec:	2300      	movne	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800

08000400 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_RCC_SetSysClkSource+0x24>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f023 0203 	bic.w	r2, r3, #3
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_RCC_SetSysClkSource+0x24>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40023800 	.word	0x40023800

08000428 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <LL_RCC_GetSysClkSource+0x18>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	f003 030c 	and.w	r3, r3, #12
}
 8000434:	4618      	mov	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40023800 	.word	0x40023800

08000444 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <LL_RCC_SetAHBPrescaler+0x24>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000454:	4904      	ldr	r1, [pc, #16]	; (8000468 <LL_RCC_SetAHBPrescaler+0x24>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4313      	orrs	r3, r2
 800045a:	608b      	str	r3, [r1, #8]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	40023800 	.word	0x40023800

0800046c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800047c:	4904      	ldr	r1, [pc, #16]	; (8000490 <LL_RCC_SetAPB1Prescaler+0x24>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	608b      	str	r3, [r1, #8]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800

08000494 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80004a4:	4904      	ldr	r1, [pc, #16]	; (80004b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800

080004bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_RCC_PLL_Enable+0x1c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <LL_RCC_PLL_Enable+0x1c>)
 80004c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800

080004dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_RCC_PLL_IsReady+0x24>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004ec:	bf0c      	ite	eq
 80004ee:	2301      	moveq	r3, #1
 80004f0:	2300      	movne	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000518:	4013      	ands	r3, r2
 800051a:	68f9      	ldr	r1, [r7, #12]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	4311      	orrs	r1, r2
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	0192      	lsls	r2, r2, #6
 8000524:	430a      	orrs	r2, r1
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000528:	4313      	orrs	r3, r2
 800052a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000534:	4904      	ldr	r1, [pc, #16]	; (8000548 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	4313      	orrs	r3, r2
 800053a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800
 800054c:	ffbf8000 	.word	0xffbf8000

08000550 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <LL_APB1_GRP1_EnableClock+0x2c>)
 800055a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_APB1_GRP1_EnableClock+0x2c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40023800 	.word	0x40023800

08000580 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800058a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8000596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40023800 	.word	0x40023800

080005b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <LL_FLASH_SetLatency+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f023 0207 	bic.w	r2, r3, #7
 80005c0:	4904      	ldr	r1, [pc, #16]	; (80005d4 <LL_FLASH_SetLatency+0x24>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	600b      	str	r3, [r1, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <LL_FLASH_GetLatency+0x18>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 0307 	and.w	r3, r3, #7
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000604:	4904      	ldr	r1, [pc, #16]	; (8000618 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	600b      	str	r3, [r1, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40007000 	.word	0x40007000

0800061c <main>:
static void perform_state_left(struct state_machine *led_chain_ptr);

static struct state_machine led_chain;

int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Initialize_MCU();
 8000620:	f000 f8bc 	bl	800079c <Initialize_MCU>

	while(1) {
		activate_state_machine(&led_chain);
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <main+0x18>)
 8000626:	f000 f807 	bl	8000638 <activate_state_machine>
		perform_state_machine(&led_chain);
 800062a:	4802      	ldr	r0, [pc, #8]	; (8000634 <main+0x18>)
 800062c:	f000 f818 	bl	8000660 <perform_state_machine>
		activate_state_machine(&led_chain);
 8000630:	e7f8      	b.n	8000624 <main+0x8>
 8000632:	bf00      	nop
 8000634:	20000020 	.word	0x20000020

08000638 <activate_state_machine>:
	}
}

static void activate_state_machine(struct state_machine *led_chain_ptr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	CURRENT_STATE = STATE_0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	705a      	strb	r2, [r3, #1]
	PREVIOUS_STATE = STATE_0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
	RESET_STATE = false;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	709a      	strb	r2, [r3, #2]
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <perform_state_machine>:

static void perform_state_machine(struct state_machine *led_chain_ptr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	while(1) {
		if (state_top_check(led_chain)) {
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <perform_state_machine+0x60>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f000 fb94 	bl	8000d98 <state_top_check>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <perform_state_machine+0x1e>
			perform_state_top(&led_chain);
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <perform_state_machine+0x60>)
 8000678:	f000 f824 	bl	80006c4 <perform_state_top>
 800067c:	e7f4      	b.n	8000668 <perform_state_machine+0x8>
		}

		else if (state_bottom_check(led_chain)) {
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <perform_state_machine+0x60>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	f000 fba2 	bl	8000dca <state_bottom_check>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <perform_state_machine+0x34>
			perform_state_bottom(&led_chain);
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <perform_state_machine+0x60>)
 800068e:	f000 f83f 	bl	8000710 <perform_state_bottom>
 8000692:	e7e9      	b.n	8000668 <perform_state_machine+0x8>
		}

		else if (state_right_check(led_chain)) {
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <perform_state_machine+0x60>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	f000 fbad 	bl	8000df6 <state_right_check>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <perform_state_machine+0x4a>
			perform_state_right(&led_chain);
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <perform_state_machine+0x60>)
 80006a4:	f000 f852 	bl	800074c <perform_state_right>
 80006a8:	e7de      	b.n	8000668 <perform_state_machine+0x8>
		}

		else if (state_left_check(led_chain)) {
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <perform_state_machine+0x60>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f000 fbb8 	bl	8000e22 <state_left_check>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0d7      	beq.n	8000668 <perform_state_machine+0x8>
			perform_state_left(&led_chain);
 80006b8:	4801      	ldr	r0, [pc, #4]	; (80006c0 <perform_state_machine+0x60>)
 80006ba:	f000 f85b 	bl	8000774 <perform_state_left>
		if (state_top_check(led_chain)) {
 80006be:	e7d3      	b.n	8000668 <perform_state_machine+0x8>
 80006c0:	20000020 	.word	0x20000020

080006c4 <perform_state_top>:
		}
	}
}

static void perform_state_top(struct state_machine *led_chain_ptr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	state_top_init();
 80006cc:	f000 fb04 	bl	8000cd8 <state_top_init>
	state_run();
 80006d0:	f000 faf9 	bl	8000cc6 <state_run>
	state_top_deinit();
 80006d4:	f000 fb0c 	bl	8000cf0 <state_top_deinit>

	CURRENT_STATE = STATE_1;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2201      	movs	r2, #1
 80006dc:	705a      	strb	r2, [r3, #1]

	if (PREVIOUS_STATE == STATE_2) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d103      	bne.n	80006ee <perform_state_top+0x2a>
		CURRENT_STATE = STATE_3;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2203      	movs	r2, #3
 80006ea:	705a      	strb	r2, [r3, #1]
 80006ec:	e009      	b.n	8000702 <perform_state_top+0x3e>
	}
	else if (PREVIOUS_STATE == STATE_3) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d105      	bne.n	8000702 <perform_state_top+0x3e>
		CURRENT_STATE = STATE_1;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	705a      	strb	r2, [r3, #1]
		RESET_STATE = true;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	709a      	strb	r2, [r3, #2]
	}

	PREVIOUS_STATE = STATE_0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <perform_state_bottom>:

static void perform_state_bottom(struct state_machine *led_chain_ptr)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	state_bottom_init();
 8000718:	f000 faf6 	bl	8000d08 <state_bottom_init>
	state_run();
 800071c:	f000 fad3 	bl	8000cc6 <state_run>
	state_bottom_deinit();
 8000720:	f000 fafe 	bl	8000d20 <state_bottom_deinit>

	if (RESET_STATE) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <perform_state_bottom+0x22>
		activate_state_machine(&led_chain);
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <perform_state_bottom+0x38>)
 800072e:	f7ff ff83 	bl	8000638 <activate_state_machine>
	}
	CURRENT_STATE = STATE_2;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2202      	movs	r2, #2
 8000736:	705a      	strb	r2, [r3, #1]

	PREVIOUS_STATE = STATE_1;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000020 	.word	0x20000020

0800074c <perform_state_right>:

static void perform_state_right(struct state_machine *led_chain_ptr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	state_right_init();
 8000754:	f000 fb08 	bl	8000d68 <state_right_init>
	state_run();
 8000758:	f000 fab5 	bl	8000cc6 <state_run>
	state_right_deinit();
 800075c:	f000 fb10 	bl	8000d80 <state_right_deinit>

	PREVIOUS_STATE = STATE_2;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2202      	movs	r2, #2
 8000764:	701a      	strb	r2, [r3, #0]
	CURRENT_STATE = STATE_0;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	705a      	strb	r2, [r3, #1]
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <perform_state_left>:

static void perform_state_left(struct state_machine *led_chain_ptr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	state_left_init();
 800077c:	f000 fadc 	bl	8000d38 <state_left_init>
	state_run();
 8000780:	f000 faa1 	bl	8000cc6 <state_run>
	state_left_deinit();
 8000784:	f000 fae4 	bl	8000d50 <state_left_deinit>

	PREVIOUS_STATE = STATE_3;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2203      	movs	r2, #3
 800078c:	701a      	strb	r2, [r3, #0]
	CURRENT_STATE = STATE_0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	705a      	strb	r2, [r3, #1]
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Initialize_MCU>:

static void Initialize_MCU(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007a4:	f7ff feec 	bl	8000580 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80007ac:	f7ff fed0 	bl	8000550 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f7ff fd71 	bl	8000298 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80007b6:	f7ff fd93 	bl	80002e0 <__NVIC_GetPriorityGrouping>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2200      	movs	r2, #0
 80007be:	210f      	movs	r1, #15
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fdc5 	bl	8000350 <NVIC_EncodePriority>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4619      	mov	r1, r3
 80007ca:	f04f 30ff 	mov.w	r0, #4294967295
 80007ce:	f7ff fd95 	bl	80002fc <__NVIC_SetPriority>

	SystemClock_Config();
 80007d2:	f000 f805 	bl	80007e0 <SystemClock_Config>
	MX_GPIO_Init();
 80007d6:	f7ff fd2f 	bl	8000238 <MX_GPIO_Init>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff fee3 	bl	80005b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80007ea:	bf00      	nop
 80007ec:	f7ff fef4 	bl	80005d8 <LL_FLASH_GetLatency>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d1fa      	bne.n	80007ec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80007f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007fa:	f7ff fefb 	bl	80005f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80007fe:	f7ff fddb 	bl	80003b8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000802:	bf00      	nop
 8000804:	f7ff fde8 	bl	80003d8 <LL_RCC_HSE_IsReady>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d1fa      	bne.n	8000804 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 84, LL_RCC_PLLP_DIV_2);
 800080e:	2300      	movs	r3, #0
 8000810:	2254      	movs	r2, #84	; 0x54
 8000812:	2104      	movs	r1, #4
 8000814:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000818:	f7ff fe74 	bl	8000504 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800081c:	f7ff fe4e 	bl	80004bc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000820:	bf00      	nop
 8000822:	f7ff fe5b 	bl	80004dc <LL_RCC_PLL_IsReady>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d1fa      	bne.n	8000822 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fe09 	bl	8000444 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000832:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000836:	f7ff fe19 	bl	800046c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff fe2a 	bl	8000494 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fddd 	bl	8000400 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000846:	bf00      	nop
 8000848:	f7ff fdee 	bl	8000428 <LL_RCC_GetSysClkSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b08      	cmp	r3, #8
 8000850:	d1fa      	bne.n	8000848 <SystemClock_Config+0x68>
  {

  }
  LL_Init1msTick(84000000);
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <SystemClock_Config+0x84>)
 8000854:	f000 f9d6 	bl	8000c04 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <SystemClock_Config+0x84>)
 800085a:	f000 fa07 	bl	8000c6c <LL_SetSystemCoreClock>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0501bd00 	.word	0x0501bd00

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000890:	f7ff ffea 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ba:	f000 fac9 	bl	8000e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fead 	bl	800061c <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008d0:	08000eb8 	.word	0x08000eb8
  ldr r2, =_sbss
 80008d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008d8:	20000024 	.word	0x20000024

080008dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>

080008de <LL_GPIO_SetPinMode>:
{
 80008de:	b480      	push	{r7}
 80008e0:	b089      	sub	sp, #36	; 0x24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	401a      	ands	r2, r3
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa93 f3a3 	rbit	r3, r3
 8000918:	61bb      	str	r3, [r7, #24]
  return result;
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	431a      	orrs	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_GPIO_SetPinOutputType>:
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	43db      	mvns	r3, r3
 8000950:	401a      	ands	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	fb01 f303 	mul.w	r3, r1, r3
 800095a:	431a      	orrs	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	605a      	str	r2, [r3, #4]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_GPIO_SetPinSpeed>:
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa93 f3a3 	rbit	r3, r3
 8000986:	613b      	str	r3, [r7, #16]
  return result;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fab3 f383 	clz	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2103      	movs	r1, #3
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	fa93 f3a3 	rbit	r3, r3
 80009a6:	61bb      	str	r3, [r7, #24]
  return result;
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	431a      	orrs	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	609a      	str	r2, [r3, #8]
}
 80009be:	bf00      	nop
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <LL_GPIO_SetPinPull>:
{
 80009ca:	b480      	push	{r7}
 80009cc:	b089      	sub	sp, #36	; 0x24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68da      	ldr	r2, [r3, #12]
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	fa93 f3a3 	rbit	r3, r3
 80009e4:	613b      	str	r3, [r7, #16]
  return result;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fab3 f383 	clz	r3, r3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2103      	movs	r1, #3
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	401a      	ands	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa93 f3a3 	rbit	r3, r3
 8000a04:	61bb      	str	r3, [r7, #24]
  return result;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	fab3 f383 	clz	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	431a      	orrs	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	60da      	str	r2, [r3, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3724      	adds	r7, #36	; 0x24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_GPIO_SetAFPin_0_7>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6a1a      	ldr	r2, [r3, #32]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa93 f3a3 	rbit	r3, r3
 8000a42:	613b      	str	r3, [r7, #16]
  return result;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fab3 f383 	clz	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	210f      	movs	r1, #15
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	fa93 f3a3 	rbit	r3, r3
 8000a62:	61bb      	str	r3, [r7, #24]
  return result;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fab3 f383 	clz	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	621a      	str	r2, [r3, #32]
}
 8000a7a:	bf00      	nop
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <LL_GPIO_SetAFPin_8_15>:
{
 8000a86:	b480      	push	{r7}
 8000a88:	b089      	sub	sp, #36	; 0x24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa93 f3a3 	rbit	r3, r3
 8000aa2:	613b      	str	r3, [r7, #16]
  return result;
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	fab3 f383 	clz	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	210f      	movs	r1, #15
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa93 f3a3 	rbit	r3, r3
 8000ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000adc:	bf00      	nop
 8000ade:	3724      	adds	r7, #36	; 0x24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa93 f3a3 	rbit	r3, r3
 8000b06:	613b      	str	r3, [r7, #16]
  return result;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	fab3 f383 	clz	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000b12:	e050      	b.n	8000bb6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d042      	beq.n	8000bb0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d003      	beq.n	8000b3a <LL_GPIO_Init+0x52>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d10d      	bne.n	8000b56 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	69b9      	ldr	r1, [r7, #24]
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff12 	bl	800096c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	69b9      	ldr	r1, [r7, #24]
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fef3 	bl	800093c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	69b9      	ldr	r1, [r7, #24]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff33 	bl	80009ca <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d11a      	bne.n	8000ba2 <LL_GPIO_Init+0xba>
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	60bb      	str	r3, [r7, #8]
  return result;
 8000b78:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000b7a:	fab3 f383 	clz	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d807      	bhi.n	8000b94 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	69b9      	ldr	r1, [r7, #24]
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff4b 	bl	8000a28 <LL_GPIO_SetAFPin_0_7>
 8000b92:	e006      	b.n	8000ba2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	69b9      	ldr	r1, [r7, #24]
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff72 	bl	8000a86 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	69b9      	ldr	r1, [r7, #24]
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fe97 	bl	80008de <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1a7      	bne.n	8000b14 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <LL_InitTick+0x30>)
 8000be4:	3b01      	subs	r3, #1
 8000be6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <LL_InitTick+0x30>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <LL_InitTick+0x30>)
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffdd 	bl	8000bd0 <LL_InitTick>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <LL_mDelay+0x48>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000c2e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c36:	d00c      	beq.n	8000c52 <LL_mDelay+0x32>
  {
    Delay++;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000c3e:	e008      	b.n	8000c52 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <LL_mDelay+0x48>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <LL_mDelay+0x32>
    {
      Delay--;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f3      	bne.n	8000c40 <LL_mDelay+0x20>
    }
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <LL_SetSystemCoreClock+0x1c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000000 	.word	0x20000000

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <state_run>:
#include "gpio.h"

#include <state.h>

void state_run(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
	LL_mDelay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cce:	f7ff ffa7 	bl	8000c20 <LL_mDelay>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <state_top_init>:

void state_top_init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_13);
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <state_top_init+0x14>)
 8000ce2:	f7ff ffd3 	bl	8000c8c <LL_GPIO_SetOutputPin>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <state_top_deinit>:

void state_top_deinit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_13);
 8000cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <state_top_deinit+0x14>)
 8000cfa:	f7ff ffd5 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <state_bottom_init>:

void state_bottom_init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_15);
 8000d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <state_bottom_init+0x14>)
 8000d12:	f7ff ffbb 	bl	8000c8c <LL_GPIO_SetOutputPin>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40020c00 	.word	0x40020c00

08000d20 <state_bottom_deinit>:

void state_bottom_deinit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_15);
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <state_bottom_deinit+0x14>)
 8000d2a:	f7ff ffbd 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <state_left_init>:

void state_left_init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <state_left_init+0x14>)
 8000d42:	f7ff ffa3 	bl	8000c8c <LL_GPIO_SetOutputPin>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <state_left_deinit>:

void state_left_deinit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <state_left_deinit+0x14>)
 8000d5a:	f7ff ffa5 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <state_right_init>:

void state_right_init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_14);
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <state_right_init+0x14>)
 8000d72:	f7ff ff8b 	bl	8000c8c <LL_GPIO_SetOutputPin>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <state_right_deinit>:

void state_right_deinit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 8000d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <state_right_deinit+0x14>)
 8000d8a:	f7ff ff8d 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020c00 	.word	0x40020c00

08000d98 <state_top_check>:

bool state_top_check(struct state_machine led_chain)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_0) || (STATE_PREVIOUS_2) || (STATE_PREVIOUS_3));
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <state_top_check+0x1a>
 8000da6:	793b      	ldrb	r3, [r7, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d002      	beq.n	8000db2 <state_top_check+0x1a>
 8000dac:	793b      	ldrb	r3, [r7, #4]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d101      	bne.n	8000db6 <state_top_check+0x1e>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <state_top_check+0x20>
 8000db6:	2300      	movs	r3, #0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <state_bottom_check>:

bool state_bottom_check(struct state_machine led_chain)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_1) && (STATE_PREVIOUS_0));
 8000dd2:	797b      	ldrb	r3, [r7, #5]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d104      	bne.n	8000de2 <state_bottom_check+0x18>
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <state_bottom_check+0x18>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <state_bottom_check+0x1a>
 8000de2:	2300      	movs	r3, #0
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <state_right_check>:

bool state_right_check(struct state_machine led_chain)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return ((STATE_PREVIOUS_1) || (STATE_CURRENT_2));
 8000dfe:	793b      	ldrb	r3, [r7, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d002      	beq.n	8000e0a <state_right_check+0x14>
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d101      	bne.n	8000e0e <state_right_check+0x18>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <state_right_check+0x1a>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <state_left_check>:

bool state_left_check(struct state_machine led_chain)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_3) && (STATE_PREVIOUS_0));
 8000e2a:	797b      	ldrb	r3, [r7, #5]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d104      	bne.n	8000e3a <state_left_check+0x18>
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <state_left_check+0x18>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <state_left_check+0x1a>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <__libc_init_array>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	4d0d      	ldr	r5, [pc, #52]	; (8000e88 <__libc_init_array+0x38>)
 8000e54:	4c0d      	ldr	r4, [pc, #52]	; (8000e8c <__libc_init_array+0x3c>)
 8000e56:	1b64      	subs	r4, r4, r5
 8000e58:	10a4      	asrs	r4, r4, #2
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	42a6      	cmp	r6, r4
 8000e5e:	d109      	bne.n	8000e74 <__libc_init_array+0x24>
 8000e60:	4d0b      	ldr	r5, [pc, #44]	; (8000e90 <__libc_init_array+0x40>)
 8000e62:	4c0c      	ldr	r4, [pc, #48]	; (8000e94 <__libc_init_array+0x44>)
 8000e64:	f000 f818 	bl	8000e98 <_init>
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	10a4      	asrs	r4, r4, #2
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	42a6      	cmp	r6, r4
 8000e70:	d105      	bne.n	8000e7e <__libc_init_array+0x2e>
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e78:	4798      	blx	r3
 8000e7a:	3601      	adds	r6, #1
 8000e7c:	e7ee      	b.n	8000e5c <__libc_init_array+0xc>
 8000e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e82:	4798      	blx	r3
 8000e84:	3601      	adds	r6, #1
 8000e86:	e7f2      	b.n	8000e6e <__libc_init_array+0x1e>
 8000e88:	08000eb0 	.word	0x08000eb0
 8000e8c:	08000eb0 	.word	0x08000eb0
 8000e90:	08000eb0 	.word	0x08000eb0
 8000e94:	08000eb4 	.word	0x08000eb4

08000e98 <_init>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_fini>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr
