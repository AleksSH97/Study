
state_machine_timeout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001cd8  08001cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001cd8  08001cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cd8  08001cd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cd8  08001cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cd8  08001cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cdc  08001cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a296  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9b  00000000  00000000  0002a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  0002c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b2a  00000000  00000000  0002d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b154  00000000  00000000  0004ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2022  00000000  00000000  0005a066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c088  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fa8  00000000  00000000  0012c0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001cc0 	.word	0x08001cc0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08001cc0 	.word	0x08001cc0

080001e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4313      	orrs	r3, r2
 80001fa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4013      	ands	r3, r2
 8000204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000206:	68fb      	ldr	r3, [r7, #12]
}
 8000208:	bf00      	nop
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	40023800 	.word	0x40023800

08000218 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	041a      	lsls	r2, r3, #16
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	619a      	str	r2, [r3, #24]
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	463b      	mov	r3, r7
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
 800024c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800024e:	2080      	movs	r0, #128	; 0x80
 8000250:	f7ff ffca 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000254:	2001      	movs	r0, #1
 8000256:	f7ff ffc7 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800025a:	2008      	movs	r0, #8
 800025c:	f7ff ffc4 	bl	80001e8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin);
 8000260:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <MX_GPIO_Init+0x70>)
 8000266:	f7ff ffd7 	bl	8000218 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800026a:	2301      	movs	r3, #1
 800026c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	463b      	mov	r3, r7
 8000278:	4619      	mov	r1, r3
 800027a:	480c      	ldr	r0, [pc, #48]	; (80002ac <MX_GPIO_Init+0x74>)
 800027c:	f001 fb2d 	bl	80018da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_LEFT_Pin|LED_TOP_Pin|LED_RIGHT_Pin|LED_BOTTOM_Pin;
 8000280:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000284:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000286:	2301      	movs	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000296:	463b      	mov	r3, r7
 8000298:	4619      	mov	r1, r3
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <MX_GPIO_Init+0x70>)
 800029c:	f001 fb1d 	bl	80018da <LL_GPIO_Init>

}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40020c00 	.word	0x40020c00
 80002ac:	40020000 	.word	0x40020000

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <LL_RCC_HSE_Enable+0x1c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <LL_RCC_HSE_Enable+0x1c>)
 80003da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003de:	6013      	str	r3, [r2, #0]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800

080003f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <LL_RCC_HSE_IsReady+0x24>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000400:	bf0c      	ite	eq
 8000402:	2301      	moveq	r3, #1
 8000404:	2300      	movne	r3, #0
 8000406:	b2db      	uxtb	r3, r3
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800

08000418 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <LL_RCC_SetSysClkSource+0x24>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f023 0203 	bic.w	r2, r3, #3
 8000428:	4904      	ldr	r1, [pc, #16]	; (800043c <LL_RCC_SetSysClkSource+0x24>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4313      	orrs	r3, r2
 800042e:	608b      	str	r3, [r1, #8]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40023800 	.word	0x40023800

08000440 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <LL_RCC_GetSysClkSource+0x18>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	f003 030c 	and.w	r3, r3, #12
}
 800044c:	4618      	mov	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40023800 	.word	0x40023800

0800045c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <LL_RCC_SetAHBPrescaler+0x24>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800046c:	4904      	ldr	r1, [pc, #16]	; (8000480 <LL_RCC_SetAHBPrescaler+0x24>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	608b      	str	r3, [r1, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40023800 	.word	0x40023800

08000484 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000494:	4904      	ldr	r1, [pc, #16]	; (80004a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	608b      	str	r3, [r1, #8]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40023800 	.word	0x40023800

080004ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80004bc:	4904      	ldr	r1, [pc, #16]	; (80004d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	608b      	str	r3, [r1, #8]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800

080004d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_RCC_PLL_Enable+0x1c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <LL_RCC_PLL_Enable+0x1c>)
 80004de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e2:	6013      	str	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40023800 	.word	0x40023800

080004f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <LL_RCC_PLL_IsReady+0x24>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000504:	bf0c      	ite	eq
 8000506:	2301      	moveq	r3, #1
 8000508:	2300      	movne	r3, #0
 800050a:	b2db      	uxtb	r3, r3
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000530:	4013      	ands	r3, r2
 8000532:	68f9      	ldr	r1, [r7, #12]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	4311      	orrs	r1, r2
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	0192      	lsls	r2, r2, #6
 800053c:	430a      	orrs	r2, r1
 800053e:	4908      	ldr	r1, [pc, #32]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000540:	4313      	orrs	r3, r2
 8000542:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	4313      	orrs	r3, r2
 8000552:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40023800 	.word	0x40023800
 8000564:	ffbf8000 	.word	0xffbf8000

08000568 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000574:	4907      	ldr	r1, [pc, #28]	; (8000594 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <LL_APB1_GRP1_EnableClock+0x2c>)
 800057e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40023800 	.word	0x40023800

08000598 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4013      	ands	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40023800 	.word	0x40023800

080005c8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_FLASH_SetLatency+0x24>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f023 0207 	bic.w	r2, r3, #7
 80005d8:	4904      	ldr	r1, [pc, #16]	; (80005ec <LL_FLASH_SetLatency+0x24>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	600b      	str	r3, [r1, #0]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40023c00 	.word	0x40023c00

080005f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <LL_FLASH_GetLatency+0x18>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0307 	and.w	r3, r3, #7
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023c00 	.word	0x40023c00

0800060c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800061c:	4904      	ldr	r1, [pc, #16]	; (8000630 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4313      	orrs	r3, r2
 8000622:	600b      	str	r3, [r1, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40007000 	.word	0x40007000

08000634 <main>:
static void perform_state_left(struct state_machine *led_chain_ptr);

static struct state_machine led_chain;

int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_Init();
 8000638:	f000 fab8 	bl	8000bac <HAL_Init>
	Initialize_MCU();
 800063c:	f000 f8ca 	bl	80007d4 <Initialize_MCU>

	while(1) {
		activate_state_machine(&led_chain);
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <main+0x1c>)
 8000642:	f000 f807 	bl	8000654 <activate_state_machine>
		perform_state_machine(&led_chain);
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <main+0x1c>)
 8000648:	f000 f818 	bl	800067c <perform_state_machine>
		activate_state_machine(&led_chain);
 800064c:	e7f8      	b.n	8000640 <main+0xc>
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028

08000654 <activate_state_machine>:
	}
}

static void activate_state_machine(struct state_machine *led_chain_ptr)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	CURRENT_STATE = STATE_0;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	705a      	strb	r2, [r3, #1]
	PREVIOUS_STATE = STATE_0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
	RESET_STATE = false;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	709a      	strb	r2, [r3, #2]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <perform_state_machine>:

static void perform_state_machine(struct state_machine *led_chain_ptr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	while (1) {
		if (state_top_check(led_chain)) {
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <perform_state_machine+0x78>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f001 fa9a 	bl	8001bc0 <state_top_check>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <perform_state_machine+0x1e>
			perform_state_top(&led_chain);
 8000692:	4818      	ldr	r0, [pc, #96]	; (80006f4 <perform_state_machine+0x78>)
 8000694:	f000 f830 	bl	80006f8 <perform_state_top>
 8000698:	e7f4      	b.n	8000684 <perform_state_machine+0x8>
		}

		else if (state_bottom_check(led_chain)) {
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <perform_state_machine+0x78>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f001 faa8 	bl	8001bf2 <state_bottom_check>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00a      	beq.n	80006be <perform_state_machine+0x42>
			perform_state_bottom(&led_chain);
 80006a8:	4812      	ldr	r0, [pc, #72]	; (80006f4 <perform_state_machine+0x78>)
 80006aa:	f000 f84f 	bl	800074c <perform_state_bottom>

			if (RESET_STATE) {
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d119      	bne.n	80006ea <perform_state_machine+0x6e>
				break;
			}
			CURRENT_STATE = STATE_2;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2202      	movs	r2, #2
 80006ba:	705a      	strb	r2, [r3, #1]
 80006bc:	e7e2      	b.n	8000684 <perform_state_machine+0x8>
		}

		else if (state_right_check(led_chain)) {
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <perform_state_machine+0x78>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	f001 faac 	bl	8001c1e <state_right_check>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <perform_state_machine+0x58>
			perform_state_right(&led_chain);
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <perform_state_machine+0x78>)
 80006ce:	f000 f851 	bl	8000774 <perform_state_right>
 80006d2:	e7d7      	b.n	8000684 <perform_state_machine+0x8>
		}

		else if (state_left_check(led_chain)) {
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <perform_state_machine+0x78>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	f001 fab7 	bl	8001c4a <state_left_check>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0d0      	beq.n	8000684 <perform_state_machine+0x8>
			perform_state_left(&led_chain);
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <perform_state_machine+0x78>)
 80006e4:	f000 f85e 	bl	80007a4 <perform_state_left>
		if (state_top_check(led_chain)) {
 80006e8:	e7cc      	b.n	8000684 <perform_state_machine+0x8>
				break;
 80006ea:	bf00      	nop
		}
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028

080006f8 <perform_state_top>:

static void perform_state_top(struct state_machine *led_chain_ptr)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	state_top_init();
 8000700:	f001 f9fe 	bl	8001b00 <state_top_init>
	state_run(&led_chain);
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <perform_state_top+0x50>)
 8000706:	f001 f9e3 	bl	8001ad0 <state_run>
	state_top_deinit();
 800070a:	f001 fa05 	bl	8001b18 <state_top_deinit>

	CURRENT_STATE = STATE_1;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	705a      	strb	r2, [r3, #1]

	if (PREVIOUS_STATE == STATE_2) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d103      	bne.n	8000724 <perform_state_top+0x2c>
		CURRENT_STATE = STATE_3;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2203      	movs	r2, #3
 8000720:	705a      	strb	r2, [r3, #1]
 8000722:	e009      	b.n	8000738 <perform_state_top+0x40>
	}
	else if (PREVIOUS_STATE == STATE_3) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d105      	bne.n	8000738 <perform_state_top+0x40>
		CURRENT_STATE = STATE_1;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	705a      	strb	r2, [r3, #1]
		RESET_STATE = true;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	709a      	strb	r2, [r3, #2]
	}

	PREVIOUS_STATE = STATE_0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000028 	.word	0x20000028

0800074c <perform_state_bottom>:

static void perform_state_bottom(struct state_machine *led_chain_ptr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	state_bottom_init();
 8000754:	f001 f9ec 	bl	8001b30 <state_bottom_init>
	state_run(&led_chain);
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <perform_state_bottom+0x24>)
 800075a:	f001 f9b9 	bl	8001ad0 <state_run>
	state_bottom_deinit();
 800075e:	f001 f9f3 	bl	8001b48 <state_bottom_deinit>

	PREVIOUS_STATE = STATE_1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000028 	.word	0x20000028

08000774 <perform_state_right>:

static void perform_state_right(struct state_machine *led_chain_ptr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	state_right_init();
 800077c:	f001 fa08 	bl	8001b90 <state_right_init>
	state_run(&led_chain);
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <perform_state_right+0x2c>)
 8000782:	f001 f9a5 	bl	8001ad0 <state_run>
	state_right_deinit();
 8000786:	f001 fa0f 	bl	8001ba8 <state_right_deinit>

	PREVIOUS_STATE = STATE_2;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2202      	movs	r2, #2
 800078e:	701a      	strb	r2, [r3, #0]
	CURRENT_STATE = STATE_0;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	705a      	strb	r2, [r3, #1]
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000028 	.word	0x20000028

080007a4 <perform_state_left>:

static void perform_state_left(struct state_machine *led_chain_ptr)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	state_left_init();
 80007ac:	f001 f9d8 	bl	8001b60 <state_left_init>
	state_run(&led_chain);
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <perform_state_left+0x2c>)
 80007b2:	f001 f98d 	bl	8001ad0 <state_run>
	state_left_deinit();
 80007b6:	f001 f9df 	bl	8001b78 <state_left_deinit>

	PREVIOUS_STATE = STATE_3;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2203      	movs	r2, #3
 80007be:	701a      	strb	r2, [r3, #0]
	CURRENT_STATE = STATE_0;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	705a      	strb	r2, [r3, #1]
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028

080007d4 <Initialize_MCU>:

void Initialize_MCU(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80007d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007dc:	f7ff fedc 	bl	8000598 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80007e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80007e4:	f7ff fec0 	bl	8000568 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f7ff fd61 	bl	80002b0 <__NVIC_SetPriorityGrouping>
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80007ee:	f7ff fd83 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2200      	movs	r2, #0
 80007f6:	210f      	movs	r1, #15
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fdb5 	bl	8000368 <NVIC_EncodePriority>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 30ff 	mov.w	r0, #4294967295
 8000806:	f7ff fd85 	bl	8000314 <__NVIC_SetPriority>

	SystemClock_Config();
 800080a:	f000 f807 	bl	800081c <SystemClock_Config>
	MX_GPIO_Init();
 800080e:	f7ff fd13 	bl	8000238 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000812:	f000 f911 	bl	8000a38 <MX_TIM1_Init>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fed1 	bl	80005c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000826:	bf00      	nop
 8000828:	f7ff fee2 	bl	80005f0 <LL_FLASH_GetLatency>
 800082c:	4603      	mov	r3, r0
 800082e:	2b02      	cmp	r3, #2
 8000830:	d1fa      	bne.n	8000828 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000832:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000836:	f7ff fee9 	bl	800060c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800083a:	f7ff fdc9 	bl	80003d0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800083e:	bf00      	nop
 8000840:	f7ff fdd6 	bl	80003f0 <LL_RCC_HSE_IsReady>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	d1fa      	bne.n	8000840 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 84, LL_RCC_PLLP_DIV_2);
 800084a:	2300      	movs	r3, #0
 800084c:	2254      	movs	r2, #84	; 0x54
 800084e:	2104      	movs	r1, #4
 8000850:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000854:	f7ff fe62 	bl	800051c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000858:	f7ff fe3c 	bl	80004d4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800085c:	bf00      	nop
 800085e:	f7ff fe49 	bl	80004f4 <LL_RCC_PLL_IsReady>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d1fa      	bne.n	800085e <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff fdf7 	bl	800045c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800086e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000872:	f7ff fe07 	bl	8000484 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe18 	bl	80004ac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800087c:	2002      	movs	r0, #2
 800087e:	f7ff fdcb 	bl	8000418 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000882:	bf00      	nop
 8000884:	f7ff fddc 	bl	8000440 <LL_RCC_GetSysClkSource>
 8000888:	4603      	mov	r3, r0
 800088a:	2b08      	cmp	r3, #8
 800088c:	d1fa      	bne.n	8000884 <SystemClock_Config+0x68>
  {

  }
  LL_Init1msTick(84000000);
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <SystemClock_Config+0x84>)
 8000890:	f001 f8b0 	bl	80019f4 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <SystemClock_Config+0x84>)
 8000896:	f001 f8e1 	bl	8001a5c <LL_SetSystemCoreClock>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	0501bd00 	.word	0x0501bd00

080008a4 <Error_Handler>:

void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	bf0c      	ite	eq
 8000916:	2301      	moveq	r3, #1
 8000918:	2300      	movne	r3, #0
 800091a:	b2db      	uxtb	r3, r3
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40013c00 	.word	0x40013c00

0800092c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6153      	str	r3, [r2, #20]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40013c00 	.word	0x40013c00

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f95a 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(struct state_machine *led_chain_ptr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ffa9 	bl	8000900 <LL_EXTI_IsActiveFlag_0_31>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ffb9 	bl	800092c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80009ca:	f000 fab5 	bl	8000f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000002c 	.word	0x2000002c

080009d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009de:	f000 faab 	bl	8000f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000002c 	.word	0x2000002c

080009ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009f2:	f000 faa1 	bl	8000f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000002c 	.word	0x2000002c

08000a00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_CC_IRQHandler+0x10>)
 8000a06:	f000 fa97 	bl	8000f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000002c 	.word	0x2000002c

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a56:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <MX_TIM1_Init+0x9c>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a5c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000a60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a6a:	2232      	movs	r2, #50	; 0x32
 8000a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a82:	f000 fa0a 	bl	8000e9a <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f7ff ff0a 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000a9e:	f000 fb53 	bl	8001148 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000aa8:	f7ff fefc 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM1_Init+0x98>)
 8000aba:	f000 fd79 	bl	80015b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f7ff feee 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000002c 	.word	0x2000002c
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <HAL_TIM_Base_MspInit+0x78>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12d      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_TIM_Base_MspInit+0x7c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_TIM_Base_MspInit+0x7c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_TIM_Base_MspInit+0x7c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2018      	movs	r0, #24
 8000b0c:	f000 f98f 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000b10:	2018      	movs	r0, #24
 8000b12:	f000 f9a8 	bl	8000e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 f987 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b20:	2019      	movs	r0, #25
 8000b22:	f000 f9a0 	bl	8000e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201a      	movs	r0, #26
 8000b2c:	f000 f97f 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b30:	201a      	movs	r0, #26
 8000b32:	f000 f998 	bl	8000e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	f000 f977 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b40:	201b      	movs	r0, #27
 8000b42:	f000 f990 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010000 	.word	0x40010000
 8000b54:	40023800 	.word	0x40023800

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b5c:	f7ff ff5a 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b86:	f001 f877 	bl	8001c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd53 	bl	8000634 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b9c:	08001ce0 	.word	0x08001ce0
  ldr r2, =_sbss
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba4:	20000078 	.word	0x20000078

08000ba8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f91f 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe66 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f937 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f8ff 	bl	8000e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000074 	.word	0x20000074

08000c78 <__NVIC_SetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff29 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff3e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff31 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e041      	b.n	8000f30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d106      	bne.n	8000ec6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fe09 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2202      	movs	r2, #2
 8000eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f000 fa2f 	bl	800133c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d122      	bne.n	8000f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d11b      	bne.n	8000f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f06f 0202 	mvn.w	r2, #2
 8000f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f9bf 	bl	80012fe <HAL_TIM_IC_CaptureCallback>
 8000f80:	e005      	b.n	8000f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f9b1 	bl	80012ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f9c2 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d122      	bne.n	8000fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d11b      	bne.n	8000fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f06f 0204 	mvn.w	r2, #4
 8000fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f995 	bl	80012fe <HAL_TIM_IC_CaptureCallback>
 8000fd4:	e005      	b.n	8000fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f987 	bl	80012ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f998 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b08      	cmp	r3, #8
 8000ff4:	d122      	bne.n	800103c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b08      	cmp	r3, #8
 8001002:	d11b      	bne.n	800103c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0208 	mvn.w	r2, #8
 800100c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2204      	movs	r2, #4
 8001012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f96b 	bl	80012fe <HAL_TIM_IC_CaptureCallback>
 8001028:	e005      	b.n	8001036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f95d 	bl	80012ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f96e 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b10      	cmp	r3, #16
 8001048:	d122      	bne.n	8001090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b10      	cmp	r3, #16
 8001056:	d11b      	bne.n	8001090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f06f 0210 	mvn.w	r2, #16
 8001060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2208      	movs	r2, #8
 8001066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f941 	bl	80012fe <HAL_TIM_IC_CaptureCallback>
 800107c:	e005      	b.n	800108a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f933 	bl	80012ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f944 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10e      	bne.n	80010bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d107      	bne.n	80010bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f06f 0201 	mvn.w	r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f90d 	bl	80012d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b80      	cmp	r3, #128	; 0x80
 80010c8:	d10e      	bne.n	80010e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b80      	cmp	r3, #128	; 0x80
 80010d6:	d107      	bne.n	80010e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80010e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 faea 	bl	80016bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f2:	2b40      	cmp	r3, #64	; 0x40
 80010f4:	d10e      	bne.n	8001114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	2b40      	cmp	r3, #64	; 0x40
 8001102:	d107      	bne.n	8001114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800110c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f909 	bl	8001326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	2b20      	cmp	r3, #32
 8001120:	d10e      	bne.n	8001140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	2b20      	cmp	r3, #32
 800112e:	d107      	bne.n	8001140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0220 	mvn.w	r2, #32
 8001138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fab4 	bl	80016a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_TIM_ConfigClockSource+0x1c>
 8001160:	2302      	movs	r3, #2
 8001162:	e0b4      	b.n	80012ce <HAL_TIM_ConfigClockSource+0x186>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800118a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800119c:	d03e      	beq.n	800121c <HAL_TIM_ConfigClockSource+0xd4>
 800119e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a2:	f200 8087 	bhi.w	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011aa:	f000 8086 	beq.w	80012ba <HAL_TIM_ConfigClockSource+0x172>
 80011ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011b2:	d87f      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011b4:	2b70      	cmp	r3, #112	; 0x70
 80011b6:	d01a      	beq.n	80011ee <HAL_TIM_ConfigClockSource+0xa6>
 80011b8:	2b70      	cmp	r3, #112	; 0x70
 80011ba:	d87b      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011bc:	2b60      	cmp	r3, #96	; 0x60
 80011be:	d050      	beq.n	8001262 <HAL_TIM_ConfigClockSource+0x11a>
 80011c0:	2b60      	cmp	r3, #96	; 0x60
 80011c2:	d877      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011c4:	2b50      	cmp	r3, #80	; 0x50
 80011c6:	d03c      	beq.n	8001242 <HAL_TIM_ConfigClockSource+0xfa>
 80011c8:	2b50      	cmp	r3, #80	; 0x50
 80011ca:	d873      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d058      	beq.n	8001282 <HAL_TIM_ConfigClockSource+0x13a>
 80011d0:	2b40      	cmp	r3, #64	; 0x40
 80011d2:	d86f      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011d4:	2b30      	cmp	r3, #48	; 0x30
 80011d6:	d064      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0x15a>
 80011d8:	2b30      	cmp	r3, #48	; 0x30
 80011da:	d86b      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011dc:	2b20      	cmp	r3, #32
 80011de:	d060      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0x15a>
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	d867      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05c      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0x15a>
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d05a      	beq.n	80012a2 <HAL_TIM_ConfigClockSource+0x15a>
 80011ec:	e062      	b.n	80012b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6899      	ldr	r1, [r3, #8]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f000 f9b7 	bl	8001570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	609a      	str	r2, [r3, #8]
      break;
 800121a:	e04f      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6899      	ldr	r1, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f000 f9a0 	bl	8001570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800123e:	609a      	str	r2, [r3, #8]
      break;
 8001240:	e03c      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	461a      	mov	r2, r3
 8001250:	f000 f914 	bl	800147c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2150      	movs	r1, #80	; 0x50
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f96d 	bl	800153a <TIM_ITRx_SetConfig>
      break;
 8001260:	e02c      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6859      	ldr	r1, [r3, #4]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	461a      	mov	r2, r3
 8001270:	f000 f933 	bl	80014da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2160      	movs	r1, #96	; 0x60
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f95d 	bl	800153a <TIM_ITRx_SetConfig>
      break;
 8001280:	e01c      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6859      	ldr	r1, [r3, #4]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	461a      	mov	r2, r3
 8001290:	f000 f8f4 	bl	800147c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f94d 	bl	800153a <TIM_ITRx_SetConfig>
      break;
 80012a0:	e00c      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f000 f944 	bl	800153a <TIM_ITRx_SetConfig>
      break;
 80012b2:	e003      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
      break;
 80012b8:	e000      	b.n	80012bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80012ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <TIM_Base_SetConfig+0x114>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <TIM_Base_SetConfig+0x40>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135a:	d00f      	beq.n	800137c <TIM_Base_SetConfig+0x40>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3d      	ldr	r2, [pc, #244]	; (8001454 <TIM_Base_SetConfig+0x118>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00b      	beq.n	800137c <TIM_Base_SetConfig+0x40>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <TIM_Base_SetConfig+0x11c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <TIM_Base_SetConfig+0x40>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3b      	ldr	r2, [pc, #236]	; (800145c <TIM_Base_SetConfig+0x120>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d003      	beq.n	800137c <TIM_Base_SetConfig+0x40>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3a      	ldr	r2, [pc, #232]	; (8001460 <TIM_Base_SetConfig+0x124>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d108      	bne.n	800138e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <TIM_Base_SetConfig+0x114>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139c:	d027      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <TIM_Base_SetConfig+0x118>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d023      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <TIM_Base_SetConfig+0x11c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01f      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a2a      	ldr	r2, [pc, #168]	; (800145c <TIM_Base_SetConfig+0x120>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01b      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <TIM_Base_SetConfig+0x124>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d017      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a28      	ldr	r2, [pc, #160]	; (8001464 <TIM_Base_SetConfig+0x128>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <TIM_Base_SetConfig+0x12c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00f      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <TIM_Base_SetConfig+0x130>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00b      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a25      	ldr	r2, [pc, #148]	; (8001470 <TIM_Base_SetConfig+0x134>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a24      	ldr	r2, [pc, #144]	; (8001474 <TIM_Base_SetConfig+0x138>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d003      	beq.n	80013ee <TIM_Base_SetConfig+0xb2>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a23      	ldr	r2, [pc, #140]	; (8001478 <TIM_Base_SetConfig+0x13c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d108      	bne.n	8001400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <TIM_Base_SetConfig+0x114>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d003      	beq.n	8001434 <TIM_Base_SetConfig+0xf8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <TIM_Base_SetConfig+0x124>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d103      	bne.n	800143c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	615a      	str	r2, [r3, #20]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40010000 	.word	0x40010000
 8001454:	40000400 	.word	0x40000400
 8001458:	40000800 	.word	0x40000800
 800145c:	40000c00 	.word	0x40000c00
 8001460:	40010400 	.word	0x40010400
 8001464:	40014000 	.word	0x40014000
 8001468:	40014400 	.word	0x40014400
 800146c:	40014800 	.word	0x40014800
 8001470:	40001800 	.word	0x40001800
 8001474:	40001c00 	.word	0x40001c00
 8001478:	40002000 	.word	0x40002000

0800147c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	f023 0201 	bic.w	r2, r3, #1
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f023 030a 	bic.w	r3, r3, #10
 80014b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	621a      	str	r2, [r3, #32]
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014da:	b480      	push	{r7}
 80014dc:	b087      	sub	sp, #28
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	f023 0210 	bic.w	r2, r3, #16
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	031b      	lsls	r3, r3, #12
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	621a      	str	r2, [r3, #32]
}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	f043 0307 	orr.w	r3, r3, #7
 800155c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800158a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	021a      	lsls	r2, r3, #8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	431a      	orrs	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	609a      	str	r2, [r3, #8]
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e05a      	b.n	800167e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d01d      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d018      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00e      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d009      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d004      	beq.n	8001652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10c      	bne.n	800166c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4313      	orrs	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40010000 	.word	0x40010000
 8001690:	40000400 	.word	0x40000400
 8001694:	40000800 	.word	0x40000800
 8001698:	40000c00 	.word	0x40000c00
 800169c:	40010400 	.word	0x40010400
 80016a0:	40014000 	.word	0x40014000
 80016a4:	40001800 	.word	0x40001800

080016a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_GPIO_SetPinMode>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2103      	movs	r1, #3
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	61bb      	str	r3, [r7, #24]
  return result;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	431a      	orrs	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	601a      	str	r2, [r3, #0]
}
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_GPIO_SetPinOutputType>:
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	605a      	str	r2, [r3, #4]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_GPIO_SetPinSpeed>:
{
 800175e:	b480      	push	{r7}
 8001760:	b089      	sub	sp, #36	; 0x24
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	613b      	str	r3, [r7, #16]
  return result;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2103      	movs	r1, #3
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	401a      	ands	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	61bb      	str	r3, [r7, #24]
  return result;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	609a      	str	r2, [r3, #8]
}
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_GPIO_SetPinPull>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	613b      	str	r3, [r7, #16]
  return result;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2103      	movs	r1, #3
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	61bb      	str	r3, [r7, #24]
  return result;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	60da      	str	r2, [r3, #12]
}
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_GPIO_SetAFPin_0_7>:
{
 800181a:	b480      	push	{r7}
 800181c:	b089      	sub	sp, #36	; 0x24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a1a      	ldr	r2, [r3, #32]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	613b      	str	r3, [r7, #16]
  return result;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	210f      	movs	r1, #15
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	61bb      	str	r3, [r7, #24]
  return result;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	621a      	str	r2, [r3, #32]
}
 800186c:	bf00      	nop
 800186e:	3724      	adds	r7, #36	; 0x24
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_GPIO_SetAFPin_8_15>:
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	613b      	str	r3, [r7, #16]
  return result;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	210f      	movs	r1, #15
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	401a      	ands	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	61bb      	str	r3, [r7, #24]
  return result;
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	613b      	str	r3, [r7, #16]
  return result;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001904:	e050      	b.n	80019a8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2101      	movs	r1, #1
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d042      	beq.n	80019a2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d003      	beq.n	800192c <LL_GPIO_Init+0x52>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d10d      	bne.n	8001948 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	461a      	mov	r2, r3
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff12 	bl	800175e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	461a      	mov	r2, r3
 8001940:	69b9      	ldr	r1, [r7, #24]
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fef3 	bl	800172e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	461a      	mov	r2, r3
 800194e:	69b9      	ldr	r1, [r7, #24]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff33 	bl	80017bc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d11a      	bne.n	8001994 <LL_GPIO_Init+0xba>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	60bb      	str	r3, [r7, #8]
  return result;
 800196a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b07      	cmp	r3, #7
 8001974:	d807      	bhi.n	8001986 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	461a      	mov	r2, r3
 800197c:	69b9      	ldr	r1, [r7, #24]
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff4b 	bl	800181a <LL_GPIO_SetAFPin_0_7>
 8001984:	e006      	b.n	8001994 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	461a      	mov	r2, r3
 800198c:	69b9      	ldr	r1, [r7, #24]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ff72 	bl	8001878 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	461a      	mov	r2, r3
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fe97 	bl	80016d0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1a7      	bne.n	8001906 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <LL_InitTick+0x30>)
 80019d4:	3b01      	subs	r3, #1
 80019d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <LL_InitTick+0x30>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <LL_InitTick+0x30>)
 80019e0:	2205      	movs	r2, #5
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80019fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffdd 	bl	80019c0 <LL_InitTick>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <LL_mDelay+0x48>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001a1e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a26:	d00c      	beq.n	8001a42 <LL_mDelay+0x32>
  {
    Delay++;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001a2e:	e008      	b.n	8001a42 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <LL_mDelay+0x48>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <LL_mDelay+0x32>
    {
      Delay--;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f3      	bne.n	8001a30 <LL_mDelay+0x20>
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <LL_SetSystemCoreClock+0x1c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000

08001a7c <LL_GPIO_ReadInputPort>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_GPIO_SetOutputPin>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	619a      	str	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_GPIO_ResetOutputPin>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <state_run>:
#include "tim.h"

#include "state.h"

void state_run(struct state_machine *led_chain_ptr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	while(1) {
		if (STATE_CHECK_BTN) {
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <state_run+0x2c>)
 8001ada:	f7ff ffcf 	bl	8001a7c <LL_GPIO_ReadInputPort>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f7      	beq.n	8001ad8 <state_run+0x8>
			LL_mDelay(300);
 8001ae8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aec:	f7ff ff90 	bl	8001a10 <LL_mDelay>
			break;
 8001af0:	bf00      	nop
		}
	}
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000

08001b00 <state_top_init>:

void state_top_init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LED_TOP_Pin);
 8001b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <state_top_init+0x14>)
 8001b0a:	f7ff ffc3 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <state_top_deinit>:

void state_top_deinit(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LED_TOP_Pin);
 8001b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <state_top_deinit+0x14>)
 8001b22:	f7ff ffc5 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020c00 	.word	0x40020c00

08001b30 <state_bottom_init>:

void state_bottom_init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LED_BOTTOM_Pin);
 8001b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <state_bottom_init+0x14>)
 8001b3a:	f7ff ffab 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <state_bottom_deinit>:

void state_bottom_deinit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LED_BOTTOM_Pin);
 8001b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <state_bottom_deinit+0x14>)
 8001b52:	f7ff ffad 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40020c00 	.word	0x40020c00

08001b60 <state_left_init>:

void state_left_init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LED_LEFT_Pin);
 8001b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <state_left_init+0x14>)
 8001b6a:	f7ff ff93 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40020c00 	.word	0x40020c00

08001b78 <state_left_deinit>:

void state_left_deinit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LED_LEFT_Pin);
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <state_left_deinit+0x14>)
 8001b82:	f7ff ff95 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <state_right_init>:

void state_right_init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOD, LED_RIGHT_Pin);
 8001b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <state_right_init+0x14>)
 8001b9a:	f7ff ff7b 	bl	8001a94 <LL_GPIO_SetOutputPin>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <state_right_deinit>:

void state_right_deinit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOD, LED_RIGHT_Pin);
 8001bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <state_right_deinit+0x14>)
 8001bb2:	f7ff ff7d 	bl	8001ab0 <LL_GPIO_ResetOutputPin>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <state_top_check>:

bool state_top_check(struct state_machine led_chain)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_0) || (STATE_PREVIOUS_2) || (STATE_PREVIOUS_3));
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <state_top_check+0x1a>
 8001bce:	793b      	ldrb	r3, [r7, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d002      	beq.n	8001bda <state_top_check+0x1a>
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d101      	bne.n	8001bde <state_top_check+0x1e>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <state_top_check+0x20>
 8001bde:	2300      	movs	r3, #0
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <state_bottom_check>:

bool state_bottom_check(struct state_machine led_chain)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_1) && (STATE_PREVIOUS_0));
 8001bfa:	797b      	ldrb	r3, [r7, #5]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d104      	bne.n	8001c0a <state_bottom_check+0x18>
 8001c00:	793b      	ldrb	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <state_bottom_check+0x18>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <state_bottom_check+0x1a>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <state_right_check>:

bool state_right_check(struct state_machine led_chain)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	return ((STATE_PREVIOUS_1) || (STATE_CURRENT_2));
 8001c26:	793b      	ldrb	r3, [r7, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <state_right_check+0x14>
 8001c2c:	797b      	ldrb	r3, [r7, #5]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d101      	bne.n	8001c36 <state_right_check+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <state_right_check+0x1a>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <state_left_check>:

bool state_left_check(struct state_machine led_chain)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return ((STATE_CURRENT_3) && (STATE_PREVIOUS_0));
 8001c52:	797b      	ldrb	r3, [r7, #5]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d104      	bne.n	8001c62 <state_left_check+0x18>
 8001c58:	793b      	ldrb	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <state_left_check+0x18>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <state_left_check+0x1a>
 8001c62:	2300      	movs	r3, #0
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <__libc_init_array>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	4d0d      	ldr	r5, [pc, #52]	; (8001cb0 <__libc_init_array+0x38>)
 8001c7c:	4c0d      	ldr	r4, [pc, #52]	; (8001cb4 <__libc_init_array+0x3c>)
 8001c7e:	1b64      	subs	r4, r4, r5
 8001c80:	10a4      	asrs	r4, r4, #2
 8001c82:	2600      	movs	r6, #0
 8001c84:	42a6      	cmp	r6, r4
 8001c86:	d109      	bne.n	8001c9c <__libc_init_array+0x24>
 8001c88:	4d0b      	ldr	r5, [pc, #44]	; (8001cb8 <__libc_init_array+0x40>)
 8001c8a:	4c0c      	ldr	r4, [pc, #48]	; (8001cbc <__libc_init_array+0x44>)
 8001c8c:	f000 f818 	bl	8001cc0 <_init>
 8001c90:	1b64      	subs	r4, r4, r5
 8001c92:	10a4      	asrs	r4, r4, #2
 8001c94:	2600      	movs	r6, #0
 8001c96:	42a6      	cmp	r6, r4
 8001c98:	d105      	bne.n	8001ca6 <__libc_init_array+0x2e>
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ca0:	4798      	blx	r3
 8001ca2:	3601      	adds	r6, #1
 8001ca4:	e7ee      	b.n	8001c84 <__libc_init_array+0xc>
 8001ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001caa:	4798      	blx	r3
 8001cac:	3601      	adds	r6, #1
 8001cae:	e7f2      	b.n	8001c96 <__libc_init_array+0x1e>
 8001cb0:	08001cd8 	.word	0x08001cd8
 8001cb4:	08001cd8 	.word	0x08001cd8
 8001cb8:	08001cd8 	.word	0x08001cd8
 8001cbc:	08001cdc 	.word	0x08001cdc

08001cc0 <_init>:
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	bf00      	nop
 8001cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc6:	bc08      	pop	{r3}
 8001cc8:	469e      	mov	lr, r3
 8001cca:	4770      	bx	lr

08001ccc <_fini>:
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	bf00      	nop
 8001cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd2:	bc08      	pop	{r3}
 8001cd4:	469e      	mov	lr, r3
 8001cd6:	4770      	bx	lr
